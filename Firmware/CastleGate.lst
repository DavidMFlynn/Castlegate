CastleGate.asm                                                        Page: 1
/HPRR Electrical Dept/Castlegate/Firmware/

00001 0000 	;**********************************************************************
00002 0000 	;
00003 0000 	;    Filename: CastleGate.asm
00004 0000 	;    Date:5/16/2018
00005 0000 	;    File Version:1.0d1
00006 0000 	;
00007 0000 	;    Author:David M. Flynn
00008 0000 	;    Company:Highland Pacific RR, Inc.
00009 0000 	;    Project:Castle Gate Yard computer
00010 0000 	; 
00011 0000 	;**********************************************************************
00012 0000 	;
00013 0000 	;    Files required:	CastleGate.asm	this file
00014 0000 	;	P16F877.INC	! processor equ's
00015 0000 	;	SerialNo.inc	serialization
00016 0000 	;	BrainEQUs.inc	! Standard EQUs
00017 0000 	;	BMacros.asm	! macro definitions
00018 0000 	;	Strings.inc	# string data
00019 0000 	;	Data.inc	other data
00020 0000 	;	 HPRRMenuData.inc	# TCC Menus Data
00021 0000 	;	 PanelCtrlData.inc	# Panel module control data and EQUs
00022 0000 	;	 BlockData.inc	  Block numbers
00023 0000 	;	 MLSMData.inc	Switch machine block data
00024 0000 	;	LowStuff.asm	! mostly I/O routines
00025 0000 	;	DataAccessSeg0.asm	# Quick 'n easy access to SRAM Data
00026 0000 	;	BlockControlSeg0.asm	# Block Power and Control
00027 0000 	;	NICStuff.asm	! 10baseT Network I/O
00028 0000 	;	Main.asm	# Main event loop
00029 0000 	;	PanelControl.asm	# Control panel I/O routines
00030 0000 	;	CT IO.asm	Communications Loop
00031 0000 	;	RecBlkPwr.inc	# UDP receiver of Blk Pwr and SM Data
00032 0000 	;	Dispatch.asm	! User Button Cmd Inturpeter
00033 0000 	;	DispatchHPRR.asm	# custom part of Cmd Inturpeter
00034 0000 	;	Ether.asm	# TCC Custom HTTP I/O
00035 0000 	;	HTTPServer.asm	! HTTP Sever
00036 0000 	;	UDP_DataInOut.asm	! UDP Support
00037 0000 	;	DMFE_Intf.asm	! Low Level I/O
00038 0000 	;	DMFEInit.asm	# Init, Comm IO, Cab Btns, etc.
00039 0000 	;	Seg3Custom.asm	Custom I/O
00040 0000 	;	Seg3Custom2.asm	Custom I/O
00041 0000 	;	Bootloader.asm	! Boot Loader to do software updates
00042 0000 	;
00043 0000 	;  ! These are standard files used in multiple projects, there are no
00044 0000 	;    custom routines in these files.
00045 0000 	;  # These files are common to HPRR TCC projects. 
00046 0000 	;
00047 0000 	;**********************************************************************
00048 0000 	;
00049 0000 	;    Notes:
00050 0000 	;
00051 0000 	;Castle Gate Keyboard Computer
00052 0000 	;This computer is located in the Castle Gate control panel
00053 0000 	; It communicates with the MP SM & BP computer.
00054 0000 	;
00055 0000 	; Unless specified All routines exit with ram bank zero selected.
00056 0000 	;
00057 0000 	; CGI:Common Gateway Interface
00058 0000 	;  Data is received via http requests in the form "GET /index.html?a=6&b=23"
00059 0000 	;  These requests are generated when a browser processes a POST form's SEND command
00060 0000 	;
00061 0000 	; EGI:Embedded Gateway Interface
00062 0000 	;  The a two types of EGI
00063 0000 	;   Value repacement where "@1" or "@g" are replaced with a string
00064 0000 	;     example: @1 is replaced with the ADC1 voltage "2.3"
00065 0000 	;              @g is replaced with ADC7's value "00980" 0..1023 posible with 10bit A/D
00066 0000 	;   There can be a different set of EGI's @1..@z for each file based on fileidx
00067 0000 	;   The second type is # value substitution
00068 0000 	;    this is where a tag like <!--#A--> is replaced with the tag
00069 0000 	;       <img src='ledoff.gif'> or <img src='ledon.gif'> depending on the value of the var $led1
00070 0000 	;
00071 0000 	;**********************************************************************
00072 0000 	; Revision History
00073 0000 	;
00074 0000 	; 1.0d1    5/16/2018	Copied from Casper Tower
00075 0000 	; 1.0b3    7/12/2009	Copied common code from Overview Tower, Cab to Thr x-later + Data
00076 0000 	; 1.0b2    6/2/2007	First working version of Casper Tower
00077 0000 	; 1.0b1    6/22/2005	Copied from BPK
00078 0000 	; 1.0b1    9/5/2004	Added Dispatch, Bootloader, and standard HTTP server
00079 0000 	; 1.0d1    12/15/2002  Copied from Resist v1.0d3
00080 0000 	;	Removed resist specific code
00081 0000 	;
00082 0000 	; 1.0b3    10/29/2002  All non-standard code has been moved from LowStuff.asm
00083 0000 	;	Standard NIC suport routines have all been moved to NICStuff.asm
00084 0000 	;	Added suport for CGI's
00085 0000 	; 1.0b2    10/25/2002  Moved OnTheHalfSecond to segment 2 (Main.asm)
00086 0000 	;	Moved serial and other unused routines back into LowStuff.asm
00087 0000 	; 1.0b1    10/21/2002  Fixed pH Up/Down Speed and Water Flow Error.
00088 0000 	;	Added "Filling... 00016"
00089 0000 	; 1.0d4    10/9/2002   Added Error display on 4th line, Panel count down
00090 0000 	;	 causes water add, Sump lvl Sw opens spent valve,
00091 0000 	;	 auto and manual adds.
00092 0000 	; 1.0d3    10/2/2002	pH data is good, Front panel setup routines work.
00093 0000 	; 1.0d2    10/1/2002	Created BMacros.asm, Strings moved to Main.asm
00094 0000 	;	Added Service routines.
00095 0000 	; 1.0d1    8/29/2002	Copied Flow 1.0b5  Begin of change to Resist.asm
00096 0000 	;
00097 0000 	;**********************************************************************
00098 0000 	; Technical Stuff
00099 0000 	;
00100 0000 	; Assumptions:
CastleGate.asm                                                        Page: 2
/HPRR Electrical Dept/Castlegate/Firmware/

00101 0000 	;	The subnet mask is 255.255.255.0
00102 0000 	;	This subnet is 192.168.1 (from eeprom) and must be correct
00103 0000 	;	  as we don't do RARP, BOOTP, or DHCP.
00104 0000 	;	The routers IP Address is 192.168.1.1 (this subnet.1)
00105 0000 	;	My IP address is in eeprom (192.168.1.123)
00106 0000 	;	
00107 0000 	; Ethernet frame:
00108 0000 	;	Preamble (8 bytes) added by NIC
00109 0000 	;	Destination Address (6 bytes)
00110 0000 	;	Source Address (6 bytes)
00111 0000 	;	Frame Type (pcol) (2 bytes)
00112 0000 	;	  (PCOL_ARP, PCOL_IP)
00113 0000 	;	The Data (46 to 1500 bytes)
00114 0000 	;	CRC code (4 bytes) added by NIC
00115 0000 	;
00116 0000 	; ARP/RARP message format: this all goes into the Data field in the Ethernet Frame (type PCOL_ARP)
00117 0000 	;	Hardware Type (2 bytes) ethernet=1, HTYPE
00118 0000 	;	Proticol Type (2 bytes) IP type=800, ARPPRO
00119 0000 	;	Hardware Address Length (HLEN) (1 byte) ethernet=6, MACLEN
00120 0000 	;	Proticol Addres Length (PLEN) (1 byte) IPv4=4, IPAddrLEN
00121 0000 	;	Operation (2 bytes) 1 ARPREQ or 2 ARPRESP
00122 0000 	;	Sender's Hardware Address (MAC)
00123 0000 	;	Sender's IP Address
00124 0000 	;	Target's Hardware Address (MAC)
00125 0000 	;	Target's IP Address (MAC)
00126 0000 	;
00127 0000 	; IP Datagram message format: this all goes into the Data field in the Ethernet Frame (type PCOL_IP)
00128 0000 	;	Vers and Header Length (1 nibble each), hardcoded as 0x45, IPv4, 5 long words
00129 0000 	;	Servive Type (1 byte) hardcoded as 0x00
00130 0000 	;	Total Length of datagram in bytes (2 bytes), 46..1500, iplen
00131 0000 	;	Identification (2 bytes) ++IPDatagramID (high byte is hardcoded as 0x00)
00132 0000 	;	Flags (3 bits) and Fragment offset (13 bits) hardcoded as 0x0000
00133 0000 	;	Time to Live (1 byte) hardcoded as 0x64
00134 0000 	;	Proticol (1 byte) ipcol
00135 0000 	;	Header Checksum (2 bytes) checkhi:checklo
00136 0000 	;	Source IP Address (4 bytes) myip
00137 0000 	;	Destination IP Address (4 bytes) remip
00138 0000 	;	Data 0..1480 bytes
00139 0000 	;
00140 0000 	; ICMP Message format for "PING": this all goes into the data field in an IP Datagram
00141 0000 	;	Type (1 byte) 0 ICMP_EReply, or 8 ICMP_ERequest
00142 0000 	;	Code (1 byte) 0
00143 0000 	;	ICMP Checksum (2 bytes)	We only read down to here
00144 0000 	;	Identifier (2 bytes)		 the rest gets send back as is.
00145 0000 	;	Sequence Number (2 bytes)
00146 0000 	;	Optional Data 0..1472 bytes
00147 0000 	;
00148 0000 	; UDP User Datagram Protocol "user datagram" (ipcol from IP Datagram = PUDP):
00149 0000 	;    this all goes into the data field in an IP Datagram
00150 0000 	;
00151 0000 	;	pseudo header (8 bytes) not send with the data
00152 0000 	;	    Source IP Address from IP Datagram (4 bytes)
00153 0000 	;	    Dest IP Address from IP Datagram (4 bytes)
00154 0000 	;	    0x00 byte
00155 0000 	;	    ipcol byte from IP Datagram (PUDP=17)
00156 0000 	;	    UDP message length (2 bytes) including header,
00157 0000 	;	     not including the pseudo header (8..1480)
00158 0000 	;
00159 0000 	;	Source port (2 bytes) 0 or where to send replies
00160 0000 	;	Destination port (2 bytes) application port
00161 0000 	;	Message length (2 bytes) including header (8..1480)
00162 0000 	;	Checksum (2 bytes) (optional 0 of csum value 0=FFFF)
00163 0000 	;	    if used the pseudo-header must be included in the csum
00164 0000 	;	Data (0..1472 bytes)
00165 0000 	;
00166 0000 	; TCP  Transmission Control Protocol (ipcol from IP Datagram = PTCP):
00167 0000 	;     this all goes into the data field in an IP Datagram
00168 0000 	;
00169 0000 	;	pseudo header (8 bytes) not send with the data
00170 0000 	;	    Source IP Address from IP Datagram (4 bytes)
00171 0000 	;	    Dest IP Address from IP Datagram (4 bytes)
00172 0000 	;	    0x00 byte
00173 0000 	;	    ipcol byte from IP Datagram (PUDP=17)
00174 0000 	;	    Message length (2 bytes) including header,
00175 0000 	;	     not including the pseudo header (8..1480)
00176 0000 	;
00177 0000 	;	Source Port (2 bytes)
00178 0000 	;	Destination Port (2 bytes)
00179 0000 	;	Sequence Number (4 bytes) location in the senders byte stream this data fits
00180 0000 	;	Acknowledgment Number (4 bytes) byte number the source expects next,
00181 0000 	;		 for bi-directional transfer.
00182 0000 	;	Header length (4 bits) length of header in 32 bit words (5)
00183 0000 	;	Reserved (6 bits)
00184 0000 	;	Code Bits (6 bits)
00185 0000 	;	Window (2 bytes) aka buffer size of source, mine is 32 bytes, their's is ignored.
00186 0000 	;	Checksum (2 bytes) (optional 0 of csum value 0=FFFF)
00187 0000 	;	    if used the pseudo-header must be included in the csum
00188 0000 	;	Urgent Pointer (2 bytes) incoming ones are ignored
00189 0000 	;	Options (if used must be in 32 bit chuncks), MSS sent, incoming ones are ignored
00190 0000 	;	Data (1480-header length)
00191 0000 	;
00192 0000 	;
00193 0000 	; TTFTP Tiny Trivial File Transport Protocol (this all goes in the Data field of a TCP segment
00194 0000 	;  uses the TFTPPort
00195 0000 	;  incoming data on this port is written to the eeROM (serial eeproms)
00196 0000 	;
00197 0000 	;	Length (1 byte) 1..32
00198 0000 	;	Address (3 bytes) big endian 0..
00199 0000 	;	Data (Length bytes)
00200 0000 	;
CastleGate.asm                                                        Page: 3
/HPRR Electrical Dept/Castlegate/Firmware/

00201 0000 	;**********************************************************************
00202 0000 	;
00203 0000 	;Constants for conditional assembly
00204 0000 	;
00205 0000 		constant	ARPsNeverDie=1
00206 0000 		constant	TTFTPtoSRAM=1	;TTFTP to SRAM
00207 0000 		constant	TTFTPtoEEROM=1	;TTFTP to eeRom
00208 0000 		constant	EnableEEROMCopy=0	;Allow EEROM to be copied to SRAM
00209 0000 	;
00210 0000 		constant	SRAM_Strings=1	;Strings are stored in SRAM
00211 0000 		constant	CodeMemStrings=0	;Strings are stored in Code Memory
00212 0000 		constant	ISR_Timers=0	;# of Timers used 0..6
00213 0000 		constant	UsesTimerFinished=0
00214 0000 		constant	testing=0	;NIC/ether status chars to Disp
00215 0000 		constant	ErrMsgsToLCD=1	;NIC/ether errors to Disp
00216 0000 		constant	testingRTC=0	;set_rtc at powerup
00217 0000 		constant	ARPtesting=0	;Show arp msgs on LCD
00218 0000 		constant	UDPtesting=0	;Show UDP msgs on LCD
00219 0000 		constant	TFTPtesting=0	;Show TFTP msgs on LCD
00220 0000 		constant	ShowSplashScrn=1	;Show the splash screen at startup
00221 0000 		constant	UsesTCPIPDataPort=0
00222 0000 		constant	UsesUDP=1
00223 0000 		constant	UseUCEGIs=0	;Uses upper case EGI's
00224 0000 		constant	UsesHashEGIs=0
00225 0000 		constant	oldCode=0	;kills old code without deleting it
00226 0000 	;  analog IO
00227 0000 		constant	UsesMAX110=0	;MAXIM MAX110 14bit ADC
00228 0000 		constant	MAXANA0=0	; pH probe
00229 0000 		constant	MAXANA1=0	; not used
00230 0000 		constant	AnyANAUsed=0	;Set 0 if no Analog IO to save memory
00231 0000 		constant	StdANA0=0	;Standard Analog
00232 0000 		constant	StdANA1=0	;Analog 1 is active?
00233 0000 		constant	StdANA2=0	;Analog 2 is active?
00234 0000 		constant	StdANA3=0	;Analog 3 is active?
00235 0000 		constant	StdANA4=0	;Analog 4 is active?
00236 0000 		constant	StdANA5=0	;Analog 5 is active?
00237 0000 		constant	StdANA6=0	;Analog 6 is active?
00238 0000 		constant	StdANA7=0	;Analog 7 is active?
00239 0000 		constant	ANATest=0	;Display the first 3 Analog values?
00240 0000 	;
00241 0000 	; features control...
00242 0000 		constant	UsesNIC=1
00243 0000 		constant	AllowReceiveBroadcast=0
00244 0000 		constant	UsesSRAM=1
00245 0000 		constant	UsesDataROM=1	;Uses Data ROM image from d.d file
00246 0000 				; Requires SRAM_Strings
00247 0000 		constant	UsesISR=0
00248 0000 		constant	UsesBootloader=1	;Tell LowStuff to call PwrUpTest
00249 0000 		constant	UsesPushPop=0
00250 0000 		constant	UsesSRamPushPop=0
00251 0000 		constant	UsesSpeedTrap=0	;Travel Time, Speed and Acceleration
00252 0000 				; Requires: (HasISR=0x80)
00253 0000 		constant	UsesLCD=1	;Uses the 4x20 Optrix LCD
00254 0000 0014 	LCD_ChrsPerLine	EQU	d'20'
00255 0000 		constant	Useslcd_ReadData=1
00256 0000 		constant	UsesScrollMenu=0
00257 0000 		constant	UsesI2C=1
00258 0000 		constant	UsesEEROMFiles=1
00259 0000 		constant	UsesDataLogging=0	;Data logging to eeRom 0x008000-0x00FFFF
00260 0000 		constant	UsesRS232BufIO=0
00261 0000 		constant	UsesRS232=0	;if 0 don't assm the RS232 code
00262 0000 		constant	RS232Active=0	;RS232 port is enabled for output?
00263 0000 		constant	RS232Config=0	;Get IP and data (xmodem)
00264 0000 		constant	xmodemEEROM=0	;xmodem_recv
00265 0000 		constant	HasRTC=0	;Has a Real Time Clock?
00266 0000 		constant	UsesLDI0=1	;Latched data inputs 0..7
00267 0000 		constant	UsesLDI1=0	;Latched data inputs 8..15
00268 0000 		constant	UsesLDI2=0	;Latched data inputs 16..23
00269 0000 		constant	UsesLDI3=0	;Latched data inputs 24..31
00270 0000 		constant	UsesLDO0=1	;Reset,LEDs, and LDO_7
00271 0000 		constant	UsesLDO1=1	;latched data outputs 8..15
00272 0000 		constant	UsesLDO2=0
00273 0000 		constant	UsesLDO3=0
00274 0000 		constant	UsesDiv24x0A=0
00275 0000 		constant	UsesDiv16x16=0
00276 0000 	; the tests...
00277 0000 		constant	RTCTest=0	;Display the RTC?
00278 0000 		constant	Do_LD_Test=0	;run the LED and Button test
00279 0000 		constant	Do_SRAM_Test=0	;run the SRAM (512KB) test
00280 0000 		constant	Do_ZeroRAM=1	;Load 0x00 into SRAM
00281 0000 		constant	Do_eeROM_Test=0	;run the eeROM test
00282 0000 		constant	Do_RS232_Test=0	;run the RS232 test
00283 0000 	;
00284 0000 	; Optional feature overides
00285 0000 		constant	Use_display_rtc=0
00286 0000 		constant	UsesInOutC=1
00287 0000 	;
00288 0000 	;**********************************************************************
00289 0000 	;
00290 0000 		list	p=16f877,r=hex,W=0	;list directive to define processor
00291 0000 		include	p16f877.inc	; processor specific variable definitions
00001 0000 		LIST
00002 0000 	; P16F877.INC  Standard Header File, Version 1.16    Microchip Technology, Inc.
00391 0000 		NOLIST
00392 0000 	;
00292 0000 	;	
00293 2007 3F72 		__CONFIG _CP_OFF & _WDT_OFF & _BODEN_ON & _PWRTE_ON & _HS_OSC & _WRT_ENABLE_ON & _LVP_OFF & _DEBUG_OFF & _CPD_OFF 
00294 0000 	;
00295 0000 	; Code Protection Off, Watch Dog Off, Brown-Out Reset On, Power-Up Timer On,
00296 0000 	; High-Speed Crystal, Write Enable Program Memory On, Low-Voltage Programming Off,
CastleGate.asm                                                        Page: 4
/HPRR Electrical Dept/Castlegate/Firmware/

00297 0000 	; In-Circuit Debugger Mode Off, Code Protect EEPROM Off
00298 0000 	;
00299 0000 	; '__CONFIG' directive is used to embed configuration data within .asm file.
00300 0000 	; The lables following the directive are located in the respective .inc file.
00301 0000 	; See respective data sheet for additional information on configuration word.
00302 0000 	;
00303 0000 	;
00304 0000 	;=========================================================================================
00305 0000 	;=========================================================================================
00306 0000 	;Constants
00307 0000 		include	SerialNo.inc
00001 0000 	;*******************************************************************************
00002 0000 	;
00003 0000 	;    Filename: SerialNo.inc
00004 0000 	;    Date:5/16/2018
00005 0000 	;    File Revision:1.0
00006 0000 	;
00007 0000 	;    Author:David M. Flynn
00008 0000 	;    Company:Oxford V.U.E., Inc.
00009 0000 	;    Project: HPRR Casper Tower
00010 0000 	;    MAC:00 04 A3 00 00 23
00011 0000 	;    IP:192.168.2.143
00012 0000 	;    S/N:7981
00013 0000 	;
00014 0000 	; 
00015 0000 	;**********************************************************************
00016 0000 	;
00017 0000 	;    Notes:
00018 0000 	;	There is no code in this file,
00019 0000 	;	only Data and EQU's
00020 0000 	;
00021 0000 	;
00022 0000 	;**********************************************************************
00023 0000 	; Revision History
00024 0000 	;
00025 0000 	; 1.0    5/16/2018	Updates for Castle Gate Yard
00026 0000 	; 1.0    6/22/2004	First created
00027 0000 	;
00028 0000 	;**********************************************************************
00029 0000 	;
00030 0000 		constant SaveStatusRecords=0
00031 0000 		constant UsesBlockCmdTable=1
00032 0000 		constant UsesSyncBP=1
00033 0000 		constant UsesSpeaker=1
00034 0000 		constant UsePsuedoReset=0
00035 0000 		constant UsesBlockModules=1
00036 0000 		constant HasAThrottle=1
00037 0000 0006 	MyCabNum	EQU	0x06
00038 0000 		constant UsesInputTester=1
00039 0000 		constant UsesOutputTester=1
00040 0000 		constant StartupInSvsMode=0
00041 0000 		constant BlockToBrainBds=1
00042 0000 		constant UsesGetCabNumX=1
00043 0000 		constant UsesShowInputs=1
00044 0000 		constant UsesBlockCmdTest=1
00045 0000 		constant UsesAutoSMCtrl=1
00046 0000 		constant LightUnusedSMLEDs=1
00047 0000 		constant HasBlkRelays=1
00048 0000 		constant HasBlockDetectors=1
00049 0000 		constant Has_OB_OccLEDs=0
00050 0000 		constant UsesDisableUHSelector=0
00051 0000 		constant CabCount=6
00052 0000 		constant UsesSeg0DataAccess=1
00053 0000 		constant UsesVistaSelect=0
00054 0000 		constant dpIsOwner=1
00055 0000 	;
00056 0000 004B 	kMaxBlockNum	EQU	d'75'	;0..75 (76 blocks)
00057 0000 	;
00058 0000 	;
00059 0000 0043 	#Define	SignonString	'CastleGate v1.0'
00060 0000 	;
00061 0000 1F2D 	kSerialNumber	EQU	d'7981'	; Serial Number <<<<<<< fix
00062 0000 	;
00063 0000 0001 	EndOfEEROM	EQU	0x01	;0x010000 is the first address past the end
00064 0000 	; EEPROMs must be installed in 64KB increments 1=64KB, 2=128KB, 3=192KB, 4=256KB...8=512KB
00065 0000 		constant	Using64KBEEPROM=0	;EEPROM addressing 0:15+3, 1:16+3
00066 0000 	;
00067 0000 	;
00068 0000 0000 	kDefaultIOCtrl	EQU	b'00000000'
00069 0000 	;
00070 0000 0000 	MAC_Addr0	EQU	0x00	;MSB of MAC Address (48 bit number)
00071 0000 0004 	MAC_Addr1	EQU	0x04	; first 3 bytes are assigned by
00072 0000 00A3 	MAC_Addr2	EQU	0xA3	; IEEE
00073 0000 0000 	MAC_Addr3	EQU	0x00	;low 2 bytes are in eprom 0 and 1
00074 0000 	;
00075 0000 0023 	kMAClsw	EQU	0x0023	;low 16 bits of MAC address
00076 0000 00C0 	kIPmsb	EQU	d'192'
00077 0000 00A8 	kIPb2	EQU	d'168'
00078 0000 0002 	kIPb3	EQU	d'2'
00079 0000 008F 	kIPlsb	EQU	d'143'
00080 0000 00FD 	kCSum	EQU	0xFD	;csum of last 6 bytes
00081 0000 				; all 7 bytes must add up to xxFF
00082 0000 	;
00083 0000 	;
00084 0000 	;
00308 0000 	;
00309 0000 		include	BrainEQUs.inc
00001 0000 		subtitle	"BrainEQUs.inc"

00002 0000 		page
CastleGate.asm   "BrainEQUs.inc"                                         Page: 5
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

00003 0000 	;===========================================================================================
00004 0000 	;
00005 0000 	;  FileName: BrainEQUs.inc
00006 0000 	;  Date: 5/6/06
00007 0000 	;  File Version: 1.1.1
00008 0000 	;  
00009 0000 	;  Author: David M. Flynn
00010 0000 	;  Company: Oxford V.U.E., Inc.
00011 0000 	;
00012 0000 	;============================================================================================
00013 0000 	; Notes:
00014 0000 	;  This file contains only EQU's.
00015 0000 	;  These EQU's are common to most Brain (GP CPU) projects.
00016 0000 	;
00017 0000 	;============================================================================================
00018 0000 	; Revision History
00019 0000 	;
00020 0000 	; 1.1.1 5/6/2006	Added ADC EQUs, Baud38400
00021 0000 	; 1.1   12/2/2004	Added Param70... and HasISR to this file.
00022 0000 	; 1.0   10/29/2004	Copied EQU's from Vis-U-Etch7.asm
00023 0000 	;
00024 0000 	;============================================================================================
00025 0000 	;
00026 0000 00FF 	All_In	EQU	0xFF
00027 0000 0000 	All_Out	EQU	0x00
00028 0000 	;
00029 0000 	;=========================================================================================
00030 0000 	;Conditions
00031 0000 		if UsesISR
00033 0000 		else
00034 0000 0000 	HasISR	EQU	0x00	;used to enable interupts 0x80=true 0x00=false
00035 0000 		endif
00036 0000 	;
00037 0000 	;---------------------------------------------------------
00038 0000 	; Baud rates for Fosc= 19.6608MHz
00039 0000 	; Low speed async (Baud Fosc/(64(X+1)))
00040 0000 00FF 	Baud1200	EQU	0xFF	;1200 0% Error
00041 0000 007F 	Baud2400	EQU	0x7F	;2400 0% Error
00042 0000 003F 	Baud4800	EQU	0x3F	;4800 0% Error
00043 0000 001F 	Baud9600	EQU	0x1F	;9600 0% Error
00044 0000 000F 	Baud19200	EQU	0x0F	;19200 0% Error
00045 0000 0009 	Baud28800	EQU	0x09	;30720 Tx with 2 stop bits
00046 0000 0008 	Baud33600	EQU	0x08	;34133
00047 0000 0007 	Baud38400	EQU	0X07	;38400 0% Error
00048 0000 0004 	Baud57600	EQU	0x04	;61440
00049 0000 	;Baud115200	EQU	0x02	;102.4 12% Error
00050 0000 	; Low speed async (Baud=Fosc/(16(X+1)))
00051 0000 	;Baud115200	EQU	0x0A	;111.709 3% Error
00052 0000 	;
00053 0000 	;----------------------------
00054 0000 	; Timer 2 stuff
00055 0000 	;
00056 0000 007E 	T2CON_Value	EQU	b'01111110'	;preS 1:16 postS 1:16
00057 0000 004B 	PR2_Value	EQU	d'75'	;3.90625 miliseconds
00058 0000 	;
00059 0000 0078 	TIMER1_DIV	EQU	d'120'	;Fosc/4/8/(120*256)=20
00060 0000 	;bit 0 is used for R/W 1/0, bits 3:1 are the device # 0..7, each device can hold 32k bytes
00061 0000 00A0 	EEROM_ADDR	EQU	0xA0	;i2c addr for eerom 0
00062 0000 0020 	ROMPAGE_LEN	EQU	d'32'	; eerom buffer size
00063 0000 0080 	XBLOCK_LEN	EQU	d'128'	;xmodem block length
00064 0000 0006 	MACLEN	EQU	0x06
00065 0000 0004 	IPAddrLEN	EQU	0x04
00066 0000 000C 	ROM_FNAMELEN	EQU	0x0C	;Maximum filename size
00067 0000 0064 	MAXFILES	EQU	d'100'	;Maximum files in dir
00068 0000 	;
00069 0000 	;ADCON0 stuff
00070 0000 0081 	ADCON0Val	EQU	0x81	;div32,CH0,ON
00071 0000 0080 	ADC_CLOCK_DIV_32	EQU	0x80
00072 0000 0038 	ADC_CLOCK_DIV_Mask	EQU	0x38
00073 0000 00C7 	CHS_NoneMask	EQU	0xC7	;Channel select none aka zero
00074 0000 0000 	CHS0Mask	EQU	0x00	; bits for ch 0
00075 0000 0008 	CHS1Mask	EQU	0x08	; bits for ch 1
00076 0000 0010 	CHS2Mask	EQU	0x10	; bits for ch 2
00077 0000 0018 	CHS3Mask	EQU	0x18	; bits for ch 3
00078 0000 0020 	CHS4Mask	EQU	0x20	; bits for ch 4
00079 0000 0028 	CHS5Mask	EQU	0x28	; bits for ch 5
00080 0000 0030 	CHS6Mask	EQU	0x30	; bits for ch 6
00081 0000 0038 	CHS7Mask	EQU	0x38	; bits for ch 7
00082 0000 	;
00083 0000 	;
00084 0000 	;ADCON1 stuff
00085 0000 0080 	All_Analog	EQU	0x80	;AN0..AN7 w/ Right Justified
00086 0000 0000 	All_AnalogLeft	EQU	0x00	;AN0..AN7 w/ Left Justified
00087 0000 0081 	MaxAnaWVref	EQU	0x81	;AN0..AN2,Vref+,AN4..AN7
00088 0000 0082 	Analog5Chnls	EQU	0x82	;AN0..AN4
00089 0000 0002 	Analog5ChnlsLeft	EQU	0x02	;AN0..AN4
00090 0000 0083 	Analog4ChnlsWVref	EQU	0x83	;AN0..AN2,Vref+,AN4
00091 0000 0084 	RA0_RA1_RA3_ANALOG	EQU	0x84	;AN0,AN1,AN3 w/ Right Justified
00092 0000 0085 	Analog2ChnlsWVref	EQU	0x85	;AN0,AN1,Vref+
00093 0000 0087 	All_Digital	EQU	0x87	;No AN w/ Right Justified of ADRESH
00094 0000 0088 	Analog6ChnlsWVref	EQU	0x88	;AN0,AN1,Vref-,Vref+,AN4..AN7
00095 0000 0089 	Analog6Chnls	EQU	0x89	;AN0..AN5
00096 0000 008A 	Analog5ChnlsWVref	EQU	0x8A	;AN0..AN2,Vref+,AN4,AN5
00097 0000 008B 	Analog4ChnlsW2Vref	EQU	0x8B	;AN0,AN1,Vref-,Vref+,AN4,AN5
00098 0000 008C 	Analog3ChnlsW2Vref	EQU	0x8C	;AN0,AN1,Vref-,Vref+,AN4
00099 0000 008D 	Analog2ChnlsW2Vref	EQU	0x8D	;AN0,AN1,Vref-,Vref+
00100 0000 008E 	RA0_ANALOG	EQU	0x8E	;RA0 w/ Right Justified
00101 0000 008F 	Analog1ChnlW2Vref	EQU	0x8F	;AN0,Vref-,Vref+
00102 0000 	;
00103 0000 000A 	LEDTIME	EQU	d'10'	;Interval for toggling system LED 10 ticks
CastleGate.asm   "BrainEQUs.inc"                                         Page: 6
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

00104 0000 0040 	TXBUFFLEN	EQU	d'64'	;64 byte buffer A0..DF
00105 0000 	;
00106 0000 	;1:8 prescale,Osc Enabled, Timer on, etc see page 51
00107 0000 0035 	TIMER1_SET	EQU	0x35	;1:8 Prescale, Osc Off,Internal Fosc/4 clock, Enabled
00108 0000 	;
00109 0000 	;ascii
00110 0000 0001 	SOH	EQU	0x01
00111 0000 0004 	EOT	EQU	0x04
00112 0000 0006 	ACK	EQU	0x06
00113 0000 000A 	LF	EQU	0x0A
00114 0000 000D 	CR	EQU	0x0D
00115 0000 0015 	NAK	EQU	0x15
00116 0000 0018 	CAN	EQU	0x18
00117 0000 001B 	ESC	EQU	d'27'
00118 0000 	;
00119 0000 0806 	PCOL_ARP	EQU	0x0806	;Protocol type: ARP 
00120 0000 0800 	PCOL_IP	EQU	0x0800	;IP
00121 0000 0800 	ARPPRO	EQU	0x0800	
00122 0000 	; 
00123 0000 0001 	HTYPE	EQU	0x0001
00124 0000 0001 	ARPREQ	EQU	0x0001	;ARP request & response IDs 
00125 0000 0002 	ARPRESP	EQU	0x0002 
00126 0000 0003 	RARPREQ	EQU	0x0003	;RARP request & response IDs 
00127 0000 0004 	RARPRESP	EQU	0x0004
00128 0000 	; 
00129 0000 0001 	PICMP	EQU	1	;IP protocol values: ICMP 
00130 0000 0000 	ICMP_EReply	EQU	0	;ICMP type echo reply
00131 0000 0008 	ICMP_ERequest	EQU	8	;ICMP type echo request
00132 0000 	;
00133 0000 	; IP ipcol values
00134 0000 0006 	PTCP	EQU	6	;TCP 
00135 0000 0011 	PUDP	EQU	d'17'	;UDP 
00136 0000 	; 
00137 0000 000E 	ETHHDR_LEN	EQU	MACLEN+MACLEN+2	;Ethernet frame header length 
00138 0000 0014 	IPHDR_LEN	EQU	d'20'	;IP, TCP and ICMP header lengths 
00139 0000 0014 	TCPHDR_LEN	EQU	d'20' 
00140 0000 0008 	UDPHDR_LEN	EQU	d'8'
00141 0000 0004 	ICMPHDR_LEN	EQU	4	;(only include type, code & csum in ICMP hdr) 
00142 0000 0004 	TCPOPT_LEN	EQU	4	;Length of TCP MSS option 
00143 0000 0018 	TCPSYN_LEN	EQU	d'24'	;TCP header length including MSS option	
00144 0000 00D4 	MAXPING_LEN	EQU	d'212'	;Max length of Ping data 
00145 0000 0012 	NICETHERHEADER_LEN	EQU	0x12	;NIC hardware packet header length
00146 0000 000E 	ETHERHEADER_LEN	EQU	0x0E
00147 0000 0020 	eeROMBuffLen	EQU	0x20	; size of eeROM buffer in RAM
00148 0000 	; 
00149 0000 	;TCP segment code bits
00150 0000 0001 	TFIN	EQU	0x01	;Option flags: no more data (sender is done)
00151 0000 0002 	TSYN	EQU	0x02	;synchronize sequence numbers 
00152 0000 0004 	TRST	EQU	0x04	;reset connection 
00153 0000 0008 	TPUSH	EQU	0x08	;this segment requests a push of buffered data 
00154 0000 0010 	TACK	EQU	0x10	;acknowledgement field is valid
00155 0000 0020 	TURGE	EQU	0x20	;urgent pointer field is valid
00156 0000 	; 
00157 0000 05B4 	TCP_MSS	EQU	d'1460'	;Max Segment Size for TCP 
00158 0000 0BB8 	TCP_WDWSize	EQU	d'3000'	;Max Window size for buffer fit
00159 0000 	;
00160 0000 	;TCP/UDP Ports
00161 0000 0007 	ECHOPORT	EQU	d'7'	;udp/tcp Port numbers: echo 
00162 0000 000D 	DAYPORT	EQU	d'13'	;udp/tcp daytime 
00163 0000 0025 	TimePort	EQU	d'37'	;udp/tcp time
00164 0000 0039 	TermPort	EQU	d'57'	;udp/tcp any private terminal access
00165 0000 003B 	FilePort	EQU	d'59'	;udp/tcp any private file service
00166 0000 0043 	BOOTPSPort	EQU	d'67'	;udp/tcp BOOTP or DHCP server
00167 0000 0044 	BOOTPCPort	EQU	d'68'	;udp/tcp BOOTP or DHCP client
00168 0000 0045 	TFTPPort	EQU	d'69'	;udp/tcp Trivial File Transfer Protocol
00169 0000 0050 	HTTPORT	EQU	d'80'	;udp/tcp World Wide Web HTTP
00170 0000 0052 	xferPort	EQU	d'82'	;udp/tcp XFER Utility
00171 0000 0057 	IPDATAPORT	EQU	d'87'	;udp/tcp any private terminal link
00172 0000 	;
00173 0000 003B 	TTFTPtoSRAMPort	EQU	FilePort
00174 0000 0045 	TTFTPtoEEROMPort	EQU	TFTPPort
00175 0000 0039 	TCPRS232Port	EQU	TermPort
00176 0000 	;
00177 0000 	;PCLATH values for the diferent segments
00178 0000 0000 	Seg0Val	EQU	0x00
00179 0000 0008 	Seg1Val	EQU	0x08
00180 0000 0010 	Seg2Val	EQU	0x10
00181 0000 0018 	Seg3Val	EQU	0x18
00182 0000 	;
00183 0000 	;PortA bits
00184 0000 0004 	SystemLED	EQU	4
00185 0000 	;
00186 0000 0010 	SystemLEDMask	EQU	0x10
00187 0000 	;
00188 0000 	;PortB bits
00189 0000 0070 	PORTB_Value	EQU	0x70	;init value for B
00190 0000 0000 	Select0	EQU	0x00	;low 8 address bits
00191 0000 0001 	Select1	EQU	0x01	;middle 8 address bits
00192 0000 0002 	Select2	EQU	0x02	;high 8 address bits
00193 0000 0003 	SelectSRAM	EQU	0x03	;Static Ram CS pin
00194 0000 0004 	SelectNIC	EQU	0x04	;NIC chip select
00195 0000 0005 	SelectRTC	EQU	0x05	;RTC chip select
00196 0000 0006 	Select6	EQU	0x06	;J2-31 Quad DAC
00197 0000 0007 	Select7	EQU	0x07	;J2-32 Latched Data In 2
00198 0000 0008 	SelectLDO0	EQU	0x08	;Latched Data Out 0
00199 0000 0009 	SelectLDO1	EQU	0x09	;Latched Data Out 1
00200 0000 000A 	SelectLDI0	EQU	0x0A	;Latched Data In 0
00201 0000 000B 	SelectLDI1	EQU	0x0B	;Latched Data In 1
00202 0000 000C 	Select12	EQU	0x0C	;J1-33
00203 0000 000D 	Select13	EQU	0x0D	;J1-34 Latched Data Out 2
CastleGate.asm   "BrainEQUs.inc"                                         Page: 7
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

00204 0000 000E 	Select14	EQU	0x0E	;Oxidider Pulse accumulator J1-35
00205 0000 000F 	Select15	EQU	0x0F	;Acid Pulse accumulator J1-36
00206 0000 0004 	SelectEnable	EQU	4	;active low enables 1 of 16 select lines
00207 0000 0005 	IORead	EQU	5
00208 0000 0006 	IOWrite	EQU	6
00209 0000 0007 	LCD_E	EQU	7
00210 0000 00F0 	AddressMask	EQU	0xF0
00211 0000 	;
00212 0000 	;PortC bits
00213 0000 0002 	CCP1	EQU	2
00214 0000 0001 	CCP2	EQU	1
00215 0000 0002 	RTS	EQU	2
00216 0000 0003 	SCL	EQU	3
00217 0000 0004 	SDA	EQU	4
00218 0000 0005 	CTS	EQU	5
00219 0000 	;
00220 0000 	;PortD bits
00221 0000 0004 	LCD_AS	EQU	4
00222 0000 0005 	LCD_RW	EQU	5
00223 0000 	;
00224 0000 	;=======================================================================================================
00225 0000 	;  Common Ram 70-7F same for all banks
00226 0000 	;      except for ISR_W_Temp these are used for paramiter passing and temp vars
00227 0000 	;=======================================================================================================
00228 0000 0070 	Param70	EQU	0x70
00229 0000 0071 	Param71	EQU	0x71
00230 0000 0072 	Param72	EQU	0x72
00231 0000 0073 	Param73	EQU	0x73
00232 0000 0074 	Param74	EQU	0x74
00233 0000 0075 	Param75	EQU	0x75
00234 0000 0076 	Param76	EQU	0x76	;PushParams76..7D 
00235 0000 0077 	Param77	EQU	0x77	;scratch pad byte
00236 0000 0078 	Param78	EQU	0x78	;return value & scratch pad byte
00237 0000 0079 	Param79	EQU	0x79	;return value & scratch pad byte
00238 0000 007A 	Param7A	EQU	0x7A	;return value & scratch pad byte
00239 0000 007B 	Param7B	EQU	0x7B
00240 0000 007C 	Param7C	EQU	0x7C
00241 0000 007D 	Param7D	EQU	0x7D
00242 0000 007E 	ISR_W_Temp	EQU	0x7E	;used by ISR
00243 0000 007F 	Param7F	EQU	0x7F	;String Ptr and W_Temp for Push/Pop
00244 0000 	;
00310 0000 	;
00311 0000 00FF 	BaudRate	EQU	Baud1200
00312 0000 	;
00313 0000 007F 	LDO_0_InitVal	EQU	0x7F
00314 0000 0000 	LDO_1_InitVal	EQU	0x00
00315 0000 0000 	LDO_2_InitVal	EQU	0x00
00316 0000 	;
00317 0000 002F 	TRISAValue	EQU	0x2F	;low 4 bits in System LED out
00318 0000 0000 	TRISBValue	EQU	0x00	;All Output
00319 0000 0007 	TRISEValue	EQU	0x07	;aka all in PSP off
00320 0000 	;
00321 0000 		if AnyANAUsed
00323 0000 		else
00324 0000 0087 	ADCON1_Value	EQU	All_Digital
00325 0000 		endif
00326 0000 	;
00327 0000 	;================================================================================================
00328 0000 	;  Bank0 Ram 020h-06Fh
00329 0000 	;
00330 0000 	;  Note: there are x bytes free
00331 0000 	;  The fisrt bytes in this bank must be maintained, however bytes after nicin.nic.stat
00332 0000 	;   may be reused as temp vars in modal routines which don't use NICStuff routines.
00333 0000 	;
00334 0000 	;================================================================================================
00335 0000 		ORG	0x20
00336 0020 	lastc	RES	1	;part of tickcount timmer
00337 0021 	tickcount	RES	1	;Timer tick count
00338 0022 	ledticks	RES	1	;LED tick count
00339 0023 	;
00340 0023 	ScrnNumber	RES	1
00341 0024 	Flags24	RES	1
00342 0025 	Flags25	RES	1
00343 0026 	Flags26	RES	1
00344 0027 	Flags27	RES	1
00345 0028 	Flags28	RES	1
00346 0029 	; additional flag bytes go here...
00347 0029 	CGI_BtnQueued	RES	1	; 1 Queued Btn from CGI
00348 002A 	;
00349 002A 	myeth0	RES	1	;My MAC Address 6 bytes  msb
00350 002B 	myeth1	RES	1
00351 002C 	myeth2	RES	1
00352 002D 	myeth3	RES	1
00353 002E 	myeth4	RES	1
00354 002F 	myeth5	RES	1	;  lsb
00355 0030 	myip_b3	RES	1	; 4 bytes  My IP adress  MSB
00356 0031 	myip_b2	RES	1
00357 0032 	myip_b1	RES	1
00358 0033 	myip_b0	RES	1	;LSB
00359 0034 	next_page	RES	1	; NIC page number
00360 0035 	curr_rx_page	RES	1	; Current NIC Rx page
00361 0036 	concount_b0	RES	1	;WORD Connection count (for high word of my seq num) 
00362 0037 	concount_b1	RES	1
00363 0038 	; NIC hardware packet header NICETHERHEADER
00364 0038 	nicin.nic.stat	RES	1	;Error status
00365 0039 	nicin.nic.next	RES	1	;Pointer to next block
00366 003A 	nicin.nic.len	RES	2	;Length of this frame incl. CRC 2 bytes
00367 003C 	; Ethernet frame header ETHERHEADER
00368 003C 	nicin.eth.dest	RES	6	;Destination MAC addresses (6 bytes) Should be mine
00369 0042 	nicin.eth.srce	RES	6	;Source MAC addresses (6 bytes) Where this datagram is from
CastleGate.asm   "BrainEQUs.inc"                                         Page: 8
/HPRR Electrical Dept/Castlegate/Firmware/

00370 0048 	nicin.eth.pcol	RES	2	;Protocol (PCOL_ARP or PCOL_IP) (2 bytes MSB first)
00371 004A 	tpxdlen	RES	2	;Length of external data in Tx frame (2 bytes)
00372 004C 	checkhi	RES	1	;The working checksum, may include d_checkhi
00373 004D 	checklo	RES	1
00374 004E 	d_checkhi	RES	1	;Checksum value for data 
00375 004F 	d_checklo	RES	1
00376 0050 	rxin	RES	2	;Length of data found in ethernet frame 46..1500 (NIC RAM is buffer)
00377 0052 	rxout	RES	2	;Offset into Rx buffer. Done reading when rxout=rxin.
00378 0054 	txin	RES	1	;Offset to txbuff. txbuff+txin=RAM address of next byte.
00379 0055 	ipcol	RES	1	;ipcol  IP protocol byte (PICMP, PTCP or PUDP)		
00380 0056 	remip_b3	RES	1	;remote IP address (4 bytes) MSB
00381 0057 	remip_b2	RES	1
00382 0058 	remip_b1	RES	1
00383 0059 	remip_b0	RES	1	;LSB
00384 005A 	locport_b0	RES	1	;locport WORD ..and TCP/UDP port numbers
00385 005B 	locport_b1	RES	1
00386 005C 	remport_b0	RES	1	;remport WORD
00387 005D 	remport_b1	RES	1 
00388 005E 	rseq_b3	RES	1	;rseq LWORD  TCP sequence & acknowledge values
00389 005F 	rseq_b2	RES	1
00390 0060 	rseq_b1	RES	1
00391 0061 	rseq_b0	RES	1
00392 0062 	rack_b3	RES	1	;rack LWORD
00393 0063 	rack_b2	RES	1
00394 0064 	rack_b1	RES	1
00395 0065 	rack_b0	RES	1
00396 0066 	rflags	RES	1	; Rx flags
00397 0067 	tflags	RES	1	; Tx flags
00398 0068 	rpdlen_b0	RES	1	;Length of data in Rx buffer 
00399 0069 	rpdlen_b1	RES	1
00400 006A 	iplen_b0	RES	1	;iplen 2 bytes low>high  Incoming/outgoing IP length word
00401 006B 	iplen_b1	RES	1
00402 006C 	;
00403 006C 	;
00404 006C 		if AnyANAUsed
00406 006C 		endif
00407 006C 	;
00408 006C 	PWAccessCode	RES	1	;is 0 or a password code from IPDatagramID
00409 006D 	;
00410 006D 	;******************************************************************
00411 006D 	;CAUTION: these (52 bytes) are volitile locations
00412 006D 	; DO NOT USE if NIC is active
00413 006D 	; Check to ensure not to overwrite data past iplen_b1
00414 006D 	;
00415 006D 		ORG	nicin.nic.stat
00416 0038 	PM_Addr_Lo	RES	1	;Prog mem dest address
00417 0039 	PM_Addr_Hi	RES	1
00418 003A 	PM_Data_Lo	RES	1	;Current data
00419 003B 	PM_Data_Hi	RES	1
00420 003C 	PM_StopAddrL	RES	1	;Last address + 1
00421 003D 	PM_StopAddrH	RES	1
00422 003E 	PM_CSumL	RES	1	;Checksum
00423 003F 	PM_CSumH	RES	1
00424 0040 	PM_FileNum	RES	1	;File number 0=b.b, 1=b1.b, etc.
00425 0041 	;
00426 0041 	;******************************************************************
00427 0041 	;
00428 0041 	;Flags24 bits
00429 0041 	;
00430 0041 	;Flags25 bits
00431 0041 0025 	#Define	DispDec2pl	Flags25,0
00432 0041 0025 	#Define	DispDec3pl	Flags25,1
00433 0041 0025 	#Define	BtnDebounce	Flags25,2	;set when any button is found
00434 0041 	;
00435 0041 0025 	#Define	PWGood	Flags25,3	;Set wen a password is good
00436 0041 0025 	#Define	ClrLine	Flags25,4
00437 0041 	;
00438 0041 0025 	#Define	DispLSpaces	Flags25,7	;Show leading spaces
00439 0041 	;
00440 0041 	;Flags26 bits
00441 0041 0026 	#Define	atend	Flags26,1
00442 0041 0026 	#Define	checkflag	Flags26,2
00443 0041 0004 	checkflagMask	EQU	0x04
00444 0041 0026 	CheckFlagFileReg	EQU	Flags26
00445 0041 0026 	#Define	SendToLCD	Flags26,4
00446 0041 0026 	#Define	SendRS232	Flags26,5
00447 0041 0026 	#Define	escaped	Flags26,6
00448 0041 	;
00449 0041 	;Flags27 bits
00450 0041 0027 	#Define	NumsToRam	Flags27,0
00451 0041 0027 	#Define	Disp_LZO	Flags27,1
00452 0041 0027 	#Define	DispDec1pl	Flags27,2
00453 0041 0027 	#Define	Disp_NLS	Flags27,3
00454 0041 0027 	#Define	NumsToNic	Flags27,4	;divert numbers from DisplaysW to putnic_checkbyte
00455 0041 	;
00456 0041 	;Flags28 bits
00457 0041 0028 	#Define	ServiceMode	Flags28,0	;allow eerom erase and stuff
00458 0041 	;
00459 0041 	;========================================================================================================
00460 0041 	;  Bank1 Ram A0h-DFh 80 bytes
00461 0041 	;   used as I/O buffer, keyboard buffer
00462 0041 	;========================================================================================================
00463 0041 		ORG	0xA0
00464 00A0 	txbuff	RES	0x40	;Tx buffer TXBUFFLEN 0A0..0DF
00465 00E0 	;
00466 00E0 	; temp arp record
00467 00E0 	;  This struct overlaps the end of txbuff, but since this data is used at the beginning an arp message
00468 00E0 	;  any message large enough to overwrite these arp structures would be done with this data early on.
00469 00E0 	;  The bytes (ar_op..ar_tpa) are an arp message the bytes (ae_state..ar_spa) are cache table fields
00470 00E0 	;  stored in the cache table. They are overlapped like this to save ram
CastleGate.asm   "BrainEQUs.inc"                                         Page: 9
/HPRR Electrical Dept/Castlegate/Firmware/

00471 00E0 		ORG	0xD0
00472 00D0 	ae_state	RES	1	; state of this AR cache entry
00473 00D1 0000 	AS_FREE	EQU	0	; this arp cache entry is free
00474 00D1 0001 	AS_PENDING	EQU	1	; entry is used but incomplete
00475 00D1 0002 	AS_RESOLVED	EQU	2	; entry has been resolved
00476 00D1 	;
00477 00D1 	ae_attempts	RES	1	; number of retries so far
00478 00D2 	ae_ttl	RES	1	; time to live
00479 00D3 000A 	ATTL_Max	EQU	d'10'	; re-ARP every ATTL_Max datagrams
00480 00D3 	;
00481 00D3 	; These next fields are hard coded to save ram
00482 00D3 	;  ar_hwtype	RES	2	; hardware type (HTYPE)
00483 00D3 	;  ar_prtype	RES	2	; protocol type (ARPPRO)
00484 00D3 	;  ar_hwlen	RES	1	; hardware address len (MACLEN)
00485 00D3 	;  ar_prlen	RES	1	; protocol address len (IPAddrLEN)
00486 00D3 	ar_op	RES	2	; operation (1 ARPREQ, 2 ARPRESP, 3 RARPREQ, or 4 RARPSESP)
00487 00D5 	ar_sha	RES	MACLEN	; sender's hardware address
00488 00DB 	ar_spa	RES	IPAddrLEN	; sender's protocol address
00489 00DF 	ar_tha	RES	MACLEN	; target's hardware address
00490 00E5 	ar_tpa	RES	IPAddrLEN	; target's protocol address
00491 00E9 	;
00492 00E9 	; The cache table used ARP_TSIZE * ARP_TELEN bytes at 
00493 00E9 0020 	ARP_TSIZE	EQU	d'32'	; cache table entries 
00494 00E9 0010 	ARP_TELEN	EQU	d'16'	; cache entry length
00495 00E9 00F0 	ARP_TELEN_mask	EQU	0xF0	; anded with SRAM address to get back to
00496 00E9 				;  the beginning of an entry
00497 00E9 	;
00498 00E9 	;========================================================================================================
00499 00E9 	;========================================================================================================
00500 00E9 	;  Bank2 Ram 110h-16Fh (96 bytes)
00501 00E9 	;  There are x Bytes free
00502 00E9 	;   everything in this bank except IPDatagramID is scratch pad space for various routines
00503 00E9 	;   and in most cases serves more than perpose
00504 00E9 	;========================================================================================================
00505 00E9 		ORG	0x110
00506 0110 	;Filename block structure (19 bytes)
00507 0110 	romdir.f.len	RES	2	;word Length of file in bytes
00508 0112 	romdir.f.start	RES	2	;word Start address of file data in ROM
00509 0114 	romdir.f.check	RES	2	;word TCP checksum of file
00510 0116 	romdir.f.flags	RES	1	;byte Embedded Gateway Interface (EGI) flags
00511 0117 	; Embedded Gateway Interface (EGI) flag values
00512 0117 0001 	EGI_ATVARS	EQU	0x01	;'@' variable substitution scheme
00513 0117 0116 	#DEFINE	EGI_ATVARS_bit	romdir.f.flags,0
00514 0117 0002 	EGI_HASHVARS	EQU	0x02	;'#' and '|' boolean variables
00515 0117 0116 	#DEFINE	EGI_HASHVARS_bit	romdir.f.flags,1
00516 0117 0116 	#DEFINE	End_Of_File	romdir.f.flags,7	;bit is set when last byte is read
00517 0117 	;
00518 0117 	romdir.f.name	RES	d'12'	;(ROM_FNAMELEN)12 bytes Lower-case filename with extension
00519 0123 	;
00520 0123 	;TTFTP data (36 bytes) (coexists with file block)
00521 0123 	eeROMbuff.len	RES	1	;bytes received
00522 0124 	eeROMbuff.Addr	RES	3	; 3 bytes (big endian)
00523 0127 	eeROMbuff.Data	RES	d'32'	; 32 bytes of data 114..133
00524 0147 	;
00525 0147 		ORG	0x137	;Rewind
00526 0137 	RAM137	RES	1
00527 0138 	RAM138	RES	1
00528 0139 	RAM139	RES	1
00529 013A 	RAM13A	RES	1
00530 013B 	RAM13B	RES	1
00531 013C 	RAM13C	RES	1	; used by Div16x16
00532 013D 	RAM13D	RES	1
00533 013E 	RAM13E	RES	1
00534 013F 	RAM13F	RES	1
00535 0140 	RAM140	RES	1
00536 0141 	RAM141	RES	1
00537 0142 	RAM142	RES	1
00538 0143 	RAM143	RES	1
00539 0144 	RAM144	RES	1
00540 0145 	RAM145	RES	1
00541 0146 	RAM146	RES	1
00542 0147 	;
00543 0147 		if HasRTC
00551 0147 		endif
00552 0147 	;
00553 0147 		if AnyANAUsed
00570 0147 		endif
00571 0147 	;
00572 0147 	eeROMFDataA0	RES	1	; Ptr to last byte saved
00573 0148 	eeROMFDataA1	RES	1	;  loops FFFF>>8000..FFFF>>8000
00574 0149 	eeROMFDataA2	RES	1
00575 014A 	;
00576 014A 	IPDatagramID	RES	1	;only used in put_ip
00577 014B 	;
00578 014B 	;========================================================================================================
00579 014B 	;  Bank3 Ram 190h-1EFh (96 Bytes) 
00580 014B 	;========================================================================================================
00581 014B 		ORG	0x190
00582 0190 	;
00583 0190 		if UsesISR
00591 0190 		endif
00592 0190 	;
00593 0190 	;
00594 0190 	SRAM_UDP_Tx_DT	RES	1	;Transmited data type
00595 0191 	SRAM_Len	RES	1	; 2 bytes Bigendian
00596 0192 	SRAM_Len_Lo	RES	1
00597 0193 	SRAM_DestAddr2	RES	1	; 3 bytes Bigendian
00598 0194 	SRAM_DestAddr1	RES	1
00599 0195 	SRAM_DestAddr0	RES	1
00600 0196 	SRAM_UDP_Rx_IP	RES	1	;Low byte of IP address
CastleGate.asm   "BrainEQUs.inc"                                         Page: 10
/HPRR Electrical Dept/Castlegate/Firmware/

00601 0197 	SRAM_UDP_Rx_DT	RES	1	;Received data type
00602 0198 	SRAM_Len_Rx	RES	1	; 2 bytes Bigendian
00603 0199 	SRAM_Len_Lo_Rx	RES	1
00604 019A 	SRAM_DestAddr1_Rx	RES	1	; 2 bytes Bigendian
00605 019B 	SRAM_DestAddr0_Rx	RES	1
00606 019C 	TTFTP_Flags	RES	1
00607 019D 019C 	#Define	UDP_DataReceived	TTFTP_Flags,0
00608 019D 019C 	#Define	UDP_DataSent	TTFTP_Flags,1
00609 019D 	;
00610 019D 	;SRAM addresses are 000000..07FFFF (512KB)
00611 019D 	SRAM_Addr0	RES	1	;low byte of SRAM sddress
00612 019E 	SRAM_Addr1	RES	1
00613 019F 	SRAM_Addr2	RES	1	;high byte of SRAM sddress
00614 01A0 	;
00615 01A0 	;The Current address
00616 01A0 	CurrentAddr0	RES	1	;low byte of address
00617 01A1 	CurrentAddr1	RES	1
00618 01A2 	CurrentAddr2	RES	1	;high byte of address
00619 01A3 	;The last data written
00620 01A3 	CurrentLDO_0	RES	1	; last data sent
00621 01A4 	CurrentLDO_1	RES	1
00622 01A5 	;
00623 01A5 	;The last data read
00624 01A5 		if UsesLDI0
00625 01A5 	CurrentLDI_0	RES	1	; last data read
00626 01A6 	;LDI_0 bits
00627 01A6 0000 	SW2	EQU	0	;SW2 is lower left under LCD
00628 01A6 0001 	SW3	EQU	1
00629 01A6 0002 	SW4	EQU	2
00630 01A6 0003 	SW5	EQU	3
00631 01A6 0004 	SW6	EQU	4	;SW6 is upper left
00632 01A6 0005 	SW7	EQU	5
00633 01A6 0006 	LDI_0_6	EQU	6	;J2-28 not used
00634 01A6 0007 	LDI_0_7	EQU	7	;J2-29 not used
00635 01A6 		endif
00636 01A6 	;
00637 01A6 		if UsesLDI1
00648 01A6 		endif
00649 01A6 	;
00650 01A6 	;
00651 01A6 	CMD_LDO_0	RES	1	; value to set next time
00652 01A7 	;LDO_0 bits
00653 01A7 0000 	NIC_Reset	EQU	0
00654 01A7 0001 	LED1	EQU	1	;D6 LEDs are active low
00655 01A7 0002 	LED2	EQU	2
00656 01A7 0003 	LED3	EQU	3
00657 01A7 0004 	LED4	EQU	4
00658 01A7 0005 	LED5	EQU	5
00659 01A7 0006 	LED6	EQU	6	;D11
00660 01A7 0040 	LED6_Mask	EQU	b'01000000'
00661 01A7 0010 	LED4_Mask	EQU	b'00010000'
00662 01A7 	;
00663 01A7 	CMD_LDO_1	RES	1	;  through the loop
00664 01A8 	;LDO_1 bits
00665 01A8 	;
00666 01A8 	;
00667 01A8 		if ISR_Timers>0
00682 01A8 		else
00683 01A8 0002 	BtnDebounceTime	EQU	d'2'	;2/20th sec
00684 01A8 000A 	CGIBtnDebounceTime	EQU	d'10'	;1/2th sec
00685 01A8 	BtnDeBounceTimer	RES	1
00686 01A9 		endif
00687 01A9 		if ISR_Timers>1
00691 01A9 		endif
00692 01A9 		if ISR_Timers>2
00695 01A9 		endif
00696 01A9 		if ISR_Timers>3
00699 01A9 		endif
00700 01A9 		if ISR_Timers>4
00703 01A9 		endif
00704 01A9 		if ISR_Timers>5
00707 01A9 		endif
00708 01A9 	;
00709 01A9 	UDPTimer	RES	1
00710 01AA 0010 	kUDPTime	EQU	10	;half secs
00711 01AA 	;
00712 01AA 	BeepTimer	RES	1
00713 01AB 0020 	kBeepTime	EQU	0x20	;Ticks 1/20's
00714 01AB 	;
00715 01AB 	;
00716 01AB 	OSlot	RES	1	;SLOT #0..3 
00717 01AC 	OBit	RES	1	;BIT #0..127 
00718 01AD 	OActive	RES	1	;0x80=ON 0x00=OFF 
00719 01AE 	OBoard	RES	1	;BOARD #0..7
00720 01AF 	;
00721 01AF 	ISlot	RES	1	;SLOT #0..3 
00722 01B0 	IBit	RES	1	;BIT #0..127 
00723 01B1 	IActive	RES	1	;0x80=ON 0x00=OFF 
00724 01B2 	IBoard	RES	1	;BOARD #0..7
00725 01B3 	;
00726 01B3 	;scratch pad vars
00727 01B3 	;DETTemp	RES	2
00728 01B3 	CurBlk	RES	2	;ptr to SRAM location with Bit,Slot and Board
00729 01B5 	SMDispPtr	RES	2
00730 01B7 	SMSvsPtr	RES	1
00731 01B8 	CurSM	RES	2
00732 01BA 	SvsBlkNum	RES	1
00733 01BB 	SvsCabNum	RES	1
00734 01BC 	BlockPwrTblPtr	RES	2
00735 01BE 	LampTblPtr	RES	2
CastleGate.asm   "BrainEQUs.inc"                                         Page: 11
/HPRR Electrical Dept/Castlegate/Firmware/

00736 01C0 	BPTemp	RES	2
00737 01C2 01C0 	#Define	AnyCabOnFlag	BPTemp,7
00738 01C2 01C0 	#Define	Cab1IsPwrdFlag	BPTemp,4
00739 01C2 01C0 	#Define	Cab2IsPwrdFlag	BPTemp,3
00740 01C2 01C0 	#Define	Cab3IsPwrdFlag	BPTemp,2
00741 01C2 01C0 	#Define	Cab4IsPwrdFlag	BPTemp,1
00742 01C2 01C0 	#Define	Cab5IsPwrdFlag	BPTemp,0
00743 01C2 01C1 	#Define	Cab6IsPwrdFlag	BPTemp+1,3
00744 01C2 01C1 	#Define	Cab7IsPwrdFlag	BPTemp+1,2
00745 01C2 01C1 	#Define	Cab8IsPwrdFlag	BPTemp+1,1
00746 01C2 01C1 	#Define	Cab9IsPwrdFlag	BPTemp+1,0
00747 01C2 	;
00748 01C2 	BPTemp2	RES	2
00749 01C4 	BlockNum	RES	1
00750 01C5 	ScannerBlkNum	RES	1
00751 01C6 	DisplayBlkNum	RES	1
00752 01C7 	SegmentPtr	RES	2	;two byte ptr start of data
00753 01C9 				; for 7 segment display
00754 01C9 	LastCabVal	RES	1	;Current Cab if any 0..9
00755 01CA 	;
00756 01CA 0000 	CabEastFB	EQU	0
00757 01CA 0001 	CabWestFB	EQU	1
00758 01CA 0006 	CabDetEastFB	EQU	6
00759 01CA 0005 	CabDetWestFB	EQU	5
00760 01CA 0007 	CabSelectedFB	EQU	7
00761 01CA 	;
00762 01CA 	Cab1ModeFlags	RES	1
00763 01CB 01CA 	#define	C1East	Cab1ModeFlags,CabEastFB
00764 01CB 01CA 	#define	C1West	Cab1ModeFlags,CabWestFB
00765 01CB 01CA 	#Define	Cab1DetEast	Cab1ModeFlags,CabDetEastFB
00766 01CB 01CA 	#Define	Cab1DetWest	Cab1ModeFlags,CabDetWestFB
00767 01CB 01CA 	#define	C1Selected	Cab1ModeFlags,CabSelectedFB
00768 01CB 	Cab2ModeFlags	RES	1
00769 01CC 01CB 	#define	C2East	Cab2ModeFlags,CabEastFB
00770 01CC 01CB 	#define	C2West	Cab2ModeFlags,CabWestFB
00771 01CC 01CB 	#Define	Cab2DetEast	Cab2ModeFlags,CabDetEastFB
00772 01CC 01CB 	#Define	Cab2DetWest	Cab2ModeFlags,CabDetWestFB
00773 01CC 01CB 	#define	C2Selected	Cab2ModeFlags,CabSelectedFB
00774 01CC 	Cab3ModeFlags	RES	1
00775 01CD 01CC 	#define	C3East	Cab3ModeFlags,CabEastFB
00776 01CD 01CC 	#define	C3West	Cab3ModeFlags,CabWestFB
00777 01CD 01CC 	#Define	Cab3DetEast	Cab3ModeFlags,CabDetEastFB
00778 01CD 01CC 	#Define	Cab3DetWest	Cab3ModeFlags,CabDetWestFB
00779 01CD 01CC 	#define	C3Selected	Cab3ModeFlags,CabSelectedFB
00780 01CD 	Cab4ModeFlags	RES	1
00781 01CE 01CD 	#define	C4East	Cab4ModeFlags,CabEastFB
00782 01CE 01CD 	#define	C4West	Cab4ModeFlags,CabWestFB
00783 01CE 01CD 	#Define	Cab4DetEast	Cab4ModeFlags,CabDetEastFB
00784 01CE 01CD 	#Define	Cab4DetWest	Cab4ModeFlags,CabDetWestFB
00785 01CE 01CD 	#define	C4Selected	Cab4ModeFlags,CabSelectedFB
00786 01CE 	Cab5ModeFlags	RES	1
00787 01CF 01CE 	#define	C5East	Cab5ModeFlags,CabEastFB
00788 01CF 01CE 	#define	C5West	Cab5ModeFlags,CabWestFB
00789 01CF 01CE 	#Define	Cab5DetEast	Cab5ModeFlags,CabDetEastFB
00790 01CF 01CE 	#Define	Cab5DetWest	Cab5ModeFlags,CabDetWestFB
00791 01CF 01CE 	#define	C5Selected	Cab5ModeFlags,CabSelectedFB
00792 01CF 	Cab6ModeFlags	RES	1
00793 01D0 01CF 	#define	C6East	Cab6ModeFlags,CabEastFB
00794 01D0 01CF 	#define	C6West	Cab6ModeFlags,CabWestFB
00795 01D0 01CF 	#Define	Cab6DetEast	Cab6ModeFlags,CabDetEastFB
00796 01D0 01CF 	#Define	Cab6DetWest	Cab6ModeFlags,CabDetWestFB
00797 01D0 01CF 	#define	C6Selected	Cab6ModeFlags,CabSelectedFB
00798 01D0 	;
00799 01D0 	;  Input Board  0x0000..0x007F
00800 01D0 	;  Output Board 0x0400..0x047F
00801 01D0 0004 	kFirstOB	EQU	0x04
00802 01D0 0004 	kLastOB	EQU	0x04
00803 01D0 0006 	kDefaultCab	EQU	0x06
00804 01D0 0006 	kLastCab	EQU	0x06	;Cab Count
00805 01D0 01CF 	kDefaultCMF	EQU	Cab6ModeFlags
00806 01D0 	;
00807 01D0 	;
00808 01D0 	LastBtn	RES	1
00809 01D1 	DispBlockNum	RES	1
00810 01D2 	;
00811 01D2 	DispFlags	RES	1
00812 01D3 01D2 	#Define	WDLED_Flag	DispFlags,0
00813 01D3 0001 	WDLED_Mask	EQU	b'00000001'
00814 01D3 01D2 	#Define	TestModeFlag	DispFlags,1
00815 01D3 0002 	TestModeMask	EQU	b'00000010'
00816 01D3 01D2 	#Define	CabBtnDB_Flag	DispFlags,2
00817 01D3 01D2 	#Define	TestCycleBit	DispFlags,3
00818 01D3 	;
00819 01D3 	;
00820 01D3 	BPK_Flags	RES	1
00821 01D4 01D3 	#Define	BeepOn	BPK_Flags,2
00822 01D4 	;
00823 01D4 	;
00824 01D4 	;
00825 01D4 	SvsInSlotBoard	RES	1
00826 01D5 	SMHighSvsPtr	RES	1
00827 01D6 	SvsCurBlk	RES	2
00828 01D8 	SvsBMdlNum	RES	1	;Block modle # 0..95
00829 01D9 	SvsBMdlVal	RES	1	;LED to light 0..24 
00830 01DA 	;
00831 01DA 	SMScanFlags	RES	1
00832 01DB 01DA 	#Define	SMLowNumRecvd	SMScanFlags,0
00833 01DB 01DA 	#Define	SMHiNumRecvd	SMScanFlags,1
00834 01DB 01DA 	#Define	BlkNumRecvd	SMScanFlags,2
00835 01DB 01DA 	#Define	SMTableLowChngFlag	SMScanFlags,3
CastleGate.asm   "BrainEQUs.inc"                                         Page: 12
/HPRR Electrical Dept/Castlegate/Firmware/

00836 01DB 01DA 	#Define	SMTableHiChngFlag	SMScanFlags,4
00837 01DB 01DA 	#Define	BlockCmdChngFlag	SMScanFlags,5
00838 01DB 01DA 	#Define	BlockCmdChngFlag2	SMScanFlags,6
00839 01DB 01DA 	#Define	IsMyCabFlag	SMScanFlags,7
00840 01DB 	;
00841 01DB 	SMScanFlags2	RES	1
00842 01DC 01DB 	#Define	BlockDataChngFlag	SMScanFlags2,0
00843 01DC 01DB 	#Define	BlockDataChngFlag2	SMScanFlags2,1
00844 01DC 	;
00845 01DC 	BlockModuleNum	RES	1	;0..31
00846 01DD 	BlkModAddr0	RES	1
00847 01DE 	BlkModAddr1	RES	1
00848 01DF 	BlkModBits0	RES	1
00849 01E0 	BlkModBits1	RES	1
00850 01E1 	BlkModBoard	RES	1
00851 01E2 	;
00852 01E2 	SyncBlkNum	RES	1	;A blk num that is SyncBlkNum++
00853 01E3 				; each time through the main loop
00854 01E3 	SyncSMNum	RES	1	;A sm num that is SyncSMNum++
00855 01E4 				; each time through the main loop
00856 01E4 	;ScannerRetry	RES	1	;retry counts
00857 01E4 	;
00858 01E4 	;=======================================================================================================
00859 01E4 	;========================================================================================================
00860 01E4 	; Constants for HPRR stuff
00861 01E4 	;
00862 01E4 0078 	NOSlot	EQU	0x78	;BITS TO DEACTIVATE ALL DEV'S 
00863 01E4 	;
00864 01E4 	;Block Power Table Bits
00865 01E4 0060 	DetectMask	EQU	0x60	;Detect bits E/W
00866 01E4 009F 	DetectInvertMask	EQU	0x9F	;Not Detect bits E/W
00867 01E4 0000 	DetectFlashFlag	EQU	0x00	;set to 0x80 to flash
00868 01E4 	;
00869 01E4 	;
00870 01E4 	;========================================================================================================
00871 01E4 	;========================================================================================================
00872 01E4 	; Storage locations "Page Numbers" in the serial eproms (000..3FF) (256KB)
00873 01E4 	;
00874 01E4 0000 	seFiles	EQU	0x0000	;Start of file storage
00875 01E4 007F 	seParamSets	EQU	0x007F	;8 sets 256 bytes 0x007F00 to 0x007FFF
00876 01E4 0080 	seFlowData	EQU	0x0080	;32KB 0x008000 to 0x00FFFF
00877 01E4 	; serial eproms 3..8 are not installed.
00878 01E4 	;
00879 01E4 	;========================================================================================================
00880 01E4 	;========================================================================================================
00881 01E4 	; SRAM locations "Page Numbers" they are 0000..07FF (512KB) (256 bytes/page)
00882 01E4 	;
00883 01E4 0002 	SMTable	EQU	0x0002	;one byte for each SM
00884 01E4 0003 	SMTableHigh	EQU	0x0003
00885 01E4 0004 	BlockPwrTable	EQU	0x0004	;one byte for each Block
00886 01E4 0005 	BlockCmdTable	EQU	0x0005	;one byte for each Block
00887 01E4 0006 	BlockPwrTable2	EQU	0x0006	;one byte for each Block
00888 01E4 0007 	BlockCmdTable2	EQU	0x0007	;one byte for each Block
00889 01E4 0008 	InputsTable	EQU	0x0008	;one byte for each input
00890 01E4 0009 	BlockOwnerTable	EQU	0x0009	;one byte for each Block
00891 01E4 	;
00892 01E4 000A 	BlockModuleBitsL	EQU	0x000A	;One Byte for each block
00893 01E4 000B 	BlockModuleBitsH	EQU	0x000B	; storage for LED bits
00894 01E4 	;
00895 01E4 0010 	evDataROM	EQU	0x0010	;start of data
00896 01E4 	;
00897 01E4 00F0 	evParamStack	EQU	0x00F0	;256 bytes = 32 deep stack
00898 01E4 00F2 	evStrings	EQU	0x00F2	;start of strings
00899 01E4 00F8 	evARPcache	EQU	0x00F8	;ARP cache 0x00F800..0x00F9FF (512 bytes)
00900 01E4 017F 	evStatSaveBuffer	EQU	0x017F	;Buffer for status saving
00901 01E4 0180 	evBuff32KB	EQU	0x0180	;32KB Buffer for data tx, rx, etc.
00902 01E4 	;
00903 01E4 0002 	kUDP_SRAM_Page	EQU	0x02
00904 01E4 0200 	evUDPDest	EQU	0x0200	;64KB
00905 01E4 0202 	evUDP_SMTable	EQU	0x0202	;from MPSMBP
00906 01E4 0203 	evUDP_SMTableHigh	EQU	0x0203	;from MPSMBP
00907 01E4 0204 	evUDP_BlockPwrTable	EQU	0x0204	;from MPSMBP
00908 01E4 0205 	evUDP_BlockPwrCmdTbl	EQU	0x0205
00909 01E4 0206 	evUDP_BlockPwrTable2	EQU	0x0206
00910 01E4 0207 	evUDP_BlockPwrCmdTbl2	EQU	0x0207
00911 01E4 	;
00912 01E4 0206 	evEndOfSRAM	EQU	0x0206	;shortens boot time
00913 01E4 	;
00914 01E4 	;========================================================================================================
00915 01E4 	;========================================================================================================
00916 01E4 	; EEPROM locations 256 bytes of EEPROM in F877
00917 01E4 		ORG	0x0000
00918 0000 	;
00919 0000 	eMACAddr4	RES	1	; 5th byte of MAC Address
00920 0001 	eMACAddr5	RES	1
00921 0002 	eIPAddr3	RES	1	; MSB of IP Address
00922 0003 	eIPAddr2	RES	1
00923 0004 	eIPAddr1	RES	1
00924 0005 	eIPAddr0	RES	1
00925 0006 	eCSum	RES	1	; csum for first 6 bytes
00926 0007 	eROMFDA0	RES	1	; LSB of eeROM Flow Data address
00927 0008 	eROMFDA1	RES	1
00928 0009 	eROMFDA2	RES	1
00929 000A 	eSN0	RES	1	; LSB of Vis-U-Etch serial number
00930 000B 	eSN1	RES	1
00931 000C 	;
00932 000C 	eScrnNumber	RES	1	;0..kLastNormScrn
00933 000D 	eSvsScrnNumber	RES	1	;0..kLastSvsScrn
00934 000E 	eParamSetNumber	RES	1	;0..7
00935 000F 	ePM_Flags	RES	1
CastleGate.asm   "BrainEQUs.inc"                                         Page: 13
/HPRR Electrical Dept/Castlegate/Firmware/

00936 0010 	;
00937 0010 00D8 	eSRAMErrStr	EQU	0xD8	;'SRAM Err'
00938 0010 00E0 	eSplashText	EQU	0xE0	;See SerialNo.asm for data
00939 0010 00F0 	eSplashText2	EQU	0xF0	; 0x10 bytes each
00940 0010 	;
00941 0010 	;========================================================================================================
00942 0010 	; Initialize EEPROM memory
00943 0010 		ORG	0x2100	;eeprom
00944 2100 0000 		DE	high kMAClsw	; 2 lower bytes of MAC address
00945 2101 0023 		DE	low kMAClsw
00946 2102 00C0 00A8 0002 		DE	kIPmsb,kIPb2,kIPb3	;IP address (i.e. 192.168.1.)
00947 2105 008F 		DE	kIPlsb	;IP address (i.e. 124)
00948 2106 00FD 		DE	kCSum	;checksum
00949 2107 	;
00950 2107 00FF 007F 		DE	0xFF,0x7F	;placeholder for flow data pointer
00951 2109 0000 		DE	0x00
00952 210A 002D 		DE	low kSerialNumber	;S/N lsb,msb
00953 210B 001F 		DE	high kSerialNumber
00954 210C 	;
00955 210C 0000 		DE	0x00	;ScrnNumber
00956 210D 0000 		DE	0x00	;SvsScrnNumber
00957 210E 0000 		DE	0x00	;eParamSetNumber 0..7
00958 210F 0000 		DE	0x00	;ePM_Flags
00959 2110 	;
00960 2110 		ORG	0x21D8
00961 21D8 0053 0052 0041 004D 0045 0072 0072 		DE	'S','R','A','M','E','r','r'
00962 21DF 0000 		DE	0x00
00963 21E0 	;
00964 21E0 	; Initialize ID locations
00965 21E0 		ORG	0x2000
00966 2000 0031 0030 0044 0031 		DE	'1','0','D','1'
00967 2004 	;
00968 2004 		ORG	0x21E0	;eeprom last 32 bytes
00969 21E0 	;Splash screen text (must be 15 chars)
00970 21E0 0020 004F 0078 0066 006F 0072 0064 0020 		DE	' ','O','x','f','o','r','d',' '
00971 21E8 0056 002E 0055 002E 0045 002E 0020 		DE	'V','.','U','.','E','.',' '
00972 21EF 0000 		DE	0x00
00973 21F0 0020 0020 0047 0050 0020 0043 0050 		DE	' ',' ','G','P',' ','C','P'
00974 21F7 0055 0020 0042 0049 004F 0053 0020 0020 		DE	'U',' ','B','I','O','S',' ',' '
00975 21FF 0000 		DE	0x00
00976 2200 	;
00977 2200 	;============================================================================================
00978 2200 	;
00979 2200 		include	BMacros.asm	;common macros for the brain GP computer
00001 2200 		subtitle	"Brain Macros"

00002 2200 		page
00003 2200 	;===================================================================================
00004 2200 	;
00005 2200 	;  FileName: BMacros.asm
00006 2200 	;  Date: 4/5/2008
00007 2200 	;  File Version: 1.3.1
00008 2200 	;  
00009 2200 	;  Author: David M. Flynn
00010 2200 	;  Company: Oxford V.U.E., Inc.
00011 2200 	;
00012 2200 	;============================================================================================
00013 2200 	; Notes:
00014 2200 	;
00015 2200 	;  These are generic macros for the Brain computer
00016 2200 	;
00017 2200 	;============================================================================================
00018 2200 	; Revision History
00019 2200 	;
00020 2200 	; 1.3.1  4/5/2008	Added UsesVUE8LEDs
00021 2200 	; 1.3    4/28/04	Added mBankISel
00022 2200 	; 1.2.4  5/19/03	Added BNE, BEQ
00023 2200 	; 1.2.3  5/16/03	Added CMP, BMI and BPL.
00024 2200 	; 1.2.2  4/23/03	Changed LCALL to be just CALL when same segment.
00025 2200 	; 1.2.1  4/15/03	Added SKPB, SKPNB
00026 2200 	; 1.2    2/26/03	Added Instruction set extentions for 14 bit core (16F###) (27 of them)
00027 2200 	; 1.1    2/21/03	Added mLED_On, mLED_Off, mPCLGoto
00028 2200 	;	Added 18F452 version of mCall#To#
00029 2200 	; 1.0.1  2/12/03	Fixed mCallxTox so a return from a segment other than the one
00030 2200 	;	called will not cause PCLATH,3/PCLATH,4 problems.
00031 2200 	; 1.0    10/1/02	Moved macros to this file
00032 2200 	;
00033 2200 	;============================================================================================
00034 2200 	; Conditionals
00035 2200 		Constant	Using18F452=0	;Set to 0 for 16F877
00036 2200 		ifndef UsesVUE8LEDs
00038 2200 		endif
00039 2200 	;
00040 2200 	;============================================================================================
00041 2200 	; Name	(additional stack words required), (Return Bank) Description
00042 2200 	;============================================================================================
00043 2200 	;TestTimerIsZero	(0),(0) pass Timer1Lo,Timer2Lo, etc. returns STATUS,Z set if zero
00044 2200 	;
00045 2200 	;mLED_On	(0) Macro. Macro for turning LEDs ON. exits w/ bank0 Selected
00046 2200 	;mLED_Off	(0) Macro. Macro for turning LEDs OFF. exits w/ bank0 Selected
00047 2200 	;mLED1_ON	(0),(0) LED macro
00048 2200 	;mLED1_OFF	(0),(0) LED macro
00049 2200 	;mLED2_ON	(0),(0) LED macro
00050 2200 	;mLED2_OFF	(0),(0) LED macro
00051 2200 	;mLED3_ON	(0),(0) LED macro
00052 2200 	;mLED3_OFF	(0),(0) LED macro
00053 2200 	;mLED4_ON	(0),(0) LED macro
00054 2200 	;mLED4_OFF	(0),(0) LED macro
00055 2200 	;mLED5_ON	(0),(0) LED macro
00056 2200 	;mLED5_OFF	(0),(0) LED macro
CastleGate.asm   "Brain Macros"                                          Page: 14
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

00057 2200 	;mLED6_ON	(0),(0) LED macro
00058 2200 	;mLED6_OFF	(0),(0) LED macro
00059 2200 	;
00060 2200 	;mBank0	(0),(0) Macro to set STATUS,RP0 and RP1 bits for ram access to bank0
00061 2200 	;mBank1	(0),(1) Macro to set STATUS,RP0 and RP1 bits for ram access to bank1
00062 2200 	;mBank2	(0),(2) Macro to set STATUS,RP0 and RP1 bits for ram access to bank2
00063 2200 	;mBank3	(0),(3) Macro to set STATUS,RP0 and RP1 bits for ram access to bank3
00064 2200 	;
00065 2200 	;mCall0To1	(1+n),(n/a) used to set/clr PCLATH bits
00066 2200 	;mCall0To2	(1+n),(n/a) used to set/clr PCLATH bits
00067 2200 	;mCall0To3	(1+n),(n/a) used to set/clr PCLATH bits
00068 2200 	;
00069 2200 	;mCall1To0	(1+n),(n/a) used to set/clr PCLATH bits
00070 2200 	;mCall1To2	(1+n),(n/a) used to set/clr PCLATH bits
00071 2200 	;mCall1To3	(1+n),(n/a) used to set/clr PCLATH bits
00072 2200 	;
00073 2200 	;mCall2To0	(1+n),(n/a) used to set/clr PCLATH bits
00074 2200 	;mCall2To1	(1+n),(n/a) used to set/clr PCLATH bits
00075 2200 	;mCall2To3	(1+n),(n/a) used to set/clr PCLATH bits
00076 2200 	;
00077 2200 	;mCall3To0	(1+n),(n/a) used to set/clr PCLATH bits
00078 2200 	;mCall3To1	(1+n),(n/a) used to set/clr PCLATH bits
00079 2200 	;mCall3To2	(1+n),(n/a) used to set/clr PCLATH bits
00080 2200 	;
00081 2200 	;mReadData	(0),(0) Read Data macro, arg1 is the select value (Select0,SelectSRAM, etc.)
00082 2200 	;mWriteData	(0),(0) Write Data macro, Data is the location of the Data (Param71, etc.)
00083 2200 	;mSet8bitAddr	(0),(0) Set the low 8 address bits to the value in the W
00084 2200 	;mPCLGoto	(0),(n/a) Set PCLATH:0..2 then add W to PCL
00085 2200 	;mBankISel	(0),(n/a) Set Status,IRP bit corect for the operand passed.
00086 2200 	;
00087 2200 	;===================================================================
00088 2200 	; Instruction set extentions for 14 bit core (16F###)
00089 2200 	;
00090 2200 	; opcode	operand	description
00091 2200 	;---------------------------------------------------------------
00092 2200 	;ADDCF	f,d	Add Carry to File
00093 2200 	;ADDDCF	f,d	Add Digit Carry to File
00094 2200 	;BC	k	Branch on Carry
00095 2200 	;BDC	k	Branch on Digit Carry
00096 2200 	;BEQ	k	Branch on Equal to Zero aka BZ
00097 2200 	;BMI	k	Branch on W minus (bit 7 set) (W bits 0..6 are zerroed)
00098 2200 	;BNC	k	Branch on No Carry
00099 2200 	;BNDC	k	Branch on No Digit Carry
00100 2200 	;BNE	k	Branch on Not Equal to Zero aka BNZ
00101 2200 	;BNZ	k	Branch on No Zero
00102 2200 	;BPL	k	Branch on W plus (bit 7 clr) (W bits 0..6 are zerroed)
00103 2200 	;BZ	k	Branch on Zero
00104 2200 	;CLRC		Clear Carry
00105 2200 	;CLRDC		Clear Digit Carry
00106 2200 	;CLRZ		Clear Zero flag
00107 2200 	;CMP	f	Compare F to W (F-W)
00108 2200 	;LCALL	k	Long Call
00109 2200 	;LGOTO	k	Long GOTO
00110 2200 	;MOVFW	f	Move File to W
00111 2200 	;NEGF	f,d	Negate File
00112 2200 	;SETC		Set Carry
00113 2200 	;SETDC		Set Digit Carry
00114 2200 	;SETZ		Set Zero
00115 2200 	;SKPB		Skip on Borrow
00116 2200 	;SKPC		Skip on Carry
00117 2200 	;SKPDC		Skip on Digit Carry
00118 2200 	;SKPNB		Skip on Not Borrow
00119 2200 	;SKPNC		Skip on No Carry
00120 2200 	;SKPNDC		Skip on No Digit Carry
00121 2200 	;SKPNZ		Skip on Not Zero
00122 2200 	;SKPZ		Skip on Zero
00123 2200 	;SUBBF	f,d	Subtract Borrow from File (used after SUBWF)
00124 2200 	;SUBCF	f,d	Subtract Carry from File
00125 2200 	;SUBDCF	f,d	Subtract Digit Carry from File
00126 2200 	;TSTF	f	Test File
00127 2200 	;
00128 2200 	;======================================================================================
00129 2200 	; pass Timer1Lo,Timer2Lo, etc.
00130 2200 	; returns STATUS,Z set if zero
00131 2200 	;
00132 2200      	TestTimerIsZero	macro	T_Number
00133 2200      		BSF	STATUS,RP0	;Bank3
00134 2200      		BSF	STATUS,RP1
00135 2200      		MOVF	T_Number,W
00136 2200      		IORWF	T_Number+1,W
00137 2200      		BCF	STATUS,RP0	;Bank0
00138 2200      		BCF	STATUS,RP1
00132 2200 		endm	
00140 2200 	;
00141 2200 	;=================================================================================
00142 2200 	; LED macros
00143 2200 	;=================================================================================
00144 2200 	; Macro for turning LEDs ON
00145 2200      	mLED_On	macro	LED_Num
00146 2200      		BSF	STATUS,RP1
00147 2200      		BSF	STATUS,RP0	; Bank3
00148 2200      		BCF	CMD_LDO_0,LED_Num
00149 2200      		BCF	STATUS,RP1
00150 2200      		BCF	STATUS,RP0	; Bank0
00145 2200 		endm
00152 2200 	;
00153 2200 	;=================================================================================
00154 2200 	; Macro for turning LEDs OFF
00155 2200      	mLED_Off	macro	LED_Num
00156 2200      		BSF	STATUS,RP1
CastleGate.asm   "Brain Macros"                                          Page: 15
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

00157 2200      		BSF	STATUS,RP0	; Bank3
00158 2200      		BSF	CMD_LDO_0,LED_Num
00159 2200      		BCF	STATUS,RP1
00160 2200      		BCF	STATUS,RP0	; Bank0
00155 2200 		endm
00162 2200 	;
00163 2200 	;
00164 2200      	mLED1_ON	macro
00165 2200      		BSF	STATUS,RP1
00166 2200      		BSF	STATUS,RP0
00167 2200      		BCF	CMD_LDO_0,LED1
00168 2200      		if UsesVUE8LEDs
00169 2200      		BCF	CMD_LDO_2,LED1A
00170 2200      		endif
00171 2200      		BCF	STATUS,RP1
00172 2200      		BCF	STATUS,RP0
00164 2200 		endm
00174 2200 	;
00175 2200      	mLED1_OFF	macro
00176 2200      		BSF	STATUS,RP1
00177 2200      		BSF	STATUS,RP0
00178 2200      		BSF	CMD_LDO_0,LED1
00179 2200      		if UsesVUE8LEDs
00180 2200      		BSF	CMD_LDO_2,LED1A
00181 2200      		endif
00182 2200      		BCF	STATUS,RP1
00183 2200      		BCF	STATUS,RP0
00175 2200 		endm
00185 2200 	;
00186 2200      	mLED2_ON	macro
00187 2200      		BSF	STATUS,RP1
00188 2200      		BSF	STATUS,RP0
00189 2200      		BCF	CMD_LDO_0,LED2
00190 2200      		if UsesVUE8LEDs
00191 2200      		BCF	CMD_LDO_2,LED2A
00192 2200      		endif
00193 2200      		BCF	STATUS,RP1
00194 2200      		BCF	STATUS,RP0
00186 2200 		endm
00196 2200 	;
00197 2200      	mLED2_OFF	macro
00198 2200      		BSF	STATUS,RP1
00199 2200      		BSF	STATUS,RP0
00200 2200      		BSF	CMD_LDO_0,LED2
00201 2200      		if UsesVUE8LEDs
00202 2200      		BSF	CMD_LDO_2,LED2A
00203 2200      		endif
00204 2200      		BCF	STATUS,RP1
00205 2200      		BCF	STATUS,RP0
00197 2200 		endm
00207 2200 	;
00208 2200      	mLED3_ON	macro
00209 2200      		BSF	STATUS,RP1
00210 2200      		BSF	STATUS,RP0
00211 2200      		BCF	CMD_LDO_0,LED3
00212 2200      		if UsesVUE8LEDs
00213 2200      		BCF	CMD_LDO_2,LED3A
00214 2200      		endif
00215 2200      		BCF	STATUS,RP1
00216 2200      		BCF	STATUS,RP0
00208 2200 		endm
00218 2200 	;
00219 2200      	mLED3_OFF	macro
00220 2200      		BSF	STATUS,RP1
00221 2200      		BSF	STATUS,RP0
00222 2200      		BSF	CMD_LDO_0,LED3
00223 2200      		if UsesVUE8LEDs
00224 2200      		BSF	CMD_LDO_2,LED3A
00225 2200      		endif
00226 2200      		BCF	STATUS,RP1
00227 2200      		BCF	STATUS,RP0
00219 2200 		endm
00229 2200 	;
00230 2200      	mLED4_ON	macro
00231 2200      		BSF	STATUS,RP1
00232 2200      		BSF	STATUS,RP0
00233 2200      		BCF	CMD_LDO_0,LED4
00234 2200      		if UsesVUE8LEDs
00235 2200      		BCF	CMD_LDO_2,LED4A
00236 2200      		endif
00237 2200      		BCF	STATUS,RP1
00238 2200      		BCF	STATUS,RP0
00230 2200 		endm
00240 2200 	;
00241 2200      	mLED4_OFF	macro
00242 2200      		BSF	STATUS,RP1
00243 2200      		BSF	STATUS,RP0
00244 2200      		BSF	CMD_LDO_0,LED4
00245 2200      		if UsesVUE8LEDs
00246 2200      		BSF	CMD_LDO_2,LED4A
00247 2200      		endif
00248 2200      		BCF	STATUS,RP1
00249 2200      		BCF	STATUS,RP0
00241 2200 		endm
00251 2200 	;
00252 2200      	mLED5_ON	macro
00253 2200      		BSF	STATUS,RP1
00254 2200      		BSF	STATUS,RP0
00255 2200      		BCF	CMD_LDO_0,LED5
00256 2200      		if UsesVUE8LEDs
CastleGate.asm   "Brain Macros"                                          Page: 16
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

00257 2200      		BCF	CMD_LDO_2,LED5A
00258 2200      		endif
00259 2200      		BCF	STATUS,RP1
00260 2200      		BCF	STATUS,RP0
00252 2200 		endm
00262 2200 	;
00263 2200      	mLED5_OFF	macro
00264 2200      		BSF	STATUS,RP1
00265 2200      		BSF	STATUS,RP0
00266 2200      		BSF	CMD_LDO_0,LED5
00267 2200      		if UsesVUE8LEDs
00268 2200      		BSF	CMD_LDO_2,LED5A
00269 2200      		endif
00270 2200      		BCF	STATUS,RP1
00271 2200      		BCF	STATUS,RP0
00263 2200 		endm
00273 2200 	;
00274 2200      	mLED6_ON	macro
00275 2200      		BSF	STATUS,RP1
00276 2200      		BSF	STATUS,RP0
00277 2200      		BCF	CMD_LDO_0,LED6
00278 2200      		if UsesVUE8LEDs
00279 2200      		BCF	CMD_LDO_2,LED6A
00280 2200      		endif
00281 2200      		BCF	STATUS,RP1
00282 2200      		BCF	STATUS,RP0
00274 2200 		endm
00284 2200 	;
00285 2200      	mLED6_OFF	macro
00286 2200      		BSF	STATUS,RP1
00287 2200      		BSF	STATUS,RP0
00288 2200      		BSF	CMD_LDO_0,LED6
00289 2200      		if UsesVUE8LEDs
00290 2200      		BSF	CMD_LDO_2,LED6A
00291 2200      		endif
00292 2200      		BCF	STATUS,RP1
00293 2200      		BCF	STATUS,RP0
00285 2200 		endm
00295 2200 	;
00296 2200 	;=================================================================================
00297 2200 	; Macros to setup RP0/RP1
00298 2200      	mBank0	macro
00299 2200      		BCF	STATUS,RP0
00300 2200      		BCF	STATUS,RP1
00298 2200 		endm
00302 2200 	;
00303 2200      	mBank0	macro
00304 2200      		BCF	STATUS,RP0
00305 2200      		BCF	STATUS,RP1
00303 2200 		endm
00307 2200 	;
00308 2200      	mBank1	macro
00309 2200      		BSF	STATUS,RP0
00310 2200      		BCF	STATUS,RP1
00308 2200 		endm
00312 2200 	;
00313 2200      	mBank2	macro
00314 2200      		BCF	STATUS,RP0
00315 2200      		BSF	STATUS,RP1
00313 2200 		endm
00317 2200 	;
00318 2200      	mBank3	macro
00319 2200      		BSF	STATUS,RP0
00320 2200      		BSF	STATUS,RP1
00318 2200 		endm
00322 2200 	;
00323 2200 		if Using18F452
00400 2200 		else
00401 2200 	;=================================================================================
00402 2200 	; Call macros, use only when stack space is short 16F877 version
00403 2200 	;
00404 2200 	;Call from segment 0 to segment 1
00405 2200 	;
00406 2200 		if oldCode
00433 2200 		endif
00434 2200 	;
00435 2200      	mCall0To1	macro	Destination
00436 2200      		BSF	PCLATH,3
00437 2200      		CALL	Destination
00438 2200      		CLRF	PCLATH
00435 2200 		endm
00440 2200 	;
00441 2200 	;Call from segment 0 to segment 2
00442 2200 	;
00443 2200      	mCall0To2	macro	Destination
00444 2200      		BSF	PCLATH,4
00445 2200      		CALL	Destination
00446 2200      		CLRF	PCLATH
00443 2200 		endm
00448 2200 	;
00449 2200 	;Call from segment 0 to segment 3
00450 2200 	;
00451 2200      	mCall0To3	macro	Destination
00452 2200      		BSF	PCLATH,3
00453 2200      		BSF	PCLATH,4
00454 2200      		CALL	Destination
00455 2200      		CLRF	PCLATH
00451 2200 		endm
00457 2200 	;
00458 2200 	;Call from segment 1 to segment 0
CastleGate.asm   "Brain Macros"                                          Page: 17
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

00459 2200 	;
00460 2200      	mCall1To0	macro	Destination
00461 2200      		BCF	PCLATH,3
00462 2200      		CALL	Destination
00463 2200      		BSF	PCLATH,3
00464 2200      		BCF	PCLATH,4
00460 2200 		endm
00466 2200 	;
00467 2200 	;Call from segment 1 to segment 2
00468 2200 	;
00469 2200      	mCall1To2	macro	Destination
00470 2200      		BSF	PCLATH,4
00471 2200      		BCF	PCLATH,3
00472 2200      		CALL	Destination
00473 2200      		BCF	PCLATH,4
00474 2200      		BSF	PCLATH,3
00469 2200 		endm
00476 2200 	;
00477 2200 	;Call from segment 1 to segment 3
00478 2200 	;
00479 2200      	mCall1To3	macro	Destination
00480 2200      		BSF	PCLATH,4
00481 2200      		CALL	Destination
00482 2200      		BSF	PCLATH,3
00483 2200      		BCF	PCLATH,4
00479 2200 		endm
00485 2200 	;
00486 2200 	;Call from segment 2 to segment 0
00487 2200 	;
00488 2200      	mCall2To0	macro	Destination
00489 2200      		BCF	PCLATH,4
00490 2200      		CALL	Destination
00491 2200      		BCF	PCLATH,3
00492 2200      		BSF	PCLATH,4
00488 2200 		endm
00494 2200 	;
00495 2200 	;Call from segment 2 to segment 1
00496 2200 	;
00497 2200      	mCall2To1	macro	Destination
00498 2200      		BSF	PCLATH,3
00499 2200      		BCF	PCLATH,4
00500 2200      		CALL	Destination
00501 2200      		BCF	PCLATH,3
00502 2200      		BSF	PCLATH,4
00497 2200 		endm
00504 2200 	;
00505 2200 	;Call from segment 2 to segment 3
00506 2200 	;
00507 2200      	mCall2To3	macro	Destination
00508 2200      		BSF	PCLATH,3
00509 2200      		CALL	Destination
00510 2200      		BCF	PCLATH,3
00511 2200      		BSF	PCLATH,4
00507 2200 		endm
00513 2200 	;
00514 2200 	;Call from segment 3 to segment 0
00515 2200 	;
00516 2200      	mCall3To0	macro	Destination
00517 2200      		BCF	PCLATH,3
00518 2200      		BCF	PCLATH,4
00519 2200      		CALL	Destination
00520 2200      		BSF	PCLATH,3
00521 2200      		BSF	PCLATH,4
00516 2200 		endm
00523 2200 	;
00524 2200 	;Call from segment 3 to segment 1
00525 2200 	;
00526 2200      	mCall3To1	macro	Destination
00527 2200      		BCF	PCLATH,4
00528 2200      		CALL	Destination
00529 2200      		BSF	PCLATH,3
00530 2200      		BSF	PCLATH,4
00526 2200 		endm
00532 2200 	;
00533 2200 	;Call from segment 3 to segment 2
00534 2200 	;
00535 2200      	mCall3To2	macro	Destination
00536 2200      		BCF	PCLATH,3
00537 2200      		CALL	Destination
00538 2200      		BSF	PCLATH,3
00539 2200      		BSF	PCLATH,4
00535 2200 		endm
00541 2200 	;
00542 2200 		endif
00543 2200 	;=================================================================================
00544 2200 	; Read Data macro
00545 2200 	;
00546 2200 	;  Note: Address Enable ON, IORead ON, Get Data, IORead OFF, Address Enable OFF
00547 2200 	; arg1 is the select value (Select0,SelectSRAM, etc.)
00548 2200 	; Entry: None
00549 2200 	; Exit: W = data from port
00550 2200 	; Ram used:none
00551 2200 	; Calls: (0) none
00552 2200      	mReadData	macro	arg1
00553 2200      		BSF	STATUS,RP0	;Bank1
00554 2200      		BCF	STATUS,RP1
00555 2200      		MOVLW	All_In
00556 2200      		MOVWF	TRISD
00557 2200      		BCF	STATUS,RP0	;Bank0
00558 2200      		MOVF	PORTB,W
CastleGate.asm   "Brain Macros"                                          Page: 18
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

00559 2200      		ANDLW	AddressMask
00560 2200      		IORLW	arg1
00561 2200      		MOVWF	PORTB
00562 2200      		BCF	PORTB,SelectEnable
00563 2200      		BCF	PORTB,IORead
00564 2200      		NOP		;wait 200nS
00565 2200      		MOVF	PORTD,W
00566 2200      		BSF	PORTB,IORead
00567 2200      		BSF	PORTB,SelectEnable
00552 2200 		endm	
00569 2200 	;
00570 2200 	;=================================================================================
00571 2200 	; Write Data macro
00572 2200 	;
00573 2200 	;  Note: Address Enable ON, IOWrite ON, IOWrite OFF, Address Enable OFF
00574 2200 	; arg1 is the select value (Select0,SelectSRAM, etc.)
00575 2200 	; Data is the location of the Data (Param71, etc.)
00576 2200 	;
00577 2200 	; Entry: Data=Data, TRISD must be All_Out, Bank 0 must be delected, Data must be in bank 0
00578 2200 	; Exit: none
00579 2200 	; Ram used:"Data"
00580 2200 	; Calls: (0) none
00581 2200 	;
00582 2200      	mWriteData	macro	arg1,Data
00583 2200      		MOVF	Data,W
00584 2200      		MOVWF	PORTD
00585 2200      	;
00586 2200      		MOVF	PORTB,W
00587 2200      		ANDLW	AddressMask
00588 2200      		IORLW	arg1
00589 2200      		MOVWF	PORTB
00590 2200      		BCF	PORTB,SelectEnable
00591 2200      		BCF	PORTB,IOWrite
00592 2200      		BSF	PORTB,IOWrite	
00593 2200      		BSF	PORTB,SelectEnable
00582 2200 		endm
00595 2200 	;
00596 2200 	;=================================================================================
00597 2200 	; Set the low 8 address bits to the value in the W
00598 2200 	;
00599 2200 	; Entry: W= and 8 bit address, any bank OK
00600 2200 	; Exit: CurrentAddr0 is changed, Bank 0 selected
00601 2200 	; RAM used:none
00602 2200 	; Calls:(0) none
00603 2200 	;
00604 2200      	mSet8bitAddr	macro
00605 2200      		BCF	STATUS,RP1
00606 2200      		BCF	STATUS,RP0	;Bank0
00607 2200      		MOVWF	PORTD
00608 2200      		BSF	STATUS,RP1	;Bank3
00609 2200      		BSF	STATUS,RP0
00610 2200      		MOVWF	CurrentAddr0
00611 2200      		BCF	STATUS,RP1	;Bank1
00612 2200      		MOVLW	All_Out
00613 2200      		MOVWF	TRISD
00614 2200      		BCF	STATUS,RP0	;Bank0
00615 2200      		MOVF	PORTB,W
00616 2200      		ANDLW	AddressMask
00617 2200      		IORLW	Select0
00618 2200      		MOVWF	PORTB
00619 2200      		BCF	PORTB,SelectEnable
00620 2200      		BSF	PORTB,SelectEnable
00604 2200 		endm
00622 2200 	;
00623 2200 	;=================================================================================
00624 2200 	; Set PCLATH:0..2 then add W to PCL
00625 2200 	; CAUTION:The first BSF/BCF instruction and the location of the 
00626 2200 	;  last branched to instruction must be in the same page
00627 2200 	;
00628 2200 	; Entry: W= and 8 bit offset for PCL
00629 2200 	; Exit: branches forward W locations
00630 2200 	; RAM used:none
00631 2200 	; Calls:(0) none
00632 2200 	;
00633 2200      	mPCLGoto	macro	
00634 2200      		if $ & 0x0100
00635 2200      		BSF	PCLATH,0
00636 2200      		else
00637 2200      		BCF	PCLATH,0
00638 2200      		endif
00639 2200      		if $ & 0x0200
00640 2200      		BSF	PCLATH,1
00641 2200      		else
00642 2200      		BCF	PCLATH,1
00643 2200      		endif
00644 2200      		if $ & 0x0400
00645 2200      		BSF	PCLATH,2
00646 2200      		else
00647 2200      		BCF	PCLATH,2
00648 2200      		endif
00649 2200      	;
00650 2200      		ADDWF	PCL,F
00633 2200 		endm
00652 2200 	;
00653 2200 	;=======================================================================================
00654 2200 	;Set Status,IRP bit corect for the operand passed
00655 2200 	;
00656 2200      	mBankISel	macro	dest
00657 2200      		if dest & 0x0100
00658 2200      		BSF	STATUS,IRP
CastleGate.asm   "Brain Macros"                                          Page: 19
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

00659 2200      		else
00660 2200      		BCF	STATUS,IRP
00661 2200      		endif
00656 2200 		endm
00663 2200 	;
00664 2200 	;=======================================================================================
00665 2200 	; Instruction set extentions for 14 bit core (16F###)
00666 2200 	;=======================================================================================
00667 2200 	; Add Carry to File
00668 2200 	;
00669 2200      	ADDCF	macro	dest,W_or_F
00670 2200      		BTFSC	STATUS,C
00671 2200      		INCF	dest,W_or_F
00669 2200 		endm
00673 2200 	;
00674 2200 	;==============================================================
00675 2200 	; Add Digit Carry to File
00676 2200 	;
00677 2200      	ADDDCF	macro	dest,W_or_F
00678 2200      		BTFSC	STATUS,DC
00679 2200      		INCF	dest,W_or_F
00677 2200 		endm
00681 2200 	;
00682 2200 	;==============================================================
00683 2200 	; Branch on Carry
00684 2200 	;
00685 2200      	BC	macro	dest
00686 2200      		BTFSC	STATUS,C
00687 2200      		GOTO	dest
00685 2200 		endm
00689 2200 	;
00690 2200 	;==============================================================
00691 2200 	; Branch on Digit Carry
00692 2200 	;
00693 2200      	BDC	macro	dest
00694 2200      		BTFSC	STATUS,DC
00695 2200      		GOTO	dest
00693 2200 		endm
00697 2200 	;
00698 2200 	;==============================================================
00699 2200 	; Branch on Equal to Zero aka BZ
00700 2200 	;
00701 2200      	BEQ	macro	dest
00702 2200      		BTFSC	STATUS,Z
00703 2200      		GOTO	dest
00701 2200 		endm
00705 2200 	;
00706 2200 	;==============================================================
00707 2200 	; Branch on W minus (bit 7 set) (W bits 0..6 are zerroed)
00708 2200 	;
00709 2200      	BMI	macro	dest
00710 2200      		ANDLW	0x80
00711 2200      		BTFSC	STATUS,Z	;skip if Z
00712 2200      		GOTO	dest
00709 2200 		endm
00714 2200 	;
00715 2200 	;==============================================================
00716 2200 	; Branch on No Carry
00717 2200 	;
00718 2200      	BNC	macro	dest
00719 2200      		BTFSS	STATUS,C
00720 2200      		GOTO	dest
00718 2200 		endm
00722 2200 	;
00723 2200 	;==============================================================
00724 2200 	; Branch on No Digit Carry
00725 2200 	;
00726 2200      	BNDC	macro	dest
00727 2200      		BTFSS	STATUS,DC
00728 2200      		GOTO	dest
00726 2200 		endm
00730 2200 	;
00731 2200 	;==============================================================
00732 2200 	; Branch on Not Equal to Zero aka BNZ
00733 2200 	;
00734 2200      	BNE	macro	dest
00735 2200      		BTFSS	STATUS,Z
00736 2200      		GOTO	dest
00734 2200 		endm
00738 2200 	;
00739 2200 	;==============================================================
00740 2200 	; Branch on No Zero
00741 2200 	;
00742 2200      	BNZ	macro	dest
00743 2200      		BTFSS	STATUS,Z
00744 2200      		GOTO	dest
00742 2200 		endm
00746 2200 	;
00747 2200 	;==============================================================
00748 2200 	; Branch on W plus (bit 7 clr) (W bits 0..6 are zerroed)
00749 2200 	;
00750 2200      	BPL	macro	dest
00751 2200      		ANDLW	0x80
00752 2200      		BTFSS	STATUS,Z	;skip if not Z
00753 2200      		GOTO	dest
00750 2200 		endm
00755 2200 	;
00756 2200 	;==============================================================
00757 2200 	; Branch on Zero
00758 2200 	;
CastleGate.asm   "Brain Macros"                                          Page: 20
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

00759 2200      	BZ	macro	dest
00760 2200      		BTFSC	STATUS,Z
00761 2200      		GOTO	dest
00759 2200 		endm
00763 2200 	;
00764 2200 	;==============================================================
00765 2200 	; Clear Carry
00766 2200 	;
00767 2200      	CLRC	macro
00768 2200      		BCF	STATUS,C
00767 2200 		endm
00770 2200 	;
00771 2200 	;==============================================================
00772 2200 	; Clear Digit Carry
00773 2200 	;
00774 2200      	CLRDC	macro
00775 2200      		BCF	STATUS,DC
00774 2200 		endm
00777 2200 	;
00778 2200 	;==============================================================
00779 2200 	; Clear Zero flag
00780 2200 	;
00781 2200      	CLRZ	macro
00782 2200      		BCF	STATUS,Z
00781 2200 		endm
00784 2200 	;
00785 2200 	;==============================================================
00786 2200 	; Compare F to W (F-W)
00787 2200 	;
00788 2200      	CMP	macro	f
00789 2200      		SUBWF	f,W
00788 2200 		endm
00791 2200 	;
00792 2200 	;==============================================================
00793 2200 	; Long Call
00794 2200 	;
00795 2200      	LCALL	macro	dest
00796 2200      		if ($ & 0x0800) <> (dest & 0x0800)
00797 2200      		if dest & 0x0800
00798 2200      		BSF	PCLATH,3
00799 2200      		else
00800 2200      		BCF	PCLATH,3
00801 2200      		endif
00802 2200      		endif
00803 2200      			
00804 2200      		if ($ & 0x1000) <> (dest & 0x1000)
00805 2200      		if dest & 0x1000
00806 2200      		BSF	PCLATH,4
00807 2200      		else
00808 2200      		BCF	PCLATH,4
00809 2200      		endif
00810 2200      		endif	
00811 2200      		endif	
00812 2200      		CALL	dest
00813 2200      		if (($ & 0x0800) <> (dest & 0x0800)) | (($ & 0x1000) <> (dest & 0x1000))
00814 2200      		if $ & 0x0800
00815 2200      		BSF	PCLATH,3
00816 2200      		else
00817 2200      		BCF	PCLATH,3
00818 2200      		endif
00819 2200      		
00820 2200      		if $ & 0x1000
00821 2200      		BSF	PCLATH,4
00822 2200      		else
00823 2200      		BCF	PCLATH,4
00824 2200      		endif
00825 2200      		endif
00795 2200 		endm
00827 2200 	;
00828 2200 	;==============================================================
00829 2200 	; Long GOTO
00830 2200 	;
00831 2200      	LGOTO	macro	dest
00832 2200      		if ($ & 0x0800) <> (dest & 0x0800)
00833 2200      		if dest & 0x0800
00834 2200      		BSF	PCLATH,3
00835 2200      		else
00836 2200      		BCF	PCLATH,3
00837 2200      		endif
00838 2200      		endif
00839 2200      			
00840 2200      		if ($ & 0x1000) <> (dest & 0x1000)
00841 2200      		if dest & 0x1000
00842 2200      		BSF	PCLATH,4
00843 2200      		else
00844 2200      		BCF	PCLATH,4
00845 2200      		endif
00846 2200      		endif	
00847 2200      		endif	
00848 2200      		GOTO	dest
00831 2200 		endm
00850 2200 	;
00851 2200 	;==============================================================
00852 2200 	; Move File to W
00853 2200 	;
00854 2200      	MOVFW	macro	src
00855 2200      		MOVF	src,W
00854 2200 		endm
00857 2200 	;
00858 2200 	;==============================================================
CastleGate.asm   "Brain Macros"                                          Page: 21
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

00859 2200 	; Negate File
00860 2200 	;
00861 2200      	NEGF	macro	dest,W_or_F
00862 2200      		COMF	dest,F
00863 2200      		INCF	dest,W_or_F
00861 2200 		endm
00865 2200 	;
00866 2200 	;==============================================================
00867 2200 	; Set Carry
00868 2200 	;
00869 2200      	SETC	macro
00870 2200      		BSF	STATUS,C
00869 2200 		endm
00872 2200 	;
00873 2200 	;==============================================================
00874 2200 	; Set Digit Carry
00875 2200 	;
00876 2200      	SETDC	macro
00877 2200      		BSF	STATUS,DC
00876 2200 		endm
00879 2200 	;
00880 2200 	;==============================================================
00881 2200 	; Set Zero
00882 2200 	;
00883 2200      	SETZ	macro
00884 2200      		BSF	STATUS,Z
00883 2200 		endm
00886 2200 	;
00887 2200 	;==============================================================
00888 2200 	; Skip on Borrow
00889 2200 	;
00890 2200      	SKPB	macro
00891 2200      		BTFSC	STATUS,C
00890 2200 		endm
00893 2200 	;
00894 2200 	;==============================================================
00895 2200 	; Skip on Carry
00896 2200 	;
00897 2200      	SKPC	macro
00898 2200      		BTFSS	STATUS,C
00897 2200 		endm
00900 2200 	;
00901 2200 	;==============================================================
00902 2200 	; Skip on Digit Carry
00903 2200 	;
00904 2200      	SKPDC	macro
00905 2200      		BTFSS	STATUS,DC
00904 2200 		endm
00907 2200 	;
00908 2200 	;==============================================================
00909 2200 	; Skip on Not Borrow
00910 2200 	;
00911 2200      	SKPNB	macro
00912 2200      		BTFSS	STATUS,C
00911 2200 		endm
00914 2200 	;
00915 2200 	;==============================================================
00916 2200 	; Skip on No Carry
00917 2200 	;
00918 2200      	SKPNC	macro
00919 2200      		BTFSC	STATUS,C
00918 2200 		endm
00921 2200 	;
00922 2200 	;==============================================================
00923 2200 	; Skip on No Digit Carry
00924 2200 	;
00925 2200      	SKPNDC	macro
00926 2200      		BTFSC	STATUS,DC
00925 2200 		endm
00928 2200 	;
00929 2200 	;==============================================================
00930 2200 	; Skip on Not Zero
00931 2200 	;
00932 2200      	SKPNZ	macro
00933 2200      		BTFSC	STATUS,Z
00932 2200 		endm
00935 2200 	;
00936 2200 	;==============================================================
00937 2200 	; Skip on Zero
00938 2200 	;
00939 2200      	SKPZ	macro
00940 2200      		BTFSS	STATUS,Z
00939 2200 		endm
00942 2200 	;
00943 2200 	;==============================================================
00944 2200 	; Subtract Borrow from File
00945 2200 	;
00946 2200      	SUBBF	macro	dest,W_or_F
00947 2200      		BTFSS	STATUS,C
00948 2200      		DECF	dest,W_or_F
00946 2200 		endm
00950 2200 	;
00951 2200 	;==============================================================
00952 2200 	; Subtract Carry from File
00953 2200 	;
00954 2200      	SUBCF	macro	dest,W_or_F
00955 2200      		BTFSC	STATUS,C
00956 2200      		DECF	dest,W_or_F
00954 2200 		endm
00958 2200 	;
CastleGate.asm   "Brain Macros"                                          Page: 22
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

00959 2200 	;==============================================================
00960 2200 	; Subtract Digit Carry from File
00961 2200 	;
00962 2200      	SUBDCF	macro	dest,W_or_F
00963 2200      		BTFSC	STATUS,DC
00964 2200      		DECF	dest,W_or_F
00962 2200 		endm
00966 2200 	;
00967 2200 	;==============================================================
00968 2200 	; Test File
00969 2200 	;
00970 2200      	TSTF	macro	src
00971 2200      		MOVF	src,F
00970 2200 		endm
00973 2200 	;
00974 2200 	;
00975 2200 	;
00976 2200 	;
00977 2200 	;
00978 2200 	;
00979 2200 	;
00980 2200 	;
00981 2200 	;
00982 2200 	;
00983 2200 	;
00984 2200 	;
00985 2200 	;
00986 2200 	;
00987 2200 	;
00988 2200 	;
00989 2200 	;
00990 2200 	;
00991 2200 	;
00992 2200 	;
00993 2200 	;
00994 2200 	;
00995 2200 	;
00980 2200 		include	Strings.inc	;string definitions
00001 2200 		subtitle	"Strings.inc"

00002 2200 		page
00003 2200 	;===========================================================================================
00004 2200 	;
00005 2200 	;  FileName: Strings.inc
00006 2200 	;  Date: 8/16/04
00007 2200 	;  File Version: 1.2.10
00008 2200 	;  
00009 2200 	;  Author: David M. Flynn
00010 2200 	;  Company: HPRR
00011 2200 	;  Project: HPRR Common Strings
00012 2200 	;
00013 2200 	;============================================================================================
00014 2200 	;
00015 2200 	; String Numbers
00016 2200 	; 8 bytes per number
00017 2200 	; add 1 byte for terminator (0x00)
00018 2200 	;
00019 2200 	; The STR command is related to the RES command.
00020 2200 	; The label is stored with the currnt PC value then
00021 2200 	;  the PC is incremented by the string length + 1 (0x00 terminator byte is added)
00022 2200 	;  rounded up to the next 8 byte block.
00023 2200 	; An "s.s" file is created containing the string data for the eerom file
00024 2200 	;
00025 2200 	;============================================================================================
00026 2200 	; Revision History
00027 2200 	;
00028 2200 	; 1.0  9/5/2004	First reved version
00029 2200 	;============================================================================================
00030 2200 		ORG	0x0000
00031 0000 0000 	NICinitErrStrPtr	STR	'\nNIC init err '
00032 0000 0002 	NICoverrunStrPtr	STR	' NIC Rx overrun '
00033 0000 0005 	NICpktErrStrPtr	STR	' NIC pkt err '
00034 0000 0007 	NICptrErrStrPtr	STR	' NIC ptr err '
00035 0000 0009 	SerNumStrPtr	STR	'\r\nSerial num? '
00036 0000 000B 	IPAddrStrPtr	STR	'\r\nIP addr? '
00037 0000 000D 	XmodemStrPtr	STR	'\r\nXmodem? '
00038 0000 000F 	SIGNONStrPtr	STR	SignonString
00039 0000 	;
00040 0000 0011 	ConfigStrPtr	STR	'Config '
00041 0000 0012 	Str_DAYMSGPtr	STR	'No daytime msg\r\n'
00042 0000 0015 	Str_HTTP_FAILPtr	STR	'HTTP/ 200 OK\r\n\r\nNo Web pages!\r\n'
00043 0000 0019 	SvsModeStrPtr	STR	'Service Mode '
00044 0000 001B 	Str_NextPtr	STR	'Next '
00045 0000 001C 	Str_UpDownPtr	STR	'Down  Up  Fact'
00046 0000 001E 	Str_OnOffPtr	STR	' On   OFF'
00047 0000 0020 	Str_YesNoPtr	STR	' Yes  No'
00048 0000 0022 	Str_ErrorPtr	STR	'Error!'
00049 0000 0023 	Str_AddrPtr	STR	'Addr:'
00050 0000 0024 	Str_ClrHardErrPtr	STR	'Cancel'
00051 0000 0025 	Str_SNPtr	STR	'S/N:'
00052 0000 0026 	Str_LoadSavePtr	STR	' Load Save Next'
00053 0000 0028 	Str_YesPtr	STR	'Yes'
00054 0000 0029 	Str_NoPtr	STR	'No '
00055 0000 002A 	Str_n/aPtr	STR	'n/a'
00056 0000 002B 	Str_LowPtr	STR	'Low'
00057 0000 002C 	Str_OKPtr	STR	'OK'
00058 0000 002D 	StrNotAvailiblePtr	STR	'Not Availible'
00059 0000 	;
00060 0000 002F 	StrResetNowPtr	STR	'Press Reset Now'
00061 0000 0031 	StrLoadRIPtr	STR	'Loading ROM Image'
CastleGate.asm   "Strings.inc"                                           Page: 23
/HPRR Electrical Dept/HPRR.ASM/MasterFiles/

00062 0000 0034 	Str_DUCPtr	STR	'Down  Up  Chng'
00063 0000 	;
00064 0000 000C 	kLastSvsScrn	EQU	d'12'
00065 0000 0001 	kLastNormScrn	EQU	d'1'
00066 0000 0003 	kErrorScrn	EQU	d'3'
00067 0000 	;
00068 0000 	; Service Mode Titles and Info Lines
00069 0000 				;'Service Mode '00
00070 0000 0036 	Str_SvsMd00ttlPtr	STR	'Switch Machine'	;'Switch Machine'
00071 0000 0038 	Str_SvsMd00InfoPtr	STR	'Num=     Value='	;'Num=     Value='
00072 0000 				;'Next ''Down  Up  Chng'
00073 0000 	;
00074 0000 				;'Service Mode '01
00075 0000 003A 	Str_SvsMd01ttlPtr	STR	'High Switch Machine'	;'High Switch Machine'
00076 0000 0038 	Str_SvsMd01InfoPtr	EQU	Str_SvsMd00InfoPtr	;'Num=     Value='
00077 0000 				;'Next ''Down  Up  Chng'
00078 0000 	;
00079 0000 				;'Service Mode '02
00080 0000 003D 	Str_SvsMd02ttlPtr	STR	'Block Data'	;'Block Data'
00081 0000 003F 	Str_SvsMd02InfoPtr	STR	'Num=     V='	;'Num=     Value='
00082 0000 				;'Next ''Down  Up  Chng'
00083 0000 	;
00084 0000 				;'Service Mode '03
00085 0000 0041 	Str_SvsMd03ttlPtr	STR	'MAC Address'	;'MAC Address'
00086 0000 0000 	Str_SvsMd03InfoPtr	EQU	0x00	; 00 00 00 00 00 00
00087 0000 				;'Next ''Down  Up  Fact'
00088 0000 	;
00089 0000 				;'Service Mode '04
00090 0000 0043 	Str_SvsMd04ttlPtr	STR	'IP Address'	;'IP Address'
00091 0000 0000 	Str_SvsMd04InfoPtr	EQU	0x00	; 192.168.1.124
00092 0000 				;'Next ''Down  Up  Fact'
00093 0000 	;
00094 0000 				;'Service Mode '05
00095 0000 0045 	Str_SvsMd05ttlPtr	STR	'Input '	;'Input '
00096 0000 0000 	Str_SvsMd05InfoPtr	EQU	0x00	; 00 00 00
00097 0000 				;'Next '
00098 0000 	;
00099 0000 				;'Service Mode '06
00100 0000 0046 	Str_SvsMd06ttlPtr	STR	'Bootloader'	;'Bootloader'
00101 0000 0048 	Str_SvsMd06InfoPtr	STR	'Load Image Now?'	;'Load Image Now?'
00102 0000 				;'Next '' Yes  No'
00103 0000 	;
00104 0000 				;'Service Mode '07
00105 0000 004A 	Str_SvsMd07ttlPtr	STR	'Remote Reset'	;'Remote Reset'
00106 0000 004C 	Str_SvsMd07InfoPtr	STR	'Reset Now?'	;'Reset Now?'
00107 0000 				;'Next '' Yes  No'
00108 0000 	;
00109 0000 				;'Service Mode '08
00110 0000 004E 	Str_SvsMd08ttlPtr	STR	'Test Scanner'	;'Test Scanner'
00111 0000 0050 	Str_SvsMd08InfoPtr	STR	'Slot/Board='	;'Slot/Board='
00112 0000 				;'Next ''Down  Up  Fact'
00113 0000 	;
00114 0000 				;'Service Mode '09
00115 0000 004A 	Str_SvsMd09ttlPtr	EQU	Str_SvsMd07ttlPtr	;'Test Scanner'
00116 0000 0000 	Str_SvsMd09InfoPtr	EQU	0x00	;SB:00000000 00000000
00117 0000 				;'Next '
00118 0000 	;
00119 0000 				;'Service Mode '10
00120 0000 0052 	Str_SvsMd10ttlPtr	STR	'Block Data Cab#'	;'Block Data Cab#'
00121 0000 0054 	Str_SvsMd10InfoPtr	STR	'Cab# to change='	;'Cab# to change='
00122 0000 				;'Next ''Down  Up  Fact'
00123 0000 	;
00124 0000 				;'Service Mode '11
00125 0000 0056 	Str_SvsMd11ttlPtr	STR	'Block Module Tester'	;'Block Module Tester'
00126 0000 0038 	Str_SvsMd11InfoPtr	EQU	Str_SvsMd00InfoPtr	;'Num=     Value='
00127 0000 				;'Next ''Down  Up  Chng'
00128 0000 	;
00129 0000 				;'Service Mode '12
00130 0000 0059 	Str_SvsMd12ttlPtr	STR	'Output Board Tester'	;'Output Board Tester'
00131 0000 0038 	Str_SvsMd12InfoPtr	EQU	Str_SvsMd00InfoPtr	;'Num=     Value='
00132 0000 				;'Next ''Down  Up  Chng'
00133 0000 	;
00981 0000 		include	Data.inc
00001 0000 		subtitle	"Data.inc"
00002 0000 	;
00003 0000 	;===========================================================================================
00004 0000 	;
00005 0000 	;  FileName: Data.inc
00006 0000 	;  Date: 6/2/2007
00007 0000 	;  File Version: 1.0.1
00008 0000 	;  
00009 0000 	;  Author: David M. Flynn
00010 0000 	;  Company: HPRR
00011 0000 	;  Project: Casper Tower
00012 0000 	;
00013 0000 	;===========================================================================================
00014 0000 	; Revision History
00015 0000 	;
00016 0000 	; 1.0.1  6/2/07	Added kLastBlkModule
00017 0000 	; 1.0    3/27/03	File first created.
00018 0000 	;
00019 0000 	;============================================================================================
00020 0000 	; Notes:
00021 0000 	;
00022 0000 	;  This file has data that is loaded from the eeROM to SRAM
00023 0000 	;  evDataROM*256 is added to the PC here to get the SRAM address
00024 0000 	;
00025 0000 	;  The BD and DW commands are related to the STR and RES commands.
00026 0000 	;  The label is stored with the currnt PC value then
00027 0000 	;   the PC is incremented by the data length
CastleGate.asm   "Data.inc"                                              Page: 24
/HPRR Electrical Dept/Castlegate/Firmware/

00028 0000 	;  A "d.d" file is created containing the data for the eerom file.
00029 0000 	;  Copy the "d.d" file to the WWW page subdirectory then run eeROM 
00030 0000 	;   to make an eeROM.binary file.
00031 0000 	;  Then run eeROM Uploader to upload the eeROM.binary file into the
00032 0000 	;   first 24LC256 at U2.
00033 0000 	;
00034 0000 	;============================================================================================
00035 0000 		DataFileOn LE
00036 0000 		ORG	0x0000
00037 0000 	;
00038 0000 00FF 	EOD	EQU	0xFF
00039 0000 	;
00040 0000 		include HPRRMenuData.inc
00001 0000 	;Service Mode Title string pointers
00002 0000 36 	SvsModeTitles	DB	Str_SvsMd00ttlPtr	;00'Switch Machine'
00003 0001 3A 		DB	Str_SvsMd01ttlPtr	;01'High Switch Machine'
00004 0002 3D 		DB	Str_SvsMd02ttlPtr	;02'Block Data'
00005 0003 41 		DB	Str_SvsMd03ttlPtr	;03'MAC Address'
00006 0004 43 		DB	Str_SvsMd04ttlPtr	;04'IP Address'
00007 0005 45 		DB	Str_SvsMd05ttlPtr	;05'Input '
00008 0006 46 		DB	Str_SvsMd06ttlPtr	;06'Bootloader'
00009 0007 4A 		DB	Str_SvsMd07ttlPtr	;07'Remote Reset'
00010 0008 4E 		DB	Str_SvsMd08ttlPtr	;08'Test Scanner'
00011 0009 4A 		DB	Str_SvsMd09ttlPtr	;09'Test Scanner'
00012 000A 52 		DB	Str_SvsMd10ttlPtr	;'Block Data Cab#'
00013 000B 56 		DB	Str_SvsMd11ttlPtr	;'Block Module Tester'
00014 000C 59 		DB	Str_SvsMd12ttlPtr	;'Output Board Tester'
00015 000D 	;
00016 000D 	;Service Mode Information lines
00017 000D 38 	SvsModeInfoLines	DB	Str_SvsMd00InfoPtr	;00'Num=     Value='
00018 000E 38 		DB	Str_SvsMd01InfoPtr	;01'Num=     Value='
00019 000F 3F 		DB	Str_SvsMd02InfoPtr	;02'Num=     V='
00020 0010 00 		DB	Str_SvsMd03InfoPtr	;03''
00021 0011 00 		DB	Str_SvsMd04InfoPtr	;04''
00022 0012 00 		DB	Str_SvsMd05InfoPtr	;05''
00023 0013 48 		DB	Str_SvsMd06InfoPtr	;06'Load Image Now?'
00024 0014 4C 		DB	Str_SvsMd07InfoPtr	;07'Reset Now?
00025 0015 50 		DB	Str_SvsMd08InfoPtr	;08'Slot/Board='
00026 0016 00 		DB	Str_SvsMd09InfoPtr	;09 SB:00000000 00000000
00027 0017 54 		DB	Str_SvsMd10InfoPtr	;10 'Cab# to change='
00028 0018 38 		DB	Str_SvsMd11InfoPtr	;'Module#=    Data='
00029 0019 38 		DB	Str_SvsMd12InfoPtr	;'Module#=    Data='
00030 001A 	;
00031 001A 	;Service Mode Command Lines
00032 001A 34 	SvsModeCmdLines	DB	Str_DUCPtr	;00 'Next ''Down  Up  Chng'
00033 001B 34 		DB	Str_DUCPtr	;01 'Next ''Down  Up  Chng'
00034 001C 34 		DB	Str_DUCPtr	;02 'Next ''Down  Up  Chng'
00035 001D 1C 		DB	Str_UpDownPtr	;03 'Next ''Down  Up  Fact'
00036 001E 1C 		DB	Str_UpDownPtr	;04 'Next ''Down  Up  Fact'
00037 001F 00 		DB	0x00	;05 'Next '
00038 0020 20 		DB	Str_YesNoPtr	;06 'Next '' Yes  No'
00039 0021 20 		DB	Str_YesNoPtr	;07 'Next '' Yes  No'
00040 0022 1C 		DB	Str_UpDownPtr	;08 'Next ''Down  Up  Fact'
00041 0023 00 		DB	0x00	;09 'Next '
00042 0024 1C 		DB	Str_UpDownPtr	;10 'Next ''Down  Up  Fact'
00043 0025 34 		DB	Str_DUCPtr	;02 'Next ''Down  Up  Chng'
00044 0026 34 		DB	Str_DUCPtr	;02 'Next ''Down  Up  Chng'
00045 0027 	;
00041 0027 	;
00042 0027 001F 	kLastBlkModule	EQU	0x1F
00043 0027 	; output address of the speaker
00044 0027 041D 	SPKR	EQU	0x041D
00045 0027 	;
00046 0027 0001 	kNumDefaultValues	EQU	d'1'	;FactoryDefaults list
00047 0027 	;  see BytesToMvFrmEE
00048 0027 00 	FactoryDefaults	DB	kDefaultIOCtrl
00049 0028 	;
00050 0028 	;
00051 0028 	;Buttons add 0x0000 to get Input #
00052 0028 0000 	ButtonIBoard	EQU	0x00
00053 0028 	;
00054 0028 0010 	Cab1Btn	EQU	0x10	;Cab 1
00055 0028 0011 	Cab2Btn	EQU	0x11
00056 0028 0012 	Cab3Btn	EQU	0x12
00057 0028 0013 	Cab4Btn	EQU	0x13
00058 0028 0014 	Cab5Btn	EQU	0x14	;Cab 5
00059 0028 0015 	Cab6Btn	EQU	0x15	;CT
00060 0028 	;
00061 0028 	;
00062 0028 		include	PanelCtrlData.inc
00001 0028 		subtitle	"PanelCtrlData.inc"
00002 0028 	;
00003 0028 	;===========================================================================================
00004 0028 	;
00005 0028 	;  FileName: PanelCtrlData.inc
00006 0028 	;  Date: 6/26/05
00007 0028 	;  File Version: 1.0
00008 0028 	;  
00009 0028 	;  Author: David M. Flynn
00010 0028 	;  Company: HPRR
00011 0028 	;
00012 0028 	;===========================================================================================
00013 0028 	; Revision History
00014 0028 	;
00015 0028 	; 1.0    6/26/05	File first created.
00016 0028 	;
00017 0028 	;============================================================================================
00018 0028 	; Notes:
00019 0028 	;
00020 0028 	;  Include this file as part of Data.inc when using PanelControl.asm
CastleGate.asm   "PanelCtrlData.inc"                                     Page: 25
/HPRR Electrical Dept/HPRR.ASM/MasterFiles/

00021 0028 	;
00022 0028 	;  This file has data that is loaded from the eeROM to SRAM
00023 0028 	;  evDataROM*256 is added to the PC here to get the SRAM address
00024 0028 	;
00025 0028 	;  The BD and DW commands are related to the STR and RES commands.
00026 0028 	;  The label is stored with the currnt PC value then
00027 0028 	;   the PC is incremented by the data length
00028 0028 	;  A "d.d" file is created containing the data for the eerom file.
00029 0028 	;  Copy the "d.d" file to the WWW page subdirectory then run eeROM 
00030 0028 	;   to make an eeROM.binary file.
00031 0028 	;  Then run eeROM Uploader to upload the eeROM.binary file into the
00032 0028 	;   first 24LC256 at U2.
00033 0028 	;
00034 0028 	;============================================================================================
00035 0028 	;
00036 0028 	;Segment data
00037 0028 	; bits are MSb to LSb f,g,e,d,dp,c,b,a
00038 0028 	;
00039 0028 	;      a
00040 0028 	;     ____
00041 0028 	;    |    |
00042 0028 	;  f |  g | b
00043 0028 	;     ____
00044 0028 	;    |    |
00045 0028 	;  e |    | c
00046 0028 	;     ____  .
00047 0028 	;       d   DP
00048 0028 	;
00049 0028 0000 	Dark	EQU	b'00000000'
00050 0028 0008 	Dot	EQU	b'00001000'
00051 0028 00B7 	Zero	EQU	b'10110111'
00052 0028 00BF 	DotZero	EQU	b'10111111'
00053 0028 0006 	One	EQU	b'00000110'
00054 0028 000E 	DotOne	EQU	b'00001110'
00055 0028 0073 	Two	EQU	b'01110011'
00056 0028 007B 	DotTwo	EQU	b'01111011'
00057 0028 0057 	Three	EQU	b'01010111'
00058 0028 005F 	DotThree	EQU	b'01011111'
00059 0028 00C6 	Four	EQU	b'11000110'
00060 0028 00CE 	DotFour	EQU	b'11001110'
00061 0028 00D5 	Five	EQU	b'11010101'
00062 0028 00DD 	DotFive	EQU	b'11011101'
00063 0028 00F5 	Six	EQU	b'11110101'
00064 0028 00FD 	DotSix	EQU	b'11111101'
00065 0028 0007 	Seven	EQU	b'00000111'
00066 0028 000F 	DotSeven	EQU	b'00001111'
00067 0028 00F7 	Eight	EQU	b'11110111'
00068 0028 00FF 	DotEight	EQU	b'11111111'
00069 0028 00C7 	Nine	EQU	b'11000111'
00070 0028 00CF 	DotNine	EQU	b'11001111'
00071 0028 00E7 	LetterA	EQU	b'11100111'
00072 0028 00EF 	DotLetterA	EQU	b'11101111'
00073 0028 00F4 	LetterB	EQU	b'11110100'
00074 0028 00FC 	DotLetterB	EQU	b'11111100'
00075 0028 00B1 	LetterC	EQU	b'10110001'
00076 0028 00B9 	DotLetterC	EQU	b'10111001'
00077 0028 	; small c
00078 0028 	;LetterC	EQU	b'01110000'
00079 0028 	;DotLetterC	EQU	b'01111000'
00080 0028 0076 	LetterD	EQU	b'01110110'
00081 0028 007E 	DotLetterD	EQU	b'01111110'
00082 0028 00F1 	LetterE	EQU	b'11110001'
00083 0028 00F9 	DotLetterE	EQU	b'11111001'
00084 0028 00E1 	LetterF	EQU	b'11100001'
00085 0028 00E9 	DotLetterF	EQU	b'11101001'
00086 0028 00B5 	LetterG	EQU	b'10110101'
00087 0028 00BD 	DotLetterG	EQU	b'10111101'
00088 0028 00E6 	LetterH	EQU	b'11100110'
00089 0028 00EE 	DotLetterH	EQU	b'11101110'
00090 0028 00E0 	LetterV	EQU	b'11100000'
00091 0028 00E8 	DotLetterV	EQU	b'11101000'
00092 0028 0046 	LetterW	EQU	b'01000110'
00093 0028 004E 	DotLetterW	EQU	b'01001110'
00094 0028 	;
00095 0028 	;			index
00096 0028 00 08 	Segments	DB	Dark,Dot	;0,1
00097 002A B7 BF 		DB	Zero,DotZero	;2,3
00098 002C 06 0E 		DB	One,DotOne	;4,5
00099 002E 73 7B 		DB	Two,DotTwo	;6,7
00100 0030 57 5F 		DB	Three,DotThree	;8,9
00101 0032 C6 CE 		DB	Four,DotFour	;10,11
00102 0034 D5 DD 		DB	Five,DotFive	;12,13
00103 0036 F5 FD 		DB	Six,DotSix	;14,15
00104 0038 07 0F 		DB	Seven,DotSeven	;16,17
00105 003A F7 FF 		DB	Eight,DotEight	;18,19
00106 003C C7 CF 		DB	Nine,DotNine	;20,21
00107 003E E7 EF 		DB	LetterA,DotLetterA	;22,23
00108 0040 F4 FC 		DB	LetterB,DotLetterB	;24,25
00109 0042 B1 B9 		DB	LetterC,DotLetterC	;26,27
00110 0044 76 7E 		DB	LetterD,DotLetterD	;28,29
00111 0046 F1 F9 		DB	LetterE,DotLetterE	;30,31
00112 0048 E1 E9 		DB	LetterF,DotLetterF	;32,33
00113 004A B5 BD 		DB	LetterG,DotLetterG	;34,35
00114 004C E6 EE 		DB	LetterH,DotLetterH	;36,37
00115 004E E0 E8 		DB	LetterV,DotLetterV	;38,39
00116 0050 46 4E 		DB	LetterW,DotLetterW	;40,41
00117 0052 	;
00118 0052 2000 	PMLED_LeftWht	EQU	0x2000
00119 0052 0800 	PMLED_MidWht	EQU	0x0800
00120 0052 0080 	PMLED_RightWht	EQU	0x0080
CastleGate.asm   "PanelCtrlData.inc"                                     Page: 26
/HPRR Electrical Dept/HPRR.ASM/MasterFiles/

00121 0052 	;
00122 0052 4000 	PMLED_LeftGrn	EQU	0x4000
00123 0052 0010 	PMLED_MidGrn	EQU	0x0010
00124 0052 0040 	PMLED_RightGrn	EQU	0x0040
00125 0052 	;
00126 0052 8000 	PMLED_LeftRed	EQU	0x8000
00127 0052 0020 	PMLED_MidRed	EQU	0x0020
00128 0052 0008 	PMLED_RightRed	EQU	0x0008
00129 0052 	;
00130 0052 1000 	PMLED_L10	EQU	0x1000	;Top Left  0x0C
00131 0052 0400 	PMLED_L11	EQU	0x0400	;Bot Left  0x0A
00132 0052 0001 	PMLED_L12	EQU	0x0001	;Top Right 0x00
00133 0052 0004 	PMLED_L13	EQU	0x0004	;Bot Right 0x02
00134 0052 	;
00135 0052 0100 	PMLED_EastDir	EQU	0x0100	;Left Bi-Color Green
00136 0052 0002 	PMLED_WestDir	EQU	0x0002	;Right Bi-Color Green
00137 0052 0102 	PMLED_E_W_Dir	EQU	0x0102	;Left+Right Bi-Color Green
00138 0052 0202 	PMLED_EastEOB	EQU	0x0202	;Left Bi-Color Red
00139 0052 0300 	PMLED_WestEOB	EQU	0x0300	;Right Bi-Color Red
00140 0052 0200 	PMLED_E_W_EOB	EQU	0x0200	;Left+Right Bi-Color Red
00141 0052 	;
00142 0052 1405 	PMMaskBiC_Ambr	EQU	0x1405	;Mask for L10..L13 (Amber LEDs)
00143 0052 	;
00144 0052 2880 	PMLED_Wht	EQU	PMLED_LeftWht+PMLED_MidWht+PMLED_RightWht
00145 0052 4050 	PMLED_Grn	EQU	PMLED_LeftGrn+PMLED_MidGrn+PMLED_RightGrn
00146 0052 8028 	PMLED_Red	EQU	PMLED_LeftRed+PMLED_MidRed+PMLED_RightRed
00147 0052 1405 	PMLED_Amber	EQU	PMLED_L10+PMLED_L11+PMLED_L12+PMLED_L13
00148 0052 FCFD 	PMLED_AllOn	EQU	0xFCFD	;Bi-Colors are off
00149 0052 	;
00150 0052 8028 	PMLED_Tests	DW	PMLED_Wht
00151 0054 5040 		DW	PMLED_Grn
00152 0056 2880 		DW	PMLED_Red
00153 0058 0001 		DW	PMLED_EastDir
00154 005A 0200 		DW	PMLED_WestDir
00155 005C 0202 		DW	PMLED_EastEOB
00156 005E 0003 		DW	PMLED_WestEOB
00157 0060 0002 		DW	PMLED_E_W_EOB
00158 0062 0514 		DW	PMLED_Amber
00159 0064 	;
00063 0064 	;
00064 0064 	; Block number to Block Module Number table		;Blk#, Blk Name, d'Blk#
00065 0064 FE 	BlkModID	DB	0xFE	;none, BlkNumRDY1 0
00066 0065 FE 		DB	0xFE	;none, BlkNumRDY2 1
00067 0066 FE 		DB	0xFE	;none, BlkNumFYL 2
00068 0067 FE 		DB	0xFE	;none, BlkNum100 3
00069 0068 FE 		DB	0xFE	;none, BlkNum101 4
00070 0069 FE 		DB	0xFE	;none, BlkNum110 5
00071 006A FE 		DB	0xFE	;none, BlkNum111 6
00072 006B FE 		DB	0xFE	;none, BlkNum120 7
00073 006C FE 		DB	0xFE	;none, BlkNum121 8
00074 006D FE 		DB	0xFE	;none, BlkNum130 9
00075 006E FE 		DB	0xFE	;none, BlkNum131 10
00076 006F FE 		DB	0xFE	;none, BlkNum140 11
00077 0070 FE 		DB	0xFE	;none, BlkNum141 12
00078 0071 FE 		DB	0xFE	;none, BlkNumPT1 13
00079 0072 FE 		DB	0xFE	;none, BlkNumPT2 14
00080 0073 FE 		DB	0xFE	;none, BlkNum150 15
00081 0074 FE 		DB	0xFE	;none, BlkNum151 16
00082 0075 FE 		DB	0xFE	;none, BlkNum160 17
00083 0076 FE 		DB	0xFE	;none, BlkNum170 18
00084 0077 FE 		DB	0xFE	;none, BlkNum171 19
00085 0078 FE 		DB	0xFE	;none, BlkNumSYL 20
00086 0079 FE 		DB	0xFE	;none, BlkNum180 21
00087 007A FE 		DB	0xFE	;none, BlkNum190 22
00088 007B FE 		DB	0xFE	;none, BlkNum191 23
00089 007C 14 		DB	0x14	;0x18, BlkNum200 24
00090 007D 15 		DB	0x15	;0x19, BlkNum201 25
00091 007E 13 		DB	0x13	;0x1A, BlkNum202 26
00092 007F 12 		DB	0x12	;0x1B, BlkNum210 27
00093 0080 0F 		DB	0x0F	;0x1C, BlkNum220 28
00094 0081 10 		DB	0x10	;0x1D, BlkNum221 29
00095 0082 11 		DB	0x11	;0x1E, BlkNum222 30
00096 0083 0E 		DB	0x0E	;0x1F, BlkNum230 31
00097 0084 0D 		DB	0x0D	;0x20, BlkNum240 32
00098 0085 0C 		DB	0x0C	;0x21, BlkNum250 33
00099 0086 0B 		DB	0x0B	;0x22, BlkNum251 34
00100 0087 07 		DB	0x07	;0x23, BlkNum260 35
00101 0088 04 		DB	0x04	;0x24, BlkNum270 36
00102 0089 05 		DB	0x05	;0x25, BlkNum271 37
00103 008A 02 		DB	0x02	;0x26, BlkNum280 38
00104 008B 00 		DB	0x00	;0x27, BlkNum290 39
00105 008C 01 		DB	0x01	;0x28, BlkNum291 40
00106 008D 1F 		DB	0x1F	;0x29, BlkNum300 41
00107 008E 1A 		DB	0x1A	;0x2A, BlkNum3101 42
00108 008F 16 		DB	0x16	;0x2B, BlkNum3102 43
00109 0090 1B 		DB	0x1B	;0x2C, BlkNum3111 44
00110 0091 17 		DB	0x17	;0x2D, BlkNum3112 45
00111 0092 1C 		DB	0x1C	;0x2E, BlkNum3121 46
00112 0093 18 		DB	0x18	;0x2F, BlkNum3122 47
00113 0094 1D 		DB	0x1D	;0x30, BlkNum3131 48
00114 0095 19 		DB	0x19	;0x31, BlkNum3132 49
00115 0096 FE 		DB	0xFE	;none, BlkNum320 50
00116 0097 FE 		DB	0xFE	;none, BlkNum390 51
00117 0098 FE 		DB	0xFE	;none, BlkNum330 52
00118 0099 FE 		DB	0xFE	;none, BlkNum380 53
00119 009A FE 		DB	0xFE	;none, BlkNum340 54
00120 009B FE 		DB	0xFE	;none, BlkNum370 55
00121 009C FE 		DB	0xFE	;none, BlkNum350 56
00122 009D FE 		DB	0xFE	;none, BlkNum351 57
00123 009E FE 		DB	0xFE	;none, BlkNum360 58
CastleGate.asm   "Data.inc"                                              Page: 27
/HPRR Electrical Dept/Castlegate/Firmware/

00124 009F FE 		DB	0xFE	;none, BlkNum361 59
00125 00A0 FE 		DB	0xFE	;none, BlkNum362 60
00126 00A1 FE 		DB	0xFE	;none, BlkNum363 61
00127 00A2 FE 		DB	0xFE	;none, BlkNum364 62
00128 00A3 FE 		DB	0xFE	;none, BlkNum365 63
00129 00A4 	;
00130 00A4 FE 		DB	0xFE	;none, BlkNumVY1 64
00131 00A5 FE 		DB	0xFE	;none, BlkNumVY2 65
00132 00A6 FE 		DB	0xFE	;none, BlkNumVY3 66
00133 00A7 FE 		DB	0xFE	;none, BlkNumVY4 67
00134 00A8 FE 		DB	0xFE	;none, BlkNumVY5 68
00135 00A9 FE 		DB	0xFE	;none, BlkNumVY6 69
00136 00AA FE 		DB	0xFE	;none, BlkNumEYF 70
00137 00AB 06 		DB	0x06	;0x47, BlkNumPHL 71
00138 00AC 08 		DB	0x08	;0x48, BlkNumPH1 72
00139 00AD 09 		DB	0x09	;0x49, BlkNumPH2 73
00140 00AE 0A 		DB	0x0A	;0x4A, BlkNumPH3 74
00141 00AF 03 		DB	0x03	;0x4B, BlkNumPH4 75
00142 00B0 1E 		DB	0x1E	;0x4C, BlkMZR Manzanar 76
00143 00B1 FE 		DB	0xFE
00144 00B2 FE 		DB	0xFE
00145 00B3 FE 		DB	0xFE
00146 00B4 	;
00147 00B4 	;
00148 00B4 	;
00149 00B4 	;==========================================================
00150 00B4 	;Individual LEDs
00151 00B4 	;
00152 00B4 041C 	WatchDogLED	EQU	0x041C
00153 00B4 	;
00154 00B4 	;
00155 00B4 1004 	Cab1EastLED	DW	0x0410
00156 00B6 1104 	Cab1WestLED	DW	0x0411
00157 00B8 	;
00158 00B8 1204 	Cab2EastLED	DW	0x0412
00159 00BA 1304 	Cab2WestLED	DW	0x0413
00160 00BC 	;
00161 00BC 1404 	Cab3EastLED	DW	0x0414
00162 00BE 1504 	Cab3WestLED	DW	0x0415
00163 00C0 	;
00164 00C0 1604 	Cab4EastLED	DW	0x0416
00165 00C2 1704 	Cab4WestLED	DW	0x0417
00166 00C4 	;
00167 00C4 1804 	Cab5EastLED	DW	0x0418
00168 00C6 1904 	Cab5WestLED	DW	0x0419
00169 00C8 	;
00170 00C8 1A04 	Cab6EastLED	DW	0x041A	;CT
00171 00CA 1B04 	Cab6WestLED	DW	0x041B
00172 00CC 	;
00173 00CC 	;
00174 00CC 	;
00175 00CC 		include	BlockData.inc

00001 00CC 		PAGE
00002 00CC 		subtitle	BlockData.inc
00003 00CC 	;============================================================================================
00004 00CC 	;
00005 00CC 	;  FileName: BlockData.inc
00006 00CC 	;  Date: 7/26/06
00007 00CC 	;  File Version: 1.0
00008 00CC 	;  
00009 00CC 	;  Author: David M. Flynn
00010 00CC 	;  Company: HPRR
00011 00CC 	;  Project: TCC, Casper Tower
00012 00CC 	;
00013 00CC 	;============================================================================================
00014 00CC 	; Notes:
00015 00CC 	;
00016 00CC 	;in BlockPwrTable each Byte represents one block
00017 00CC 	; bit0 = Cab5
00018 00CC 	; bit1 = Cab4
00019 00CC 	; bit2 = Cab3
00020 00CC 	; bit3 = Cab2
00021 00CC 	; bit4 = Cab1
00022 00CC 	; bit5 = Detect West
00023 00CC 	; bit6 = Detect East
00024 00CC 	; bit7 = Set if any cab is powerd
00025 00CC 	;  if bit 7 is set but bits 0..4 are cleared then look at BlockPwrTable2
00026 00CC 	;  for additional cab bits
00027 00CC 	;
00028 00CC 	;in BlockPwrTable2 each byte represents one block
00029 00CC 	; bit0 = Cab9
00030 00CC 	; bit1 = Cab8
00031 00CC 	; bit2 = Cab7
00032 00CC 	; bit3 = Cab6	Casper Tower (me)
00033 00CC 	; bit4 = not used
00034 00CC 	; bit5 = not used
00035 00CC 	; bit6 = not used
00036 00CC 	; bit7 = not used
00037 00CC 	;
00038 00CC 	;
00039 00CC 	;============================================================================================
00040 00CC 	; Revision History
00041 00CC 	;
00042 00CC 	; 1.0   7/26/06	Customized for Casper Tower
00043 00CC 	; 1.0   1/1/2005	First Reved version.
00044 00CC 	;	Converted bit numbers to fix wiring errer's need for
00045 00CC 	;	BitFlipData.
00046 00CC 	;
00047 00CC 	;============================================================================================
CastleGate.asm   BlockData.inc                                           Page: 28
/HPRR Electrical Dept/Castlegate/Firmware/

00048 00CC 	; Cabs must be used in order, the first "None" encountered stops the scanner.
00049 00CC 	;
00050 00CC 0000 	BPCab1	EQU	0x00
00051 00CC 0002 	BPCab2	EQU	0x02
00052 00CC 0004 	BPCab3	EQU	0x04
00053 00CC 0006 	BPCab4	EQU	0x06
00054 00CC 0008 	BPCab5	EQU	0x08
00055 00CC 000A 	BPCab6	EQU	0x0A
00056 00CC 000C 	BPCab7	EQU	0x0C
00057 00CC 000E 	BPCab8	EQU	0x0E
00058 00CC 0010 	BPCab9	EQU	0x10
00059 00CC 	;
00060 00CC FEFE 	None	EQU	0xFEFE
00061 00CC FDFD 	kSkipThr	EQU	0xFDFD
00062 00CC 	;
00063 00CC 0012 	BPAddBlk	EQU	0x12
00064 00CC 	;
00065 00CC 	; 1 bit for each block 1="I control this block."
00066 00CC 	;
00067 00CC 	BlockOwner
00068 00CC 0080 	MyBlock	EQU	0x80
00069 00CC 0000 	NotMine	EQU	0x00
00070 00CC 	;
00071 00CC 	;
00072 00CC 	; Block Numbers 77 blks 0..76
00073 00CC 	;Use as index into block power table LDX #BlkNumRDY1
00074 00CC 0000 	BlkNumRDY1	EQU	0x00
00075 00CC 00 		DB	NotMine
00076 00CD 0001 	BlkNumRDY2	EQU	0x01
00077 00CD 00 		DB	NotMine
00078 00CE 0002 	BlkNumFYL	EQU	0x02
00079 00CE 00 		DB	NotMine
00080 00CF 0003 	BlkNum100	EQU	0x03
00081 00CF 00 		DB	NotMine
00082 00D0 0004 	BlkNum101	EQU	0x04
00083 00D0 00 		DB	NotMine
00084 00D1 0005 	BlkNum110	EQU	0x05
00085 00D1 00 		DB	NotMine
00086 00D2 0006 	BlkNum111	EQU	0x06
00087 00D2 00 		DB	NotMine
00088 00D3 0007 	BlkNum120	EQU	0x07
00089 00D3 00 		DB	NotMine
00090 00D4 0008 	BlkNum121	EQU	0x08
00091 00D4 00 		DB	NotMine
00092 00D5 0009 	BlkNum130	EQU	0x09
00093 00D5 00 		DB	NotMine
00094 00D6 000A 	BlkNum131	EQU	0x0A
00095 00D6 00 		DB	NotMine
00096 00D7 000B 	BlkNum140	EQU	0x0B
00097 00D7 00 		DB	NotMine
00098 00D8 000C 	BlkNum141	EQU	0x0C
00099 00D8 00 		DB	NotMine
00100 00D9 000D 	BlkNumPT1	EQU	0x0D
00101 00D9 00 		DB	NotMine
00102 00DA 000E 	BlkNumPT2	EQU	0x0E
00103 00DA 00 		DB	NotMine
00104 00DB 000F 	BlkNum150	EQU	0x0F
00105 00DB 00 		DB	NotMine
00106 00DC 0010 	BlkNum151	EQU	0x10
00107 00DC 00 		DB	NotMine
00108 00DD 0011 	BlkNum160	EQU	0x11
00109 00DD 00 		DB	NotMine
00110 00DE 0012 	BlkNum170	EQU	0x12
00111 00DE 00 		DB	NotMine
00112 00DF 0013 	BlkNum171	EQU	0x13
00113 00DF 00 		DB	NotMine
00114 00E0 0014 	BlkNumSYL	EQU	0x14
00115 00E0 00 		DB	NotMine
00116 00E1 0015 	BlkNum180	EQU	0x15
00117 00E1 00 		DB	NotMine
00118 00E2 0016 	BlkNum190	EQU	0x16
00119 00E2 00 		DB	NotMine
00120 00E3 0017 	BlkNum191	EQU	0x17
00121 00E3 00 		DB	NotMine
00122 00E4 0018 	BlkNum200	EQU	0x18
00123 00E4 00 		DB	NotMine
00124 00E5 0019 	BlkNum201	EQU	0x19
00125 00E5 00 		DB	NotMine
00126 00E6 001A 	BlkNum202	EQU	0x1A
00127 00E6 00 		DB	NotMine
00128 00E7 001B 	BlkNum210	EQU	0x1B
00129 00E7 00 		DB	NotMine
00130 00E8 001C 	BlkNum220	EQU	0x1C
00131 00E8 00 		DB	NotMine
00132 00E9 001D 	BlkNum221	EQU	0x1D
00133 00E9 00 		DB	NotMine
00134 00EA 001E 	BlkNum222	EQU	0x1E
00135 00EA 00 		DB	NotMine
00136 00EB 001F 	BlkNum230	EQU	0x1F
00137 00EB 00 		DB	NotMine
00138 00EC 0020 	BlkNum240	EQU	0x20
00139 00EC 00 		DB	NotMine
00140 00ED 0021 	BlkNum250	EQU	0x21
00141 00ED 00 		DB	NotMine
00142 00EE 0022 	BlkNum251	EQU	0x22	;34
00143 00EE 00 		DB	NotMine
00144 00EF 0023 	BlkNum260	EQU	0x23
00145 00EF 00 		DB	NotMine
00146 00F0 0024 	BlkNum270	EQU	0x24
00147 00F0 00 		DB	NotMine
CastleGate.asm   BlockData.inc                                           Page: 29
/HPRR Electrical Dept/Castlegate/Firmware/

00148 00F1 0025 	BlkNum271	EQU	0x25	;37
00149 00F1 00 		DB	NotMine
00150 00F2 0026 	BlkNum280	EQU	0x26
00151 00F2 00 		DB	NotMine
00152 00F3 0027 	BlkNum290	EQU	0x27
00153 00F3 00 		DB	NotMine
00154 00F4 0028 	BlkNum291	EQU	0x28
00155 00F4 00 		DB	NotMine
00156 00F5 0029 	BlkNum300	EQU	0x29
00157 00F5 00 		DB	NotMine
00158 00F6 002A 	BlkNum3101	EQU	0x2A
00159 00F6 00 		DB	NotMine
00160 00F7 002B 	BlkNum3102	EQU	0x2B
00161 00F7 00 		DB	NotMine
00162 00F8 002C 	BlkNum3111	EQU	0x2C
00163 00F8 00 		DB	NotMine
00164 00F9 002D 	BlkNum3112	EQU	0x2D
00165 00F9 00 		DB	NotMine
00166 00FA 002E 	BlkNum3121	EQU	0x2E
00167 00FA 00 		DB	NotMine
00168 00FB 002F 	BlkNum3122	EQU	0x2F
00169 00FB 00 		DB	NotMine
00170 00FC 0030 	BlkNum3131	EQU	0x30
00171 00FC 00 		DB	NotMine
00172 00FD 0031 	BlkNum3132	EQU	0x31
00173 00FD 00 		DB	NotMine
00174 00FE 0032 	BlkNum320	EQU	0x32
00175 00FE 00 		DB	NotMine
00176 00FF 0033 	BlkNum390	EQU	0x33	;aka 321
00177 00FF 00 		DB	NotMine
00178 0100 0034 	BlkNum330	EQU	0x34
00179 0100 00 		DB	NotMine
00180 0101 0035 	BlkNum380	EQU	0x35	;aka 331
00181 0101 00 		DB	NotMine
00182 0102 0036 	BlkNum340	EQU	0x36
00183 0102 00 		DB	NotMine
00184 0103 0037 	BlkNum370	EQU	0x37	;aka 341
00185 0103 00 		DB	NotMine
00186 0104 0038 	BlkNum350	EQU	0x38	;aka 340 part2
00187 0104 00 		DB	NotMine
00188 0105 0039 	BlkNum351	EQU	0x39	;aka 342
00189 0105 00 		DB	NotMine
00190 0106 003A 	BlkNum360	EQU	0x3A	;aka 350
00191 0106 00 		DB	NotMine
00192 0107 003B 	BlkNum361	EQU	0x3B	;aka 351
00193 0107 00 		DB	NotMine
00194 0108 003C 	BlkNum362	EQU	0x3C	;aka 352
00195 0108 00 		DB	NotMine
00196 0109 003D 	BlkNum363	EQU	0x3D	;aka 353
00197 0109 00 		DB	NotMine
00198 010A 003E 	BlkNum364	EQU	0x3E	;aka 354
00199 010A 00 		DB	NotMine
00200 010B 003F 	BlkNum365	EQU	0x3F	;aka 355
00201 010B 00 		DB	NotMine
00202 010C 0040 	BlkNumVY1	EQU	0x40	;upper vista
00203 010C 00 		DB	NotMine
00204 010D 0041 	BlkNumVY2	EQU	0x41
00205 010D 00 		DB	NotMine
00206 010E 0042 	BlkNumVY3	EQU	0x42
00207 010E 00 		DB	NotMine
00208 010F 0043 	BlkNumVY4	EQU	0x43
00209 010F 00 		DB	NotMine
00210 0110 0044 	BlkNumVY5	EQU	0x44
00211 0110 00 		DB	NotMine
00212 0111 0045 	BlkNumVY6	EQU	0x45
00213 0111 00 		DB	NotMine
00214 0112 0046 	BlkNumEYF	EQU	0x46
00215 0112 00 		DB	NotMine
00216 0113 0047 	BlkNumPHL	EQU	0x47	;71,Pinehurst Lead
00217 0113 80 		DB	MyBlock
00218 0114 0048 	BlkNumPH1	EQU	0x48	;72,Pinehurst 1
00219 0114 80 		DB	MyBlock
00220 0115 0049 	BlkNumPH2	EQU	0x49	;73
00221 0115 80 		DB	MyBlock
00222 0116 004A 	BlkNumPH3	EQU	0x4A	;74
00223 0116 80 		DB	MyBlock
00224 0117 004B 	BlkNumPH4	EQU	0x4B	;75
00225 0117 80 		DB	MyBlock
00226 0118 004C 	BlkNumMZR	EQU	0x4C	;76
00227 0118 00 		DB	NotMine
00228 0119 	;
00229 0119 	; Block Power relay data 64 blks 0..63
00230 0119 	; Numbers shown are Inputs Add 0x0400 to find the Output
00231 0119 	; Note: Cabs must be assigned sequencially, first (None) ends scan.
00232 0119 FEFE 	BlkPwrRDY1	DW	None	;Cab1 BLK00
00233 011B FEFE 		DW	None	;Cab2
00234 011D FEFE 		DW	None	;Cab3
00235 011F FEFE 		DW	None	;Cab4
00236 0121 FEFE 		DW	None	;Cab5
00237 0123 FEFE 		DW	None	;Cab6
00238 0125 FEFE 		DW	None	;Cab7
00239 0127 FEFE 		DW	None	;Cab8
00240 0129 FEFE 		DW	None	;Cab9
00241 012B 	;
00242 012B FEFE 	BlkPwrRDY2	DW	None	;Cab1 BLK01
00243 012D FEFE 		DW	None	;Cab2
00244 012F FEFE 		DW	None	;Cab3
00245 0131 FEFE 		DW	None	;Cab4
00246 0133 FEFE 		DW	None	;Cab5
00247 0135 FEFE 		DW	None	;Cab6
CastleGate.asm   BlockData.inc                                           Page: 30
/HPRR Electrical Dept/Castlegate/Firmware/

00248 0137 FEFE 		DW	None	;Cab7
00249 0139 FEFE 		DW	None	;Cab8
00250 013B FEFE 		DW	None	;Cab9
00251 013D 	;
00252 013D FEFE 	BlkPwrFYL	DW	None	;Cab1 BLK02
00253 013F FEFE 		DW	None	;Cab2
00254 0141 FEFE 		DW	None	;Cab3
00255 0143 FEFE 		DW	None	;Cab4
00256 0145 FEFE 		DW	None	;Cab5
00257 0147 FEFE 		DW	None	;Cab6 AT
00258 0149 FEFE 		DW	None	;Cab7 VY
00259 014B FEFE 		DW	None	;Cab8 WY
00260 014D FEFE 		DW	None	;Cab9 DO
00261 014F 	;
00262 014F FEFE 	BlkPwr100	DW	None	;Cab1 BLK03
00263 0151 FEFE 		DW	None	;Cab2
00264 0153 FEFE 		DW	None	;Cab3
00265 0155 FEFE 		DW	None	;Cab4
00266 0157 FEFE 		DW	None	;Cab5
00267 0159 FEFE 		DW	None	;Cab6
00268 015B FEFE 		DW	None	;Cab7
00269 015D FEFE 		DW	None	;Cab8
00270 015F FEFE 		DW	None	;Cab9
00271 0161 	;
00272 0161 FEFE 	BlkPwr101	DW	None	;Cab1 BLK04
00273 0163 FEFE 		DW	None	;Cab2
00274 0165 FEFE 		DW	None	;Cab3
00275 0167 FEFE 		DW	None	;Cab4
00276 0169 FEFE 		DW	None	;Cab5
00277 016B FEFE 		DW	None	;Cab6
00278 016D FEFE 		DW	None	;Cab7
00279 016F FEFE 		DW	None	;Cab8
00280 0171 FEFE 		DW	None	;Cab9
00281 0173 	;
00282 0173 FEFE 	BlkPwr110	DW	None	;Cab1 BLK05
00283 0175 FEFE 		DW	None	;Cab2
00284 0177 FEFE 		DW	None	;Cab3
00285 0179 FEFE 		DW	None	;Cab4
00286 017B FEFE 		DW	None	;Cab5
00287 017D FEFE 		DW	None	;Cab6
00288 017F FEFE 		DW	None	;Cab7
00289 0181 FEFE 		DW	None	;Cab8
00290 0183 FEFE 		DW	None	;Cab9
00291 0185 	;
00292 0185 FEFE 	BlkPwr111	DW	None	;Cab1 BLK06
00293 0187 FEFE 		DW	None	;Cab2
00294 0189 FEFE 		DW	None	;Cab3
00295 018B FEFE 		DW	None	;Cab4
00296 018D FEFE 		DW	None	;Cab5
00297 018F FEFE 		DW	None	;Cab6
00298 0191 FEFE 		DW	None	;Cab7
00299 0193 FEFE 		DW	None	;Cab8
00300 0195 FEFE 		DW	None	;Cab9
00301 0197 	;
00302 0197 FEFE 	BlkPwr120	DW	None	;Cab1 BLK07
00303 0199 FEFE 		DW	None	;Cab2
00304 019B FEFE 		DW	None	;Cab3
00305 019D FEFE 		DW	None	;Cab4
00306 019F FEFE 		DW	None	;Cab5
00307 01A1 FEFE 		DW	None	;Cab6
00308 01A3 FEFE 		DW	None	;Cab7
00309 01A5 FEFE 		DW	None	;Cab8
00310 01A7 FEFE 		DW	None	;Cab9
00311 01A9 	;
00312 01A9 FEFE 	BlkPwr121	DW	None	;Cab1 BLK08
00313 01AB FEFE 		DW	None	;Cab2
00314 01AD FEFE 		DW	None	;Cab3
00315 01AF FEFE 		DW	None	;Cab4
00316 01B1 FEFE 		DW	None	;Cab5
00317 01B3 FEFE 		DW	None	;Cab6
00318 01B5 FEFE 		DW	None	;Cab7
00319 01B7 FEFE 		DW	None	;Cab8
00320 01B9 FEFE 		DW	None	;Cab9
00321 01BB 	;
00322 01BB FEFE 	BlkPwr130	DW	None	;Cab1 BLK09
00323 01BD FEFE 		DW	None	;Cab2
00324 01BF FEFE 		DW	None	;Cab3
00325 01C1 FEFE 		DW	None	;Cab4
00326 01C3 FEFE 		DW	None	;Cab5
00327 01C5 FEFE 		DW	None	;Cab6
00328 01C7 FEFE 		DW	None	;Cab7
00329 01C9 FEFE 		DW	None	;Cab8
00330 01CB FEFE 		DW	None	;Cab9
00331 01CD 	;
00332 01CD FEFE 	BlkPwr131	DW	None	;Cab1 BLK10
00333 01CF FEFE 		DW	None	;Cab2
00334 01D1 FEFE 		DW	None	;Cab3
00335 01D3 FEFE 		DW	None	;Cab4
00336 01D5 FEFE 		DW	None	;Cab5
00337 01D7 FEFE 		DW	None	;Cab6
00338 01D9 FEFE 		DW	None	;Cab7
00339 01DB FEFE 		DW	None	;Cab8
00340 01DD FEFE 		DW	None	;Cab9
00341 01DF 	;
00342 01DF FEFE 	BlkPwr140	DW	None	;Cab1 BLK11
00343 01E1 FEFE 		DW	None	;Cab2
00344 01E3 FEFE 		DW	None	;Cab3
00345 01E5 FEFE 		DW	None	;Cab4
00346 01E7 FEFE 		DW	None	;Cab5
00347 01E9 FEFE 		DW	None	;Cab6
CastleGate.asm   BlockData.inc                                           Page: 31
/HPRR Electrical Dept/Castlegate/Firmware/

00348 01EB FEFE 		DW	None	;Cab7
00349 01ED FEFE 		DW	None	;Cab8
00350 01EF FEFE 		DW	None	;Cab9
00351 01F1 	;
00352 01F1 FEFE 	BlkPwr141	DW	None	;Cab1 BLK12
00353 01F3 FEFE 		DW	None	;Cab2
00354 01F5 FEFE 		DW	None	;Cab3
00355 01F7 FEFE 		DW	None	;Cab4
00356 01F9 FEFE 		DW	None	;Cab5
00357 01FB FEFE 		DW	None	;Cab6
00358 01FD FEFE 		DW	None	;Cab7
00359 01FF FEFE 		DW	None	;Cab8
00360 0201 FEFE 		DW	None	;Cab9
00361 0203 	;
00362 0203 FEFE 	BlkPwrPT1	DW	None	;Cab1 BLK13
00363 0205 FEFE 		DW	None	;Cab2
00364 0207 FEFE 		DW	None	;Cab3
00365 0209 FEFE 		DW	None	;Cab4
00366 020B FEFE 		DW	None	;Cab5
00367 020D FEFE 		DW	None	;Cab6
00368 020F FEFE 		DW	None	;Cab7
00369 0211 FEFE 		DW	None	;Cab8
00370 0213 FEFE 		DW	None	;Cab9
00371 0215 	;
00372 0215 FEFE 	BlkPwrPT2	DW	None	;Cab1 BLK14
00373 0217 FEFE 		DW	None	;Cab2
00374 0219 FEFE 		DW	None	;Cab3
00375 021B FEFE 		DW	None	;Cab4
00376 021D FEFE 		DW	None	;Cab5
00377 021F FEFE 		DW	None	;Cab6
00378 0221 FEFE 		DW	None	;Cab7
00379 0223 FEFE 		DW	None	;Cab8
00380 0225 FEFE 		DW	None	;Cab9
00381 0227 	;
00382 0227 FEFE 	BlkPwr150	DW	None	;Cab1
00383 0229 FEFE 		DW	None	;Cab2
00384 022B FEFE 		DW	None	;Cab3
00385 022D FEFE 		DW	None	;Cab4
00386 022F FEFE 		DW	None	;Cab5
00387 0231 FEFE 		DW	None	;Cab6
00388 0233 FEFE 		DW	None	;Cab7
00389 0235 FEFE 		DW	None	;Cab8
00390 0237 FEFE 		DW	None	;Cab9
00391 0239 	;
00392 0239 FEFE 	BlkPwr151	DW	None	;Cab1
00393 023B FEFE 		DW	None	;Cab2
00394 023D FEFE 		DW	None	;Cab3
00395 023F FEFE 		DW	None	;Cab4
00396 0241 FEFE 		DW	None	;Cab5
00397 0243 FEFE 		DW	None	;Cab6
00398 0245 FEFE 		DW	None	;Cab7
00399 0247 FEFE 		DW	None	;Cab8
00400 0249 FEFE 		DW	None	;Cab9
00401 024B 	;
00402 024B FEFE 	BlkPwr160	DW	None	;Cab1
00403 024D FEFE 		DW	None	;Cab2
00404 024F FEFE 		DW	None	;Cab3
00405 0251 FEFE 		DW	None	;Cab4
00406 0253 FEFE 		DW	None	;Cab5
00407 0255 FEFE 		DW	None	;Cab6
00408 0257 FEFE 		DW	None	;Cab7
00409 0259 FEFE 		DW	None	;Cab8
00410 025B FEFE 		DW	None	;Cab9
00411 025D 	;
00412 025D FEFE 	BlkPwr170	DW	None	;Cab1
00413 025F FEFE 		DW	None	;Cab2
00414 0261 FEFE 		DW	None	;Cab3
00415 0263 FEFE 		DW	None	;Cab4
00416 0265 FEFE 		DW	None	;Cab5
00417 0267 FEFE 		DW	None	;Cab6
00418 0269 FEFE 		DW	None	;Cab7
00419 026B FEFE 		DW	None	;Cab8
00420 026D FEFE 		DW	None	;Cab9
00421 026F 	;
00422 026F FEFE 	BlkPwr171	DW	None	;Cab1
00423 0271 FEFE 		DW	None	;Cab2
00424 0273 FEFE 		DW	None	;Cab3
00425 0275 FEFE 		DW	None	;Cab4
00426 0277 FEFE 		DW	None	;Cab5
00427 0279 FEFE 		DW	None	;Cab6
00428 027B FEFE 		DW	None	;Cab7
00429 027D FEFE 		DW	None	;Cab8
00430 027F FEFE 		DW	None	;Cab9
00431 0281 	;
00432 0281 FEFE 	BlkPwrSYL	DW	None	;0x204E	;Cab1
00433 0283 FEFE 		DW	None	;0x2021	;Cab2
00434 0285 FEFE 		DW	None	;0x213F	;Cab3
00435 0287 FEFE 		DW	None	;0x2133	;Cab4
00436 0289 FEFE 		DW	None	;0x2178	;Cab5
00437 028B FEFE 		DW	None	;Cab6
00438 028D FEFE 		DW	None	;Cab7
00439 028F FEFE 		DW	None	;Cab8
00440 0291 FEFE 		DW	None	;Cab9
00441 0293 	;
00442 0293 FEFE 	BlkPwr180	DW	None	;Cab1
00443 0295 FEFE 		DW	None	;Cab2
00444 0297 FEFE 		DW	None	;Cab3
00445 0299 FEFE 		DW	None	;Cab4
00446 029B FEFE 		DW	None	;Cab5
00447 029D FEFE 		DW	None	;Cab6
CastleGate.asm   BlockData.inc                                           Page: 32
/HPRR Electrical Dept/Castlegate/Firmware/

00448 029F FEFE 		DW	None	;Cab7
00449 02A1 FEFE 		DW	None	;Cab8
00450 02A3 FEFE 		DW	None	;Cab9
00451 02A5 	;
00452 02A5 FEFE 	BlkPwr190	DW	None	;Cab1
00453 02A7 FEFE 		DW	None	;Cab2
00454 02A9 FEFE 		DW	None	;Cab3
00455 02AB FEFE 		DW	None	;Cab4
00456 02AD FEFE 		DW	None	;Cab5
00457 02AF FEFE 		DW	None	;Cab6
00458 02B1 FEFE 		DW	None	;Cab7
00459 02B3 FEFE 		DW	None	;Cab8
00460 02B5 FEFE 		DW	None	;Cab9
00461 02B7 	;
00462 02B7 FEFE 	BlkPwr191	DW	None	;Cab1
00463 02B9 FEFE 		DW	None	;Cab2
00464 02BB FEFE 		DW	None	;Cab3
00465 02BD FEFE 		DW	None	;Cab4
00466 02BF FEFE 		DW	None	;Cab5
00467 02C1 FEFE 		DW	None	;Cab6
00468 02C3 FEFE 		DW	None	;Cab7
00469 02C5 FEFE 		DW	None	;Cab8
00470 02C7 FEFE 		DW	None	;Cab9
00471 02C9 	;
00472 02C9 FEFE 	BlkPwr200	DW	None	;Cab1
00473 02CB FEFE 		DW	None	;Cab2
00474 02CD FEFE 		DW	None	;Cab3
00475 02CF FEFE 		DW	None	;Cab4
00476 02D1 FEFE 		DW	None	;Cab5
00477 02D3 FEFE 		DW	None	;Cab6
00478 02D5 FEFE 		DW	None	;Cab7
00479 02D7 FEFE 		DW	None	;Cab8
00480 02D9 FEFE 		DW	None	;Cab9
00481 02DB 	;
00482 02DB FEFE 	BlkPwr201	DW	None	;Cab1
00483 02DD FEFE 		DW	None	;Cab2
00484 02DF FEFE 		DW	None	;Cab3
00485 02E1 FEFE 		DW	None	;Cab4
00486 02E3 FEFE 		DW	None	;Cab5
00487 02E5 FEFE 		DW	None	;Cab6
00488 02E7 FEFE 		DW	None	;Cab7
00489 02E9 FEFE 		DW	None	;Cab8
00490 02EB FEFE 		DW	None	;Cab9
00491 02ED 	;
00492 02ED FEFE 	BlkPwr202	DW	None	;Cab1
00493 02EF FEFE 		DW	None	;Cab2
00494 02F1 FEFE 		DW	None	;Cab3
00495 02F3 FEFE 		DW	None	;Cab4
00496 02F5 FEFE 		DW	None	;Cab5
00497 02F7 FEFE 		DW	None	;Cab6
00498 02F9 FEFE 		DW	None	;Cab7
00499 02FB FEFE 		DW	None	;Cab8
00500 02FD FEFE 		DW	None	;Cab9
00501 02FF 	;
00502 02FF FEFE 	BlkPwr210	DW	None	;Cab1
00503 0301 FEFE 		DW	None	;Cab2
00504 0303 FEFE 		DW	None	;Cab3
00505 0305 FEFE 		DW	None	;Cab4
00506 0307 FEFE 		DW	None	;Cab5
00507 0309 FEFE 		DW	None	;Cab6
00508 030B FEFE 		DW	None	;Cab7
00509 030D FEFE 		DW	None	;Cab8
00510 030F FEFE 		DW	None	;Cab9
00511 0311 	;
00512 0311 FEFE 	BlkPwr220	DW	None	;Cab1
00513 0313 FEFE 		DW	None	;Cab2
00514 0315 FEFE 		DW	None	;Cab3
00515 0317 FEFE 		DW	None	;Cab4
00516 0319 FEFE 		DW	None	;Cab5
00517 031B FEFE 		DW	None	;Cab6
00518 031D FEFE 		DW	None	;Cab7
00519 031F FEFE 		DW	None	;Cab8
00520 0321 FEFE 		DW	None	;Cab9
00521 0323 	;
00522 0323 FEFE 	BlkPwr221	DW	None	;Cab1
00523 0325 FEFE 		DW	None	;Cab2
00524 0327 FEFE 		DW	None	;Cab3
00525 0329 FEFE 		DW	None	;Cab4
00526 032B FEFE 		DW	None	;Cab5
00527 032D FEFE 		DW	None	;Cab6
00528 032F FEFE 		DW	None	;Cab7
00529 0331 FEFE 		DW	None	;Cab8
00530 0333 FEFE 		DW	None	;Cab9
00531 0335 	;
00532 0335 FEFE 	BlkPwr222	DW	None	;Cab1
00533 0337 FEFE 		DW	None	;Cab2
00534 0339 FEFE 		DW	None	;Cab3
00535 033B FEFE 		DW	None	;Cab4
00536 033D FEFE 		DW	None	;Cab5
00537 033F FEFE 		DW	None	;Cab6
00538 0341 FEFE 		DW	None	;Cab7
00539 0343 FEFE 		DW	None	;Cab8
00540 0345 FEFE 		DW	None	;Cab9
00541 0347 	;
00542 0347 FEFE 	BlkPwr230	DW	None	;Cab1
00543 0349 FEFE 		DW	None	;Cab2
00544 034B FEFE 		DW	None	;Cab3
00545 034D FEFE 		DW	None	;Cab4
00546 034F FEFE 		DW	None	;Cab5
00547 0351 FEFE 		DW	None	;Cab6
CastleGate.asm   BlockData.inc                                           Page: 33
/HPRR Electrical Dept/Castlegate/Firmware/

00548 0353 FEFE 		DW	None	;Cab7
00549 0355 FEFE 		DW	None	;Cab8
00550 0357 FEFE 		DW	None	;Cab9
00551 0359 	;
00552 0359 FEFE 	BlkPwr240	DW	None	;Cab1
00553 035B FEFE 		DW	None	;Cab2
00554 035D FEFE 		DW	None	;Cab3
00555 035F FEFE 		DW	None	;Cab4
00556 0361 FEFE 		DW	None	;Cab5
00557 0363 FEFE 		DW	None	;Cab6
00558 0365 FEFE 		DW	None	;Cab7
00559 0367 FEFE 		DW	None	;Cab8
00560 0369 FEFE 		DW	None	;Cab9
00561 036B 	;
00562 036B FEFE 	BlkPwr250	DW	None	;Cab1
00563 036D FEFE 		DW	None	;Cab2
00564 036F FEFE 		DW	None	;Cab3
00565 0371 FEFE 		DW	None	;Cab4
00566 0373 FEFE 		DW	None	;Cab5
00567 0375 FEFE 		DW	None	;Cab6
00568 0377 FEFE 		DW	None	;Cab7
00569 0379 FEFE 		DW	None	;Cab8
00570 037B FEFE 		DW	None	;Cab9
00571 037D 	;
00572 037D FEFE 	BlkPwr251	DW	None	;Cab1
00573 037F FEFE 		DW	None	;Cab2
00574 0381 FEFE 		DW	None	;Cab3
00575 0383 FEFE 		DW	None	;Cab4
00576 0385 FEFE 		DW	None	;Cab5
00577 0387 FEFE 		DW	None	;Cab6
00578 0389 FEFE 		DW	None	;Cab7
00579 038B FEFE 		DW	None	;Cab8
00580 038D FEFE 		DW	None	;Cab9
00581 038F 	;
00582 038F FEFE 	BlkPwr260	DW	None	;Cab1
00583 0391 FEFE 		DW	None	;Cab2
00584 0393 FEFE 		DW	None	;Cab3
00585 0395 FEFE 		DW	None	;Cab4
00586 0397 FEFE 		DW	None	;Cab5
00587 0399 FEFE 		DW	None	;Cab6
00588 039B FEFE 		DW	None	;Cab7
00589 039D FEFE 		DW	None	;Cab8
00590 039F FEFE 		DW	None	;Cab9
00591 03A1 	;
00592 03A1 FEFE 	BlkPwr270	DW	None	;Cab1
00593 03A3 FEFE 		DW	None	;Cab2
00594 03A5 FEFE 		DW	None	;Cab3
00595 03A7 FEFE 		DW	None	;Cab4
00596 03A9 FEFE 		DW	None	;Cab5
00597 03AB FEFE 		DW	None	;Cab6
00598 03AD FEFE 		DW	None	;Cab7
00599 03AF FEFE 		DW	None	;Cab8
00600 03B1 FEFE 		DW	None	;Cab9
00601 03B3 	;
00602 03B3 FEFE 	BlkPwr271	DW	None	;Cab1
00603 03B5 FEFE 		DW	None	;Cab2
00604 03B7 FEFE 		DW	None	;Cab3
00605 03B9 FEFE 		DW	None	;Cab4
00606 03BB FEFE 		DW	None	;Cab5
00607 03BD FEFE 		DW	None	;Cab6
00608 03BF FEFE 		DW	None	;Cab7
00609 03C1 FEFE 		DW	None	;Cab8
00610 03C3 FEFE 		DW	None	;Cab9
00611 03C5 	;
00612 03C5 FEFE 	BlkPwr280	DW	None	;Cab1
00613 03C7 FEFE 		DW	None	;Cab2
00614 03C9 FEFE 		DW	None	;Cab3
00615 03CB FEFE 		DW	None	;Cab4
00616 03CD FEFE 		DW	None	;Cab5
00617 03CF FEFE 		DW	None	;Cab6
00618 03D1 FEFE 		DW	None	;Cab7
00619 03D3 FEFE 		DW	None	;Cab8
00620 03D5 FEFE 		DW	None	;Cab9
00621 03D7 	;
00622 03D7 FEFE 	BlkPwr290	DW	None	;Cab1
00623 03D9 FEFE 		DW	None	;Cab2
00624 03DB FEFE 		DW	None	;Cab3
00625 03DD FEFE 		DW	None	;Cab4
00626 03DF FEFE 		DW	None	;Cab5
00627 03E1 FEFE 		DW	None	;Cab6
00628 03E3 FEFE 		DW	None	;Cab7
00629 03E5 FEFE 		DW	None	;Cab8
00630 03E7 FEFE 		DW	None	;Cab9
00631 03E9 	;
00632 03E9 FEFE 	BlkPwr291	DW	None	;Cab1
00633 03EB FEFE 		DW	None	;Cab2
00634 03ED FEFE 		DW	None	;Cab3
00635 03EF FEFE 		DW	None	;Cab4
00636 03F1 FEFE 		DW	None	;Cab5
00637 03F3 FEFE 		DW	None	;Cab6
00638 03F5 FEFE 		DW	None	;Cab7
00639 03F7 FEFE 		DW	None	;Cab8
00640 03F9 FEFE 		DW	None	;Cab9
00641 03FB 	;
00642 03FB FEFE 	BlkPwr300	DW	None	;Cab1
00643 03FD FEFE 		DW	None	;Cab2
00644 03FF FEFE 		DW	None	;Cab3
00645 0401 FEFE 		DW	None	;Cab4
00646 0403 FEFE 		DW	None	;Cab5
00647 0405 FEFE 		DW	None	;Cab6
CastleGate.asm   BlockData.inc                                           Page: 34
/HPRR Electrical Dept/Castlegate/Firmware/

00648 0407 FEFE 		DW	None	;Cab7
00649 0409 FEFE 		DW	None	;Cab8
00650 040B FEFE 		DW	None	;Cab9
00651 040D 	;
00652 040D FEFE 	BlkPwr3101	DW	None	;Cab1
00653 040F FEFE 		DW	None	;Cab2
00654 0411 FEFE 		DW	None	;Cab3
00655 0413 FEFE 		DW	None	;Cab4
00656 0415 FEFE 		DW	None	;Cab5
00657 0417 FEFE 		DW	None	;Cab6
00658 0419 FEFE 		DW	None	;Cab7
00659 041B FEFE 		DW	None	;Cab8
00660 041D FEFE 		DW	None	;Cab9
00661 041F 	;
00662 041F FEFE 	BlkPwr3102	DW	None	;Cab1
00663 0421 FEFE 		DW	None	;Cab2
00664 0423 FEFE 		DW	None	;Cab3
00665 0425 FEFE 		DW	None	;Cab4
00666 0427 FEFE 		DW	None	;Cab5
00667 0429 FEFE 		DW	None	;Cab6
00668 042B FEFE 		DW	None	;Cab7
00669 042D FEFE 		DW	None	;Cab8
00670 042F FEFE 		DW	None	;Cab9
00671 0431 	;
00672 0431 FEFE 	BlkPwr3111	DW	None	;Cab1
00673 0433 FEFE 		DW	None	;Cab2
00674 0435 FEFE 		DW	None	;Cab3
00675 0437 FEFE 		DW	None	;Cab4
00676 0439 FEFE 		DW	None	;Cab5
00677 043B FEFE 		DW	None	;Cab6
00678 043D FEFE 		DW	None	;Cab7
00679 043F FEFE 		DW	None	;Cab8
00680 0441 FEFE 		DW	None	;Cab9
00681 0443 	;
00682 0443 FEFE 	BlkPwr3112	DW	None	;Cab1
00683 0445 FEFE 		DW	None	;Cab2
00684 0447 FEFE 		DW	None	;Cab3
00685 0449 FEFE 		DW	None	;Cab4
00686 044B FEFE 		DW	None	;Cab5
00687 044D FEFE 		DW	None	;Cab6
00688 044F FEFE 		DW	None	;Cab7
00689 0451 FEFE 		DW	None	;Cab8
00690 0453 FEFE 		DW	None	;Cab9
00691 0455 	;
00692 0455 FEFE 	BlkPwr3121	DW	None	;Cab1
00693 0457 FEFE 		DW	None	;Cab2
00694 0459 FEFE 		DW	None	;Cab3
00695 045B FEFE 		DW	None	;Cab4
00696 045D FEFE 		DW	None	;Cab5
00697 045F FEFE 		DW	None	;Cab6
00698 0461 FEFE 		DW	None	;Cab7
00699 0463 FEFE 		DW	None	;Cab8
00700 0465 FEFE 		DW	None	;Cab9
00701 0467 	;
00702 0467 FEFE 	BlkPwr3122	DW	None	;Cab1
00703 0469 FEFE 		DW	None	;Cab2
00704 046B FEFE 		DW	None	;Cab3
00705 046D FEFE 		DW	None	;Cab4
00706 046F FEFE 		DW	None	;Cab5
00707 0471 FEFE 		DW	None	;Cab6
00708 0473 FEFE 		DW	None	;Cab7
00709 0475 FEFE 		DW	None	;Cab8
00710 0477 FEFE 		DW	None	;Cab9
00711 0479 	;
00712 0479 FEFE 	BlkPwr3131	DW	None	;Cab1
00713 047B FEFE 		DW	None	;Cab2
00714 047D FEFE 		DW	None	;Cab3
00715 047F FEFE 		DW	None	;Cab4
00716 0481 FEFE 		DW	None	;Cab5
00717 0483 FEFE 		DW	None	;Cab6
00718 0485 FEFE 		DW	None	;Cab7
00719 0487 FEFE 		DW	None	;Cab8
00720 0489 FEFE 		DW	None	;Cab9
00721 048B 	;
00722 048B FEFE 	BlkPwr3132	DW	None	;Cab1
00723 048D FEFE 		DW	None	;Cab2
00724 048F FEFE 		DW	None	;Cab3
00725 0491 FEFE 		DW	None	;Cab4
00726 0493 FEFE 		DW	None	;Cab5
00727 0495 FEFE 		DW	None	;Cab6
00728 0497 FEFE 		DW	None	;Cab7
00729 0499 FEFE 		DW	None	;Cab8
00730 049B FEFE 		DW	None	;Cab9
00731 049D 	;
00732 049D FEFE 	BlkPwr320	DW	None	;Cab1
00733 049F FEFE 		DW	None	;Cab2
00734 04A1 FEFE 		DW	None	;Cab3
00735 04A3 FEFE 		DW	None	;Cab4
00736 04A5 FEFE 		DW	None	;Cab5
00737 04A7 FEFE 		DW	None	;Cab6
00738 04A9 FEFE 		DW	None	;Cab7
00739 04AB FEFE 		DW	None	;Cab8
00740 04AD FEFE 		DW	None	;Cab9
00741 04AF 	;
00742 04AF FEFE 	BlkPwr390	DW	None	;Cab1 aka 321
00743 04B1 FEFE 		DW	None	;Cab2
00744 04B3 FEFE 		DW	None	;Cab3
00745 04B5 FEFE 		DW	None	;Cab4
00746 04B7 FEFE 		DW	None	;Cab5
00747 04B9 FEFE 		DW	None	;Cab6
CastleGate.asm   BlockData.inc                                           Page: 35
/HPRR Electrical Dept/Castlegate/Firmware/

00748 04BB FEFE 		DW	None	;Cab7
00749 04BD FEFE 		DW	None	;Cab8
00750 04BF FEFE 		DW	None	;Cab9
00751 04C1 	;
00752 04C1 FEFE 	BlkPwr330	DW	None	;Cab1
00753 04C3 FEFE 		DW	None	;Cab2
00754 04C5 FEFE 		DW	None	;Cab3
00755 04C7 FEFE 		DW	None	;Cab4
00756 04C9 FEFE 		DW	None	;Cab5
00757 04CB FEFE 		DW	None	;Cab6
00758 04CD FEFE 		DW	None	;Cab7
00759 04CF FEFE 		DW	None	;Cab8
00760 04D1 FEFE 		DW	None	;Cab9
00761 04D3 	;
00762 04D3 FEFE 	BlkPwr380	DW	None	;Cab1 aka 331
00763 04D5 FEFE 		DW	None	;Cab2
00764 04D7 FEFE 		DW	None	;Cab3
00765 04D9 FEFE 		DW	None	;Cab4
00766 04DB FEFE 		DW	None	;Cab5
00767 04DD FEFE 		DW	None	;Cab6
00768 04DF FEFE 		DW	None	;Cab7
00769 04E1 FEFE 		DW	None	;Cab8
00770 04E3 FEFE 		DW	None	;Cab9
00771 04E5 	;
00772 04E5 FEFE 	BlkPwr340	DW	None	;Cab1
00773 04E7 FEFE 		DW	None	;Cab2
00774 04E9 FEFE 		DW	None	;Cab3
00775 04EB FEFE 		DW	None	;Cab4
00776 04ED FEFE 		DW	None	;Cab5
00777 04EF FEFE 		DW	None	;Cab6
00778 04F1 FEFE 		DW	None	;Cab7
00779 04F3 FEFE 		DW	None	;Cab8
00780 04F5 FEFE 		DW	None	;Cab9
00781 04F7 	;
00782 04F7 FEFE 	BlkPwr370	DW	None	;Cab1 aka 341
00783 04F9 FEFE 		DW	None	;Cab2
00784 04FB FEFE 		DW	None	;Cab3
00785 04FD FEFE 		DW	None	;Cab4
00786 04FF FEFE 		DW	None	;Cab5
00787 0501 FEFE 		DW	None	;Cab6
00788 0503 FEFE 		DW	None	;Cab7
00789 0505 FEFE 		DW	None	;Cab8
00790 0507 FEFE 		DW	None	;Cab9
00791 0509 	;
00792 0509 FEFE 	BlkPwr350	DW	None	;Cab1 aka 340 part2
00793 050B FEFE 		DW	None	;Cab2
00794 050D FEFE 		DW	None	;Cab3
00795 050F FEFE 		DW	None	;Cab4
00796 0511 FEFE 		DW	None	;Cab5
00797 0513 FEFE 		DW	None	;Cab6 Dawson Tower
00798 0515 FEFE 		DW	None	;Cab7
00799 0517 FEFE 		DW	None	;Cab8
00800 0519 FEFE 		DW	None	;Cab9
00801 051B 	;
00802 051B FEFE 	BlkPwr351	DW	None	;Cab1 aka 342
00803 051D FEFE 		DW	None	;Cab2
00804 051F FEFE 		DW	None	;Cab3
00805 0521 FEFE 		DW	None	;Cab4
00806 0523 FEFE 		DW	None	;Cab5
00807 0525 FEFE 		DW	None	;Cab6 Dawson Tower
00808 0527 FEFE 		DW	None	;Cab7
00809 0529 FEFE 		DW	None	;Cab8
00810 052B FEFE 		DW	None	;Cab9
00811 052D 	;
00812 052D FEFE 	BlkPwr360	DW	None	;Cab1 aka 350
00813 052F FEFE 		DW	None	;Cab2
00814 0531 FEFE 		DW	None	;Cab3
00815 0533 FEFE 		DW	None	;Cab4
00816 0535 FEFE 		DW	None	;Cab5
00817 0537 FEFE 		DW	None	;Cab6
00818 0539 FEFE 		DW	None	;Cab7
00819 053B FEFE 		DW	None	;Cab8
00820 053D FEFE 		DW	None	;Cab9
00821 053F 	;
00822 053F FEFE 	BlkPwr361	DW	None	;Cab1 aka 351
00823 0541 FEFE 		DW	None	;Cab2
00824 0543 FEFE 		DW	None	;Cab3
00825 0545 FEFE 		DW	None	;Cab4
00826 0547 FEFE 		DW	None	;Cab5
00827 0549 FEFE 		DW	None	;Cab6
00828 054B FEFE 		DW	None	;Cab7
00829 054D FEFE 		DW	None	;Cab8
00830 054F FEFE 		DW	None	;Cab9
00831 0551 	;
00832 0551 FEFE 	BlkPwr362	DW	None	;Cab1 aka 352
00833 0553 FEFE 		DW	None	;Cab2
00834 0555 FEFE 		DW	None	;Cab3
00835 0557 FEFE 		DW	None	;Cab4
00836 0559 FEFE 		DW	None	;Cab5
00837 055B FEFE 		DW	None	;Cab6
00838 055D FEFE 		DW	None	;Cab7
00839 055F FEFE 		DW	None	;Cab8
00840 0561 FEFE 		DW	None	;Cab9
00841 0563 	;
00842 0563 FEFE 	BlkPwr363	DW	None	;Cab1 aka 353
00843 0565 FEFE 		DW	None	;Cab2
00844 0567 FEFE 		DW	None	;Cab3
00845 0569 FEFE 		DW	None	;Cab4
00846 056B FEFE 		DW	None	;Cab5
00847 056D FEFE 		DW	None	;Cab6
CastleGate.asm   BlockData.inc                                           Page: 36
/HPRR Electrical Dept/Castlegate/Firmware/

00848 056F FEFE 		DW	None	;Cab7
00849 0571 FEFE 		DW	None	;Cab8
00850 0573 FEFE 		DW	None	;Cab9
00851 0575 	;
00852 0575 FEFE 	BlkPwr364	DW	None	;Cab1 aka 354
00853 0577 FEFE 		DW	None	;Cab2
00854 0579 FEFE 		DW	None	;Cab3
00855 057B FEFE 		DW	None	;Cab4
00856 057D FEFE 		DW	None	;Cab5
00857 057F FEFE 		DW	None	;Cab6
00858 0581 FEFE 		DW	None	;Cab7
00859 0583 FEFE 		DW	None	;Cab8
00860 0585 FEFE 		DW	None	;Cab9
00861 0587 	;
00862 0587 FEFE 	BlkPwr365	DW	None	;Cab1 aka 355
00863 0589 FEFE 		DW	None	;Cab2
00864 058B FEFE 		DW	None	;Cab3
00865 058D FEFE 		DW	None	;Cab4
00866 058F FEFE 		DW	None	;Cab5
00867 0591 FEFE 		DW	None	;Cab6
00868 0593 FEFE 		DW	None	;Cab7
00869 0595 FEFE 		DW	None	;Cab8
00870 0597 FEFE 		DW	None	;Cab9
00871 0599 	;
00872 0599 FEFE 	BlkPwrVY1	DW	None	;Cab1 Upper Vista
00873 059B FEFE 		DW	None	;Cab2
00874 059D FEFE 		DW	None	;Cab3
00875 059F FEFE 		DW	None	;Cab4
00876 05A1 FEFE 		DW	None	;Cab5
00877 05A3 FEFE 		DW	None	;Cab6 AT
00878 05A5 FEFE 		DW	None	;Cab7 VY
00879 05A7 FEFE 		DW	None	;Cab8 WY
00880 05A9 FEFE 		DW	None	;Cab9
00881 05AB 	;
00882 05AB FEFE 	BlkPwrVY2	DW	None	;Cab1 Upper Vista
00883 05AD FEFE 		DW	None	;Cab2
00884 05AF FEFE 		DW	None	;Cab3
00885 05B1 FEFE 		DW	None	;Cab4
00886 05B3 FEFE 		DW	None	;Cab5
00887 05B5 FEFE 		DW	None	;Cab6 AT
00888 05B7 FEFE 		DW	None	;Cab7 VY
00889 05B9 FEFE 		DW	None	;Cab8 WY
00890 05BB FEFE 		DW	None	;Cab9
00891 05BD 	;
00892 05BD FEFE 	BlkPwrVY3	DW	None	;Cab1 Upper Vista
00893 05BF FEFE 		DW	None	;Cab2
00894 05C1 FEFE 		DW	None	;Cab3
00895 05C3 FEFE 		DW	None	;Cab4
00896 05C5 FEFE 		DW	None	;Cab5
00897 05C7 FEFE 		DW	None	;Cab6 AT
00898 05C9 FEFE 		DW	None	;Cab7 VY
00899 05CB FEFE 		DW	None	;Cab8 WY
00900 05CD FEFE 		DW	None	;Cab9
00901 05CF 	;
00902 05CF FEFE 	BlkPwrVY4	DW	None	;Cab1 Upper Vista
00903 05D1 FEFE 		DW	None	;Cab2
00904 05D3 FEFE 		DW	None	;Cab3
00905 05D5 FEFE 		DW	None	;Cab4
00906 05D7 FEFE 		DW	None	;Cab5
00907 05D9 FEFE 		DW	None	;Cab6 AT
00908 05DB FEFE 		DW	None	;Cab7 VY
00909 05DD FEFE 		DW	None	;Cab8 WY
00910 05DF FEFE 		DW	None	;Cab9
00911 05E1 	;
00912 05E1 FEFE 	BlkPwrVY5	DW	None	;Cab1 Upper Vista
00913 05E3 FEFE 		DW	None	;Cab2
00914 05E5 FEFE 		DW	None	;Cab3
00915 05E7 FEFE 		DW	None	;Cab4
00916 05E9 FEFE 		DW	None	;Cab5
00917 05EB FEFE 		DW	None	;Cab6 AT
00918 05ED FEFE 		DW	None	;Cab7 VY
00919 05EF FEFE 		DW	None	;Cab8 WY
00920 05F1 FEFE 		DW	None	;Cab9
00921 05F3 	;
00922 05F3 FEFE 	BlkPwrVY6	DW	None	;Cab1 Upper Vista
00923 05F5 FEFE 		DW	None	;Cab2
00924 05F7 FEFE 		DW	None	;Cab3
00925 05F9 FEFE 		DW	None	;Cab4
00926 05FB FEFE 		DW	None	;Cab5
00927 05FD FEFE 		DW	None	;Cab6 AT
00928 05FF FEFE 		DW	None	;Cab7 VY
00929 0601 FEFE 		DW	None	;Cab8 WY
00930 0603 FEFE 		DW	None	;Cab9
00931 0605 	;
00932 0605 FEFE 	BlkPwrEYF	DW	None	;Cab1 BI
00933 0607 FEFE 		DW	None	;Cab2 DS
00934 0609 FEFE 		DW	None	;Cab3 RH
00935 060B FEFE 		DW	None	;Cab4 DO
00936 060D FEFE 		DW	None	;Cab5 WY
00937 060F FEFE 		DW	None	;Cab6 VY
00938 0611 FEFE 		DW	None	;Cab7
00939 0613 FEFE 		DW	None	;Cab8
00940 0615 FEFE 		DW	None	;Cab9
00941 0617 	;
00942 0617 FEFE 	BlkPwrPHL	DW	None	;Cab1
00943 0619 FEFE 		DW	None	;Cab2 
00944 061B FEFE 		DW	None	;Cab3 
00945 061D FEFE 		DW	None	;Cab4 
00946 061F FEFE 		DW	None	;Cab5 
00947 0621 0000 		DW	0x0000	;Cab6 CT
CastleGate.asm   BlockData.inc                                           Page: 37
/HPRR Electrical Dept/Castlegate/Firmware/

00948 0623 FEFE 		DW	None	;Cab7
00949 0625 FEFE 		DW	None	;Cab8
00950 0627 FEFE 		DW	None	;Cab9
00951 0629 	;
00952 0629 FEFE 	BlkPwrPH1	DW	None	;Cab1
00953 062B FEFE 		DW	None	;Cab2 
00954 062D FEFE 		DW	None	;Cab3 
00955 062F FEFE 		DW	None	;Cab4 
00956 0631 FEFE 		DW	None	;Cab5 
00957 0633 0100 		DW	0x0001	;Cab6 CT
00958 0635 FEFE 		DW	None	;Cab7
00959 0637 FEFE 		DW	None	;Cab8
00960 0639 FEFE 		DW	None	;Cab9
00961 063B 	;
00962 063B FEFE 	BlkPwrPH2	DW	None	;Cab1
00963 063D FEFE 		DW	None	;Cab2 
00964 063F FEFE 		DW	None	;Cab3 
00965 0641 FEFE 		DW	None	;Cab4 
00966 0643 FEFE 		DW	None	;Cab5
00967 0645 0200 		DW	0x0002	;Cab6 CT
00968 0647 FEFE 		DW	None	;Cab7
00969 0649 FEFE 		DW	None	;Cab8
00970 064B FEFE 		DW	None	;Cab9
00971 064D 	;
00972 064D FEFE 	BlkPwrPH3	DW	None	;Cab1
00973 064F FEFE 		DW	None	;Cab2 
00974 0651 FEFE 		DW	None	;Cab3 
00975 0653 FEFE 		DW	None	;Cab4 
00976 0655 FEFE 		DW	None	;Cab5 
00977 0657 0300 		DW	0x0003	;Cab6 CT
00978 0659 FEFE 		DW	None	;Cab7
00979 065B FEFE 		DW	None	;Cab8
00980 065D FEFE 		DW	None	;Cab9
00981 065F 	;
00982 065F FEFE 	BlkPwrPH4	DW	None	;Cab1
00983 0661 FEFE 		DW	None	;Cab2 
00984 0663 FEFE 		DW	None	;Cab3 
00985 0665 FEFE 		DW	None	;Cab4 
00986 0667 FEFE 		DW	None	;Cab5 
00987 0669 0400 		DW	0x0004	;Cab6 CT
00988 066B FEFE 		DW	None	;Cab7
00989 066D FEFE 		DW	None	;Cab8
00990 066F FEFE 		DW	None	;Cab9
00991 0671 	;
00992 0671 FEFE 	BlkMZR	DW	None	;Cab1
00993 0673 FEFE 		DW	None	;Cab2 
00994 0675 FEFE 		DW	None	;Cab3 
00995 0677 FEFE 		DW	None	;Cab4 
00996 0679 FEFE 		DW	None	;Cab5 
00997 067B FEFE 		DW	None	;Cab6 CT
00998 067D FEFE 		DW	None	;Cab7
00999 067F FEFE 		DW	None	;Cab8
01000 0681 FEFE 		DW	None	;Cab9
01001 0683 	;
01002 0683 FFFF 		DW	0xFFFF
01003 0685 	;
01004 0685 	;
01005 0685 	; Block occupied LEDs not connected to block modules
01006 0685 	;
01007 0685 	BlockOccLEDs
01008 0685 	;	DB	BlkNumDM1
01009 0685 	;	DW	0x8428	;Delmar trk 1 occ LED
01010 0685 	;
01011 0685 	;	DB	BlkNumMZR
01012 0685 	;	DW	0x2A02
01013 0685 FF 		DB	EOD
01014 0686 	;
01015 0686 	;--------------------------------------------------------
01016 0686 	; End of block detectors (psuedo SMs)
01017 0686 	;
01018 0686 FE 	EOB_Detectors	DB	low None	;east end detector Blk# 0 (RDY1)
01019 0687 FE 		DB	low None	;west end detector
01020 0688 FE 		DB	low None	;east end detector
01021 0689 FE 		DB	low None	;west end detector
01022 068A FE 		DB	low None	;east end detector
01023 068B FE 		DB	low None	;west end detector
01024 068C FE 		DB	low None	;east end detector
01025 068D FE 		DB	low None	;west end detector
01026 068E FE 		DB	low None	;east end detector
01027 068F FE 		DB	low None	;west end detector
01028 0690 FE 		DB	low None	;east end detector
01029 0691 FE 		DB	low None	;west end detector
01030 0692 FE 		DB	low None	;east end detector
01031 0693 FE 		DB	low None	;west end detector
01032 0694 FE 		DB	low None	;east end detector
01033 0695 FE 		DB	low None	;west end detector
01034 0696 FE 		DB	low None	;east end detector
01035 0697 FE 		DB	low None	;west end detector
01036 0698 FE 		DB	low None	;east end detector
01037 0699 FE 		DB	low None	;west end detector
01038 069A FE 		DB	low None	;east end detector 10 (131)
01039 069B FE 		DB	low None	;west end detector
01040 069C FE 		DB	low None	;east end detector
01041 069D FE 		DB	low None	;west end detector
01042 069E FE 		DB	low None	;east end detector
01043 069F FE 		DB	low None	;west end detector
01044 06A0 FE 		DB	low None	;east end detector
01045 06A1 FE 		DB	low None	;west end detector
01046 06A2 FE 		DB	low None	;east end detector
01047 06A3 FE 		DB	low None	;west end detector
CastleGate.asm   BlockData.inc                                           Page: 38
/HPRR Electrical Dept/Castlegate/Firmware/

01048 06A4 FE 		DB	low None	;east end detector
01049 06A5 FE 		DB	low None	;west end detector
01050 06A6 FE 		DB	low None	;east end detector
01051 06A7 FE 		DB	low None	;west end detector
01052 06A8 FE 		DB	low None	;east end detector
01053 06A9 FE 		DB	low None	;west end detector
01054 06AA FE 		DB	low None	;east end detector
01055 06AB FE 		DB	low None	;west end detector
01056 06AC FE 		DB	low None	;east end detector
01057 06AD FE 		DB	low None	;west end detector
01058 06AE FE 		DB	low None	;east end detector 20 (SYL)
01059 06AF A5 		DB	low d'421'	;west end detector
01060 06B0 FE 		DB	low None	;east end detector
01061 06B1 FE 		DB	low None	;west end detector
01062 06B2 FE 		DB	low None	;east end detector
01063 06B3 FE 		DB	low None	;west end detector
01064 06B4 FE 		DB	low None	;east end detector
01065 06B5 FE 		DB	low None	;west end detector
01066 06B6 FE 		DB	low None	;east end detector
01067 06B7 FE 		DB	low None	;west end detector
01068 06B8 FE 		DB	low None	;east end detector
01069 06B9 FE 		DB	low None	;west end detector
01070 06BA FE 		DB	low None	;east end detector
01071 06BB FE 		DB	low None	;west end detector
01072 06BC FE 		DB	low None	;east end detector
01073 06BD FE 		DB	low None	;west end detector
01074 06BE FE 		DB	low None	;east end detector
01075 06BF FE 		DB	low None	;west end detector
01076 06C0 FE 		DB	low None	;east end detector
01077 06C1 FE 		DB	low None	;west end detector
01078 06C2 FE 		DB	low None	;east end detector 30 (230)
01079 06C3 FE 		DB	low None	;west end detector
01080 06C4 FE 		DB	low None	;east end detector
01081 06C5 FE 		DB	low None	;west end detector
01082 06C6 FE 		DB	low None	;east end detector
01083 06C7 FE 		DB	low None	;west end detector
01084 06C8 A2 		DB	low d'418'	;east end detector 33 (250)
01085 06C9 A0 		DB	low d'416'	;west end detector
01086 06CA A3 		DB	low d'419'	;east end detector 34 (251)
01087 06CB A1 		DB	low d'417'	;west end detector
01088 06CC FE 		DB	low None	;east end detector
01089 06CD FE 		DB	low None	;west end detector
01090 06CE FE 		DB	low None	;east end detector
01091 06CF FE 		DB	low None	;west end detector
01092 06D0 FE 		DB	low None	;east end detector
01093 06D1 FE 		DB	low None	;west end detector
01094 06D2 FE 		DB	low None	;east end detector
01095 06D3 FE 		DB	low None	;west end detector
01096 06D4 9E 		DB	low d'414'	;east end detector 39 (290)
01097 06D5 9C 		DB	low d'412'	;west end detector
01098 06D6 9F 		DB	low d'415'	;east end detector 40 (291)
01099 06D7 9D 		DB	low d'413	;west end detector
01100 06D8 FE 		DB	low None	;east end detector
01101 06D9 FE 		DB	low None	;west end detector
01102 06DA FE 		DB	low None	;east end detector
01103 06DB FE 		DB	low None	;west end detector
01104 06DC FE 		DB	low None	;east end detector
01105 06DD FE 		DB	low None	;west end detector
01106 06DE FE 		DB	low None	;east end detector
01107 06DF FE 		DB	low None	;west end detector
01108 06E0 FE 		DB	low None	;east end detector
01109 06E1 FE 		DB	low None	;west end detector
01110 06E2 FE 		DB	low None	;east end detector
01111 06E3 FE 		DB	low None	;west end detector
01112 06E4 FE 		DB	low None	;east end detector
01113 06E5 FE 		DB	low None	;west end detector
01114 06E6 FE 		DB	low None	;east end detector
01115 06E7 FE 		DB	low None	;west end detector
01116 06E8 FE 		DB	low None	;east end detector
01117 06E9 FE 		DB	low None	;west end detector
01118 06EA FE 		DB	low None	;east end detector 50 (320)
01119 06EB FE 		DB	low None	;west end detector
01120 06EC FE 		DB	low None	;east end detector
01121 06ED FE 		DB	low None	;west end detector
01122 06EE FE 		DB	low None	;east end detector
01123 06EF FE 		DB	low None	;west end detector
01124 06F0 FE 		DB	low None	;east end detector
01125 06F1 FE 		DB	low None	;west end detector
01126 06F2 FE 		DB	low None	;east end detector
01127 06F3 FE 		DB	low None	;west end detector
01128 06F4 FE 		DB	low None	;east end detector
01129 06F5 FE 		DB	low None	;west end detector
01130 06F6 FE 		DB	low None	;east end detector
01131 06F7 FE 		DB	low None	;west end detector
01132 06F8 FE 		DB	low None	;east end detector
01133 06F9 FE 		DB	low None	;west end detector
01134 06FA 96 		DB	low d'406'	;east end detector 58 (360)
01135 06FB 90 		DB	low d'400'	;west end detector
01136 06FC 97 		DB	low d'407'	;east end detector 59 (361)
01137 06FD 91 		DB	low d'401'	;west end detector
01138 06FE 98 		DB	low d'408'	;east end detector 60 (362)
01139 06FF 92 		DB	low d'402'	;west end detector
01140 0700 99 		DB	low d'409'	;east end detector 61 (363)
01141 0701 93 		DB	low d'403'	;west end detector
01142 0702 9A 		DB	low d'410'	;east end detector 62 (364)
01143 0703 94 		DB	low d'404'	;west end detector
01144 0704 9B 		DB	low d'411'	;east end detector 63 (365)
01145 0705 95 		DB	low d'405	;west end detector
01146 0706 FE 		DB	low None	;east end detector 64
01147 0707 FE 		DB	low None	;west end detector
CastleGate.asm   BlockData.inc                                           Page: 39
/HPRR Electrical Dept/Castlegate/Firmware/

01148 0708 FE 		DB	low None	;east end detector 65
01149 0709 FE 		DB	low None	;west end detector
01150 070A FE 		DB	low None	;east end detector 66
01151 070B FE 		DB	low None	;west end detector
01152 070C FE 		DB	low None	;east end detector 67
01153 070D FE 		DB	low None	;west end detector
01154 070E FE 		DB	low None	;east end detector 68
01155 070F FE 		DB	low None	;west end detector
01156 0710 FE 		DB	low None	;east end detector 69
01157 0711 FE 		DB	low None	;west end detector
01158 0712 FE 		DB	low None	;east end detector 70
01159 0713 FE 		DB	low None	;west end detector
01160 0714 FE 		DB	low None	;east end detector 71
01161 0715 FE 		DB	low None	;west end detector
01162 0716 FE 		DB	low None	;east end detector 72
01163 0717 FE 		DB	low None	;west end detector
01164 0718 FE 		DB	low None	;east end detector 73
01165 0719 FE 		DB	low None	;west end detector
01166 071A FE 		DB	low None	;east end detector 74
01167 071B FE 		DB	low None	;west end detector
01168 071C FE 		DB	low None	;east end detector 75
01169 071D FE 		DB	low None	;west end detector
01170 071E FE 		DB	low None	;east end detector 76
01171 071F FE 		DB	low None	;west end detector
01172 0720 FE 		DB	low None	;east end detector 77
01173 0721 FE 		DB	low None	;west end detector
01174 0722 FE 		DB	low None	;east end detector 78
01175 0723 FE 		DB	low None	;west end detector
01176 0724 	;
01177 0724 	; Parallel block data table
01178 0724 	;
01179 0724 	; Use as index into block power table LDX #BlkNumRDY1
01180 0724 	;
01181 0724 00 	ParallelBlks	DB	BlkNumRDY1	;BlkNumRDY1	;0
01182 0725 00 		DB	BlkNumRDY1	;BlkNumRDY2	;1
01183 0726 FF 		DB	0xFF	;none BlkNumFYL	;2
01184 0727 03 		DB	BlkNum100	;BlkNum100 	;3
01185 0728 03 		DB	BlkNum100	;BlkNum101 	;4
01186 0729 05 		DB	BlkNum110	;BlkNum110	;5
01187 072A 05 		DB	BlkNum110	;BlkNum111	;6
01188 072B 07 		DB	BlkNum120	;BlkNum120	;7
01189 072C 07 		DB	BlkNum120	;BlkNum121	;8
01190 072D 09 		DB	BlkNum130	;BlkNum130	;9
01191 072E 09 		DB	BlkNum130	;BlkNum131	;10
01192 072F 0B 		DB	BlkNum140	;BlkNum140	;11
01193 0730 0B 		DB	BlkNum140	;BlkNum141	;12
01194 0731 0D 		DB	BlkNumPT1	;BlkNumPT1	;13
01195 0732 0D 		DB	BlkNumPT1	;BlkNumPT2	;14
01196 0733 0F 		DB	BlkNum150	;BlkNum150	;15
01197 0734 0F 		DB	BlkNum150	;BlkNum151	;16
01198 0735 FF 		DB	0xFF	;BlkNum160	;17
01199 0736 12 		DB	BlkNum170	;BlkNum170	;18
01200 0737 12 		DB	BlkNum170	;BlkNum171	;19
01201 0738 FF 		DB	0xFF	;BlkNumSYL	;20
01202 0739 FF 		DB	0xFF	;BlkNum180	;21
01203 073A 16 		DB	BlkNum190	;BlkNum190	;22
01204 073B 16 		DB	BlkNum190	;BlkNum191	;23
01205 073C 18 		DB	BlkNum200	;BlkNum200	;24
01206 073D 18 		DB	BlkNum200	;BlkNum201	;25
01207 073E 18 		DB	BlkNum200	;BlkNum202	;26
01208 073F FF 		DB	0xFF	;BlkNum210	;27
01209 0740 1C 		DB	BlkNum220	;BlkNum220	;28
01210 0741 1C 		DB	BlkNum220	;BlkNum221	;29
01211 0742 1C 		DB	BlkNum220	;BlkNum222	;30
01212 0743 FF 		DB	0xFF	;BlkNum230	;30
01213 0744 FF 		DB	0xFF	;BlkNum240	;32
01214 0745 21 		DB	BlkNum250	;BlkNum250	;33
01215 0746 21 		DB	BlkNum250	;BlkNum251	;34
01216 0747 FF 		DB	0xFF	;BlkNum260	;35
01217 0748 24 		DB	BlkNum270	;BlkNum270	;36
01218 0749 24 		DB	BlkNum270	;BlkNum271	;37
01219 074A FF 		DB	0xFF	;BlkNum280	;38
01220 074B 27 		DB	BlkNum290	;BlkNum290	;39
01221 074C 27 		DB	BlkNum290	;BlkNum291	;40
01222 074D FF 		DB	0xFF	;BlkNum300	;41
01223 074E 2A 		DB	BlkNum3101	;BlkNum3101	;42
01224 074F 2A 		DB	BlkNum3101	;BlkNum3102	;43
01225 0750 2A 		DB	BlkNum3101	;BlkNum3111	;44
01226 0751 2A 		DB	BlkNum3101	;BlkNum3112	;45
01227 0752 2A 		DB	BlkNum3101	;BlkNum3121	;46
01228 0753 2A 		DB	BlkNum3101	;BlkNum3122	;47
01229 0754 2A 		DB	BlkNum3101	;BlkNum3131	;48
01230 0755 2A 		DB	BlkNum3101	;BlkNum3132	;49
01231 0756 FF 		DB	0xFF	;BlkNum320	;50
01232 0757 FF 		DB	0xFF	;BlkNum390	;51, aka 321
01233 0758 FF 		DB	0xFF	;BlkNum330	;52
01234 0759 FF 		DB	0xFF	;BlkNum380	;53, aka 331
01235 075A FF 		DB	0xFF	;BlkNum340	;54
01236 075B FF 		DB	0xFF	;BlkNum370	;55, aka 341
01237 075C 38 		DB	BlkNum350	;BlkNum350	;56, aka 340 part2
01238 075D 38 		DB	BlkNum350	;BlkNum351	;57, aka 342
01239 075E 3A 		DB	BlkNum360	;BlkNum360	;58, aka 350
01240 075F 3A 		DB	BlkNum360	;BlkNum361	;59, aka 351
01241 0760 3A 		DB	BlkNum360	;BlkNum362	;60, aka 352
01242 0761 3A 		DB	BlkNum360	;BlkNum363	;61, aka 353
01243 0762 3A 		DB	BlkNum360	;BlkNum364	;62, aka 354
01244 0763 3A 		DB	BlkNum360	;BlkNum365	;63, aka 355
01245 0764 FF 		DB	0xFF	;BlkNumVY1	;upper vista
01246 0765 FF 		DB	0xFF	;BlkNumVY2
01247 0766 FF 		DB	0xFF	;BlkNumVY3
CastleGate.asm   BlockData.inc                                           Page: 40
/HPRR Electrical Dept/Castlegate/Firmware/

01248 0767 FF 		DB	0xFF	;BlkNumVY4
01249 0768 FF 		DB	0xFF	;BlkNumVY5
01250 0769 FF 		DB	0xFF	;BlkNumVY6
01251 076A FF 		DB	0xFF	;BlkNumEYF
01252 076B FF 		DB	0xFF	;BlkNumPHL	;71,Pinehurst Lead
01253 076C 48 		DB	BlkNumPH1	;BlkNumPH1	;72,Pinehurst 1
01254 076D 48 		DB	BlkNumPH1	;BlkNumPH2	;73
01255 076E 48 		DB	BlkNumPH1	;BlkNumPH3	;74
01256 076F FF 		DB	0xFF	;BlkNumPH4	;75
01257 0770 FF 		DB	0xFF	;BlkNumMZR	;76
01258 0771 	;
01259 0771 	;;
00176 0771 	;
00177 0771 	; Button Number(1..32) to Block Number
00178 0771 	;
00179 0771 FE 	BtnToBlkNum	DB	0xFE	;Offset, 0 used for debounce
00180 0772 27 		DB	BlkNum290	;Btn 1  Block Module 0
00181 0773 28 		DB	BlkNum291	;Btn 2  Block Module 1
00182 0774 26 		DB	BlkNum280	;Btn 3  Block Module 2
00183 0775 4B 		DB	BlkNumPH4	;Btn 4  Block Module 3
00184 0776 24 		DB	BlkNum270	;Btn 5  Block Module 4
00185 0777 25 		DB	BlkNum271	;Btn 6  Block Module 5
00186 0778 47 		DB	BlkNumPHL	;Btn 7  Block Module 6
00187 0779 23 		DB	BlkNum260	;Btn 8  Block Module 7
00188 077A 48 		DB	BlkNumPH1	;Btn 9  Block Module 8
00189 077B 49 		DB	BlkNumPH2	;Btn 10 Block Module 9
00190 077C 4A 		DB	BlkNumPH3	;Btn 11 Block Module 10
00191 077D 22 		DB	BlkNum251	;Btn 12 Block Module 11
00192 077E 21 		DB	BlkNum250	;Btn 13 Block Module 12
00193 077F 20 		DB	BlkNum240	;Btn 14 Block Module 13
00194 0780 1F 		DB	BlkNum230	;Btn 15 Block Module 14
00195 0781 1C 		DB	BlkNum220	;Btn 16 Block Module 15
00196 0782 1D 		DB	BlkNum221	;Btn 17 Block Module 16
00197 0783 1E 		DB	BlkNum222	;Btn 18 Block Module 17
00198 0784 1B 		DB	BlkNum210	;Btn 19 Block Module 18
00199 0785 1A 		DB	BlkNum202	;Btn 20 Block Module 19
00200 0786 18 		DB	BlkNum200	;Btn 21 Block Module 20
00201 0787 19 		DB	BlkNum201	;Btn 22 Block Module 21
00202 0788 2B 		DB	BlkNum3102	;Btn 23 Block Module 22
00203 0789 2D 		DB	BlkNum3112	;Btn 24 Block Module 23
00204 078A 2F 		DB	BlkNum3122	;Btn 25 Block Module 24
00205 078B 31 		DB	BlkNum3132	;Btn 26 Block Module 25
00206 078C 2A 		DB	BlkNum3101	;Btn 27 Block Module 26
00207 078D 2C 		DB	BlkNum3111	;Btn 28 Block Module 27
00208 078E 2E 		DB	BlkNum3121	;Btn 29 Block Module 28
00209 078F 30 		DB	BlkNum3131	;Btn 30 Block Module 29
00210 0790 4C 		DB	BlkNumMZR	;Btn 31 Block Module 30
00211 0791 29 		DB	BlkNum300	;Btn 32 Block Module 31
00212 0792 	;	
00213 0792 	;==============================================================================================
00214 0792 	; Block number to Symbol for Throttle 6		;Blk#, Blk Name, d'Blk#
00215 0792 E7 	BlkThr6ToSym	DB	LetterA	;0x00, BlkNumRDY1 0
00216 0793 E7 		DB	LetterA	;0x01, BlkNumRDY2 1
00217 0794 E7 		DB	LetterA	;0x02, BlkNumFYL  2
00218 0795 E7 		DB	LetterA	;0x03, BlkNum100  3
00219 0796 E7 		DB	LetterA	;0x04, BlkNum101  4
00220 0797 E7 		DB	LetterA	;0x05, BlkNum110  5
00221 0798 E7 		DB	LetterA	;0x06, BlkNum111  6
00222 0799 E7 		DB	LetterA	;0x07, BlkNum120  7
00223 079A E7 		DB	LetterA	;0x08, BlkNum121  8
00224 079B E7 		DB	LetterA	;0x09, BlkNum130  9
00225 079C E7 		DB	LetterA	;0x0A, BlkNum131 10
00226 079D E7 		DB	LetterA	;0x0B, BlkNum140 11
00227 079E E7 		DB	LetterA	;0x0C, BlkNum141 12
00228 079F E7 		DB	LetterA	;0x0D, BlkNumPT1 13
00229 07A0 E7 		DB	LetterA	;0x0E, BlkNumPT2 14
00230 07A1 E7 		DB	LetterA	;0x0F, BlkNum150 15
00231 07A2 E7 		DB	LetterA	;0x10, BlkNum151 16
00232 07A3 F4 		DB	LetterB	;0x11, BlkNum160 17
00233 07A4 F4 		DB	LetterB	;0x12, BlkNum170 18
00234 07A5 F4 		DB	LetterB	;0x13, BlkNum171 19
00235 07A6 F4 		DB	LetterB	;0x14, BlkNumSYL 20
00236 07A7 F4 		DB	LetterB	;0x15, BlkNum180 21
00237 07A8 F4 		DB	LetterB	;0x16, BlkNum190 22
00238 07A9 F4 		DB	LetterB	;0x17, BlkNum191 23
00239 07AA F4 		DB	LetterB	;0x18, BlkNum200 24
00240 07AB F4 		DB	LetterB	;0x19, BlkNum201 25
00241 07AC B1 		DB	LetterC	;0x1A, BlkNum202 26
00242 07AD B1 		DB	LetterC	;0x1B, BlkNum210 27
00243 07AE B1 		DB	LetterC	;0x1C, BlkNum220 28
00244 07AF B1 		DB	LetterC	;0x1D, BlkNum221 29
00245 07B0 B1 		DB	LetterC	;0x1E, BlkNum222 30
00246 07B1 B1 		DB	LetterC	;0x1F, BlkNum230 31
00247 07B2 B1 		DB	LetterC	;0x20, BlkNum240 32
00248 07B3 B1 		DB	LetterC	;0x21, BlkNum250 33
00249 07B4 B1 		DB	LetterC	;0x22, BlkNum251 34
00250 07B5 B1 		DB	LetterC	;0x23, BlkNum260 35
00251 07B6 B1 		DB	LetterC	;0x24, BlkNum270 36
00252 07B7 B1 		DB	LetterC	;0x25, BlkNum271 37
00253 07B8 B1 		DB	LetterC	;0x26, BlkNum280 38
00254 07B9 B1 		DB	LetterC	;0x27, BlkNum290 39
00255 07BA B1 		DB	LetterC	;0x28, BlkNum291 40
00256 07BB B1 		DB	LetterC	;0x29, BlkNum300 41
00257 07BC 76 		DB	LetterD	;0x2A, BlkNum3101 42
00258 07BD 76 		DB	LetterD	;0x2B, BlkNum3102 43
00259 07BE 76 		DB	LetterD	;0x2C, BlkNum3111 44
00260 07BF 76 		DB	LetterD	;0x2D, BlkNum3112 45
00261 07C0 76 		DB	LetterD	;0x2E, BlkNum3121 46
00262 07C1 76 		DB	LetterD	;0x2F, BlkNum3122 47
00263 07C2 76 		DB	LetterD	;0x30, BlkNum3131 48
CastleGate.asm   "Data.inc"                                              Page: 41
/HPRR Electrical Dept/Castlegate/Firmware/

00264 07C3 76 		DB	LetterD	;0x31, BlkNum3132 49
00265 07C4 76 		DB	LetterD	;0x32, BlkNum320 50
00266 07C5 76 		DB	LetterD	;0x33, BlkNum390 51
00267 07C6 76 		DB	LetterD	;0x34, BlkNum330 52
00268 07C7 76 		DB	LetterD	;0x35, BlkNum380 53
00269 07C8 76 		DB	LetterD	;0x36, BlkNum340 54
00270 07C9 76 		DB	LetterD	;0x37, BlkNum370 55
00271 07CA 76 		DB	LetterD	;0x38, BlkNum350 56
00272 07CB 76 		DB	LetterD	;0x39, BlkNum351 57
00273 07CC 76 		DB	LetterD	;0x3A, BlkNum360 58
00274 07CD 76 		DB	LetterD	;0x3B, BlkNum361 59
00275 07CE 76 		DB	LetterD	;0x3C, BlkNum362 60
00276 07CF 76 		DB	LetterD	;0x3D, BlkNum363 61
00277 07D0 76 		DB	LetterD	;0x3E, BlkNum364 62
00278 07D1 76 		DB	LetterD	;0x3F, BlkNum365 63
00279 07D2 E7 		DB	LetterA	;none, BlkNumVY1 64
00280 07D3 E7 		DB	LetterA	;none, BlkNumVY2 65
00281 07D4 E7 		DB	LetterA	;none, BlkNumVY3 66
00282 07D5 E7 		DB	LetterA	;none, BlkNumVY4 67
00283 07D6 E7 		DB	LetterA	;none, BlkNumVY5 68
00284 07D7 E7 		DB	LetterA	;none, BlkNumVY6 69
00285 07D8 E7 		DB	LetterA	;none, BlkNumEYF 70
00286 07D9 B1 		DB	LetterC	;0x47, BlkNumPHL 71
00287 07DA B1 		DB	LetterC	;0x48, BlkNumPH1 72
00288 07DB B1 		DB	LetterC	;0x49, BlkNumPH2 73
00289 07DC B1 		DB	LetterC	;0x4A, BlkNumPH3 74
00290 07DD B1 		DB	LetterC	;0x4B, BlkNumPH4 75
00291 07DE B1 		DB	LetterC	;0x4C, BlkMZR Manzanar 76
00292 07DF F1 		DB	LetterE
00293 07E0 F1 		DB	LetterE
00294 07E1 	;
00295 07E1 	;	
00296 07E1 	; Block number to Symbol for Throttle 7		;Blk#, Blk Name, d'Blk#
00297 07E1 F1 	BlkThr7ToSym	DB	LetterE	;0x00, BlkNumRDY1 0
00298 07E2 F1 		DB	LetterE	;0x01, BlkNumRDY2 1
00299 07E3 E0 		DB	LetterV	;0x02, BlkNumFYL  2
00300 07E4 F1 		DB	LetterE	;0x03, BlkNum100  3
00301 07E5 F1 		DB	LetterE	;0x04, BlkNum101  4
00302 07E6 F1 		DB	LetterE	;0x05, BlkNum110  5
00303 07E7 F1 		DB	LetterE	;0x06, BlkNum111  6
00304 07E8 F1 		DB	LetterE	;0x07, BlkNum120  7
00305 07E9 F1 		DB	LetterE	;0x08, BlkNum121  8
00306 07EA F1 		DB	LetterE	;0x09, BlkNum130  9
00307 07EB F1 		DB	LetterE	;0x0A, BlkNum131 10
00308 07EC F1 		DB	LetterE	;0x0B, BlkNum140 11
00309 07ED F1 		DB	LetterE	;0x0C, BlkNum141 12
00310 07EE F1 		DB	LetterE	;0x0D, BlkNumPT1 13
00311 07EF F1 		DB	LetterE	;0x0E, BlkNumPT2 14
00312 07F0 F4 		DB	LetterB	;0x0F, BlkNum150 15
00313 07F1 F4 		DB	LetterB	;0x10, BlkNum151 16
00314 07F2 F1 		DB	LetterE	;0x11, BlkNum160 17
00315 07F3 F1 		DB	LetterE	;0x12, BlkNum170 18
00316 07F4 F1 		DB	LetterE	;0x13, BlkNum171 19
00317 07F5 F1 		DB	LetterE	;0x14, BlkNumSYL 20
00318 07F6 F1 		DB	LetterE	;0x15, BlkNum180 21
00319 07F7 F1 		DB	LetterE	;0x16, BlkNum190 22
00320 07F8 F1 		DB	LetterE	;0x17, BlkNum191 23
00321 07F9 B1 		DB	LetterC	;0x18, BlkNum200 24
00322 07FA B1 		DB	LetterC	;0x19, BlkNum201 25
00323 07FB F4 		DB	LetterB	;0x1A, BlkNum202 26
00324 07FC F1 		DB	LetterE	;0x1B, BlkNum210 27
00325 07FD F1 		DB	LetterE	;0x1C, BlkNum220 28
00326 07FE F1 		DB	LetterE	;0x1D, BlkNum221 29
00327 07FF F1 		DB	LetterE	;0x1E, BlkNum222 30
00328 0800 F1 		DB	LetterE	;0x1F, BlkNum230 31
00329 0801 F1 		DB	LetterE	;0x20, BlkNum240 32
00330 0802 F1 		DB	LetterE	;0x21, BlkNum250 33
00331 0803 F1 		DB	LetterE	;0x22, BlkNum251 34
00332 0804 F1 		DB	LetterE	;0x23, BlkNum260 35
00333 0805 F1 		DB	LetterE	;0x24, BlkNum270 36
00334 0806 F1 		DB	LetterE	;0x25, BlkNum271 37
00335 0807 F1 		DB	LetterE	;0x26, BlkNum280 38
00336 0808 F1 		DB	LetterE	;0x27, BlkNum290 39
00337 0809 F1 		DB	LetterE	;0x28, BlkNum291 40
00338 080A F1 		DB	LetterE	;0x29, BlkNum300 41
00339 080B B1 		DB	LetterC	;0x2A, BlkNum3101 42
00340 080C B1 		DB	LetterC	;0x2B, BlkNum3102 43
00341 080D B1 		DB	LetterC	;0x2C, BlkNum3111 44
00342 080E B1 		DB	LetterC	;0x2D, BlkNum3112 45
00343 080F B1 		DB	LetterC	;0x2E, BlkNum3121 46
00344 0810 B1 		DB	LetterC	;0x2F, BlkNum3122 47
00345 0811 B1 		DB	LetterC	;0x30, BlkNum3131 48
00346 0812 B1 		DB	LetterC	;0x31, BlkNum3132 49
00347 0813 F1 		DB	LetterE	;0x32, BlkNum320 50
00348 0814 F1 		DB	LetterE	;0x33, BlkNum390 51
00349 0815 F1 		DB	LetterE	;0x34, BlkNum330 52
00350 0816 F1 		DB	LetterE	;0x35, BlkNum380 53
00351 0817 F1 		DB	LetterE	;0x36, BlkNum340 54
00352 0818 F1 		DB	LetterE	;0x37, BlkNum370 55
00353 0819 F1 		DB	LetterE	;0x38, BlkNum350 56
00354 081A F1 		DB	LetterE	;0x39, BlkNum351 57
00355 081B F1 		DB	LetterE	;0x3A, BlkNum360 58
00356 081C F1 		DB	LetterE	;0x3B, BlkNum361 59
00357 081D F1 		DB	LetterE	;0x3C, BlkNum362 60
00358 081E F1 		DB	LetterE	;0x3D, BlkNum363 61
00359 081F F1 		DB	LetterE	;0x3E, BlkNum364 62
00360 0820 F1 		DB	LetterE	;0x3F, BlkNum365 63
00361 0821 E0 		DB	LetterV	;none, BlkNumVY1 64
00362 0822 E0 		DB	LetterV	;none, BlkNumVY2 65
00363 0823 E0 		DB	LetterV	;none, BlkNumVY3 66
CastleGate.asm   "Data.inc"                                              Page: 42
/HPRR Electrical Dept/Castlegate/Firmware/

00364 0824 E0 		DB	LetterV	;none, BlkNumVY4 67
00365 0825 E0 		DB	LetterV	;none, BlkNumVY5 68
00366 0826 E0 		DB	LetterV	;none, BlkNumVY6 69
00367 0827 E0 		DB	LetterV	;none, BlkNumEYF 70
00368 0828 F1 		DB	LetterE	;0x47, BlkNumPHL 71
00369 0829 F1 		DB	LetterE	;0x48, BlkNumPH1 72
00370 082A F1 		DB	LetterE	;0x49, BlkNumPH2 73
00371 082B F1 		DB	LetterE	;0x4A, BlkNumPH3 74
00372 082C F1 		DB	LetterE	;0x4B, BlkNumPH4 75
00373 082D F1 		DB	LetterE	;0x4C, BlkMZR Manzanar 76
00374 082E F1 		DB	LetterE
00375 082F F1 		DB	LetterE
00376 0830 	;
00377 0830 	;	
00378 0830 	; Block number to Symbol for Throttle 8		;Blk#, Blk Name, d'Blk#
00379 0830 F1 	BlkThr8ToSym	DB	LetterE	;0x00, BlkNumRDY1 0
00380 0831 F1 		DB	LetterE	;0x01, BlkNumRDY2 1
00381 0832 46 		DB	LetterW	;0x02, BlkNumFYL  2
00382 0833 F1 		DB	LetterE	;0x03, BlkNum100  3
00383 0834 F1 		DB	LetterE	;0x04, BlkNum101  4
00384 0835 F1 		DB	LetterE	;0x05, BlkNum110  5
00385 0836 F1 		DB	LetterE	;0x06, BlkNum111  6
00386 0837 F1 		DB	LetterE	;0x07, BlkNum120  7
00387 0838 F1 		DB	LetterE	;0x08, BlkNum121  8
00388 0839 F1 		DB	LetterE	;0x09, BlkNum130  9
00389 083A F1 		DB	LetterE	;0x0A, BlkNum131 10
00390 083B F1 		DB	LetterE	;0x0B, BlkNum140 11
00391 083C F1 		DB	LetterE	;0x0C, BlkNum141 12
00392 083D F1 		DB	LetterE	;0x0D, BlkNumPT1 13
00393 083E F1 		DB	LetterE	;0x0E, BlkNumPT2 14
00394 083F F1 		DB	LetterE	;0x0F, BlkNum150 15
00395 0840 F1 		DB	LetterE	;0x10, BlkNum151 16
00396 0841 F1 		DB	LetterE	;0x11, BlkNum160 17
00397 0842 F1 		DB	LetterE	;0x12, BlkNum170 18
00398 0843 F1 		DB	LetterE	;0x13, BlkNum171 19
00399 0844 F1 		DB	LetterE	;0x14, BlkNumSYL 20
00400 0845 F1 		DB	LetterE	;0x15, BlkNum180 21
00401 0846 F1 		DB	LetterE	;0x16, BlkNum190 22
00402 0847 F1 		DB	LetterE	;0x17, BlkNum191 23
00403 0848 F1 		DB	LetterE	;0x18, BlkNum200 24
00404 0849 F1 		DB	LetterE	;0x19, BlkNum201 25
00405 084A F1 		DB	LetterE	;0x1A, BlkNum202 26
00406 084B F1 		DB	LetterE	;0x1B, BlkNum210 27
00407 084C F1 		DB	LetterE	;0x1C, BlkNum220 28
00408 084D F1 		DB	LetterE	;0x1D, BlkNum221 29
00409 084E F1 		DB	LetterE	;0x1E, BlkNum222 30
00410 084F F1 		DB	LetterE	;0x1F, BlkNum230 31
00411 0850 F1 		DB	LetterE	;0x20, BlkNum240 32
00412 0851 F1 		DB	LetterE	;0x21, BlkNum250 33
00413 0852 F1 		DB	LetterE	;0x22, BlkNum251 34
00414 0853 F1 		DB	LetterE	;0x23, BlkNum260 35
00415 0854 F1 		DB	LetterE	;0x24, BlkNum270 36
00416 0855 F1 		DB	LetterE	;0x25, BlkNum271 37
00417 0856 F1 		DB	LetterE	;0x26, BlkNum280 38
00418 0857 F1 		DB	LetterE	;0x27, BlkNum290 39
00419 0858 F1 		DB	LetterE	;0x28, BlkNum291 40
00420 0859 F1 		DB	LetterE	;0x29, BlkNum300 41
00421 085A B5 		DB	LetterG	;0x2A, BlkNum3101 42
00422 085B B5 		DB	LetterG	;0x2B, BlkNum3102 43
00423 085C B5 		DB	LetterG	;0x2C, BlkNum3111 44
00424 085D B5 		DB	LetterG	;0x2D, BlkNum3112 45
00425 085E B5 		DB	LetterG	;0x2E, BlkNum3121 46
00426 085F B5 		DB	LetterG	;0x2F, BlkNum3122 47
00427 0860 B5 		DB	LetterG	;0x30, BlkNum3131 48
00428 0861 B5 		DB	LetterG	;0x31, BlkNum3132 49
00429 0862 F1 		DB	LetterE	;0x32, BlkNum320 50
00430 0863 F1 		DB	LetterE	;0x33, BlkNum390 51
00431 0864 F1 		DB	LetterE	;0x34, BlkNum330 52
00432 0865 F1 		DB	LetterE	;0x35, BlkNum380 53
00433 0866 F1 		DB	LetterE	;0x36, BlkNum340 54
00434 0867 F1 		DB	LetterE	;0x37, BlkNum370 55
00435 0868 F1 		DB	LetterE	;0x38, BlkNum350 56
00436 0869 F1 		DB	LetterE	;0x39, BlkNum351 57
00437 086A F1 		DB	LetterE	;0x3A, BlkNum360 58
00438 086B F1 		DB	LetterE	;0x3B, BlkNum361 59
00439 086C F1 		DB	LetterE	;0x3C, BlkNum362 60
00440 086D F1 		DB	LetterE	;0x3D, BlkNum363 61
00441 086E F1 		DB	LetterE	;0x3E, BlkNum364 62
00442 086F F1 		DB	LetterE	;0x3F, BlkNum365 63
00443 0870 46 		DB	LetterW	;none, BlkNumVY1 64
00444 0871 46 		DB	LetterW	;none, BlkNumVY2 65
00445 0872 46 		DB	LetterW	;none, BlkNumVY3 66
00446 0873 46 		DB	LetterW	;none, BlkNumVY4 67
00447 0874 46 		DB	LetterW	;none, BlkNumVY5 68
00448 0875 46 		DB	LetterW	;none, BlkNumVY6 69
00449 0876 46 		DB	LetterW	;none, BlkNumEYF 70
00450 0877 F1 		DB	LetterE	;0x47, BlkNumPHL 71
00451 0878 F1 		DB	LetterE	;0x48, BlkNumPH1 72
00452 0879 F1 		DB	LetterE	;0x49, BlkNumPH2 73
00453 087A F1 		DB	LetterE	;0x4A, BlkNumPH3 74
00454 087B F1 		DB	LetterE	;0x4B, BlkNumPH4 75
00455 087C F1 		DB	LetterE	;0x4C, BlkMZR Manzanar 76
00456 087D F1 		DB	LetterE
00457 087E F1 		DB	LetterE
00458 087F 	;
00459 087F 	;	
00460 087F 	; Block number to Symbol for Throttle 9		;Blk#, Blk Name, d'Blk#
00461 087F F1 	BlkThr9ToSym	DB	LetterE	;0x00, BlkNumRDY1 0
00462 0880 F1 		DB	LetterE	;0x01, BlkNumRDY2 1
00463 0881 F1 		DB	LetterE	;0x02, BlkNumFYL  2
CastleGate.asm   "Data.inc"                                              Page: 43
/HPRR Electrical Dept/Castlegate/Firmware/

00464 0882 F1 		DB	LetterE	;0x03, BlkNum100  3
00465 0883 F1 		DB	LetterE	;0x04, BlkNum101  4
00466 0884 F1 		DB	LetterE	;0x05, BlkNum110  5
00467 0885 F1 		DB	LetterE	;0x06, BlkNum111  6
00468 0886 F1 		DB	LetterE	;0x07, BlkNum120  7
00469 0887 F1 		DB	LetterE	;0x08, BlkNum121  8
00470 0888 F1 		DB	LetterE	;0x09, BlkNum130  9
00471 0889 F1 		DB	LetterE	;0x0A, BlkNum131 10
00472 088A F1 		DB	LetterE	;0x0B, BlkNum140 11
00473 088B F1 		DB	LetterE	;0x0C, BlkNum141 12
00474 088C F1 		DB	LetterE	;0x0D, BlkNumPT1 13
00475 088D F1 		DB	LetterE	;0x0E, BlkNumPT2 14
00476 088E F1 		DB	LetterE	;0x0F, BlkNum150 15
00477 088F F1 		DB	LetterE	;0x10, BlkNum151 16
00478 0890 F1 		DB	LetterE	;0x11, BlkNum160 17
00479 0891 F1 		DB	LetterE	;0x12, BlkNum170 18
00480 0892 F1 		DB	LetterE	;0x13, BlkNum171 19
00481 0893 F1 		DB	LetterE	;0x14, BlkNumSYL 20
00482 0894 F1 		DB	LetterE	;0x15, BlkNum180 21
00483 0895 F1 		DB	LetterE	;0x16, BlkNum190 22
00484 0896 F1 		DB	LetterE	;0x17, BlkNum191 23
00485 0897 F1 		DB	LetterE	;0x18, BlkNum200 24
00486 0898 F1 		DB	LetterE	;0x19, BlkNum201 25
00487 0899 F1 		DB	LetterE	;0x1A, BlkNum202 26
00488 089A F1 		DB	LetterE	;0x1B, BlkNum210 27
00489 089B F1 		DB	LetterE	;0x1C, BlkNum220 28
00490 089C F1 		DB	LetterE	;0x1D, BlkNum221 29
00491 089D F1 		DB	LetterE	;0x1E, BlkNum222 30
00492 089E F1 		DB	LetterE	;0x1F, BlkNum230 31
00493 089F F1 		DB	LetterE	;0x20, BlkNum240 32
00494 08A0 F1 		DB	LetterE	;0x21, BlkNum250 33
00495 08A1 F1 		DB	LetterE	;0x22, BlkNum251 34
00496 08A2 F1 		DB	LetterE	;0x23, BlkNum260 35
00497 08A3 F1 		DB	LetterE	;0x24, BlkNum270 36
00498 08A4 F1 		DB	LetterE	;0x25, BlkNum271 37
00499 08A5 F1 		DB	LetterE	;0x26, BlkNum280 38
00500 08A6 F1 		DB	LetterE	;0x27, BlkNum290 39
00501 08A7 F1 		DB	LetterE	;0x28, BlkNum291 40
00502 08A8 F1 		DB	LetterE	;0x29, BlkNum300 41
00503 08A9 E6 		DB	LetterH	;0x2A, BlkNum3101 42
00504 08AA E6 		DB	LetterH	;0x2B, BlkNum3102 43
00505 08AB E6 		DB	LetterH	;0x2C, BlkNum3111 44
00506 08AC E6 		DB	LetterH	;0x2D, BlkNum3112 45
00507 08AD E6 		DB	LetterH	;0x2E, BlkNum3121 46
00508 08AE E6 		DB	LetterH	;0x2F, BlkNum3122 47
00509 08AF E6 		DB	LetterH	;0x30, BlkNum3131 48
00510 08B0 E6 		DB	LetterH	;0x31, BlkNum3132 49
00511 08B1 F1 		DB	LetterE	;0x32, BlkNum320 50
00512 08B2 F1 		DB	LetterE	;0x33, BlkNum390 51
00513 08B3 F1 		DB	LetterE	;0x34, BlkNum330 52
00514 08B4 F1 		DB	LetterE	;0x35, BlkNum380 53
00515 08B5 F1 		DB	LetterE	;0x36, BlkNum340 54
00516 08B6 F1 		DB	LetterE	;0x37, BlkNum370 55
00517 08B7 F1 		DB	LetterE	;0x38, BlkNum350 56
00518 08B8 F1 		DB	LetterE	;0x39, BlkNum351 57
00519 08B9 F1 		DB	LetterE	;0x3A, BlkNum360 58
00520 08BA F1 		DB	LetterE	;0x3B, BlkNum361 59
00521 08BB F1 		DB	LetterE	;0x3C, BlkNum362 60
00522 08BC F1 		DB	LetterE	;0x3D, BlkNum363 61
00523 08BD F1 		DB	LetterE	;0x3E, BlkNum364 62
00524 08BE F1 		DB	LetterE	;0x3F, BlkNum365 63
00525 08BF F1 		DB	LetterE	;none, BlkNumVY1 64
00526 08C0 F1 		DB	LetterE	;none, BlkNumVY2 65
00527 08C1 F1 		DB	LetterE	;none, BlkNumVY3 66
00528 08C2 F1 		DB	LetterE	;none, BlkNumVY4 67
00529 08C3 F1 		DB	LetterE	;none, BlkNumVY5 68
00530 08C4 F1 		DB	LetterE	;none, BlkNumVY6 69
00531 08C5 F1 		DB	LetterE	;none, BlkNumEYF 70
00532 08C6 F1 		DB	LetterE	;0x47, BlkNumPHL 71
00533 08C7 F1 		DB	LetterE	;0x48, BlkNumPH1 72
00534 08C8 F1 		DB	LetterE	;0x49, BlkNumPH2 73
00535 08C9 F1 		DB	LetterE	;0x4A, BlkNumPH3 74
00536 08CA F1 		DB	LetterE	;0x4B, BlkNumPH4 75
00537 08CB F1 		DB	LetterE	;0x4C, BlkMZR Manzanar 76
00538 08CC F1 		DB	LetterE
00539 08CD F1 		DB	LetterE
00540 08CE 	;
00541 08CE 	;==============================================================================================
00542 08CE 	; Cab 6 to Throttle #	(Casper Tower)		;Blk#, Blk Name, d'Blk#
00543 08CE 00 	BlkCab6ToThr	DB	0x00	;0x00, BlkNumRDY1 0
00544 08CF 00 		DB	0x00	;0x01, BlkNumRDY2 1
00545 08D0 00 		DB	0x00	;0x02, BlkNumFYL  2
00546 08D1 00 		DB	0x00	;0x03, BlkNum100  3
00547 08D2 00 		DB	0x00	;0x04, BlkNum101  4
00548 08D3 00 		DB	0x00	;0x05, BlkNum110  5
00549 08D4 00 		DB	0x00	;0x06, BlkNum111  6
00550 08D5 00 		DB	0x00	;0x07, BlkNum120  7
00551 08D6 00 		DB	0x00	;0x08, BlkNum121  8
00552 08D7 00 		DB	0x00	;0x09, BlkNum130  9
00553 08D8 00 		DB	0x00	;0x0A, BlkNum131 10
00554 08D9 00 		DB	0x00	;0x0B, BlkNum140 11
00555 08DA 00 		DB	0x00	;0x0C, BlkNum141 12
00556 08DB 00 		DB	0x00	;0x0D, BlkNumPT1 13
00557 08DC 00 		DB	0x00	;0x0E, BlkNumPT2 14
00558 08DD 00 		DB	0x00	;0x0F, BlkNum150 15
00559 08DE 00 		DB	0x00	;0x10, BlkNum151 16
00560 08DF 00 		DB	0x00	;0x11, BlkNum160 17
00561 08E0 00 		DB	0x00	;0x12, BlkNum170 18
00562 08E1 00 		DB	0x00	;0x13, BlkNum171 19
00563 08E2 00 		DB	0x00	;0x14, BlkNumSYL 20
CastleGate.asm   "Data.inc"                                              Page: 44
/HPRR Electrical Dept/Castlegate/Firmware/

00564 08E3 00 		DB	0x00	;0x15, BlkNum180 21
00565 08E4 00 		DB	0x00	;0x16, BlkNum190 22
00566 08E5 00 		DB	0x00	;0x17, BlkNum191 23
00567 08E6 07 		DB	0x07	;0x18, BlkNum200 24
00568 08E7 07 		DB	0x07	;0x19, BlkNum201 25
00569 08E8 06 		DB	0x06	;0x1A, BlkNum202 26
00570 08E9 06 		DB	0x06	;0x1B, BlkNum210 27
00571 08EA 06 		DB	0x06	;0x1C, BlkNum220 28
00572 08EB 06 		DB	0x06	;0x1D, BlkNum221 29
00573 08EC 06 		DB	0x06	;0x1E, BlkNum222 30
00574 08ED 06 		DB	0x06	;0x1F, BlkNum230 31
00575 08EE 06 		DB	0x06	;0x20, BlkNum240 32
00576 08EF 06 		DB	0x06	;0x21, BlkNum250 33
00577 08F0 06 		DB	0x06	;0x22, BlkNum251 34
00578 08F1 06 		DB	0x06	;0x23, BlkNum260 35
00579 08F2 06 		DB	0x06	;0x24, BlkNum270 36
00580 08F3 06 		DB	0x06	;0x25, BlkNum271 37
00581 08F4 06 		DB	0x06	;0x26, BlkNum280 38
00582 08F5 06 		DB	0x06	;0x27, BlkNum290 39
00583 08F6 06 		DB	0x06	;0x28, BlkNum291 40
00584 08F7 06 		DB	0x06	;0x29, BlkNum300 41
00585 08F8 07 		DB	0x07	;0x2A, BlkNum3101 42
00586 08F9 07 		DB	0x07	;0x2B, BlkNum3102 43
00587 08FA 07 		DB	0x07	;0x2C, BlkNum3111 44
00588 08FB 07 		DB	0x07	;0x2D, BlkNum3112 45
00589 08FC 07 		DB	0x07	;0x2E, BlkNum3121 46
00590 08FD 07 		DB	0x07	;0x2F, BlkNum3122 47
00591 08FE 07 		DB	0x07	;0x30, BlkNum3131 48
00592 08FF 07 		DB	0x07	;0x31, BlkNum3132 49
00593 0900 00 		DB	0x00	;0x32, BlkNum320 50
00594 0901 00 		DB	0x00	;0x33, BlkNum390 51
00595 0902 00 		DB	0x00	;0x34, BlkNum330 52
00596 0903 00 		DB	0x00	;0x35, BlkNum380 53
00597 0904 00 		DB	0x00	;0x36, BlkNum340 54
00598 0905 00 		DB	0x00	;0x37, BlkNum370 55
00599 0906 00 		DB	0x00	;0x38, BlkNum350 56
00600 0907 00 		DB	0x00	;0x39, BlkNum351 57
00601 0908 00 		DB	0x00	;0x3A, BlkNum360 58
00602 0909 00 		DB	0x00	;0x3B, BlkNum361 59
00603 090A 00 		DB	0x00	;0x3C, BlkNum362 60
00604 090B 00 		DB	0x00	;0x3D, BlkNum363 61
00605 090C 00 		DB	0x00	;0x3E, BlkNum364 62
00606 090D 00 		DB	0x00	;0x3F, BlkNum365 63
00607 090E 00 		DB	0x00	;none, BlkNumVY1 64
00608 090F 00 		DB	0x00	;none, BlkNumVY2 65
00609 0910 00 		DB	0x00	;none, BlkNumVY3 66
00610 0911 00 		DB	0x00	;none, BlkNumVY4 67
00611 0912 00 		DB	0x00	;none, BlkNumVY5 68
00612 0913 00 		DB	0x00	;none, BlkNumVY6 69
00613 0914 00 		DB	0x00	;none, BlkNumEYF 70
00614 0915 06 		DB	0x06	;0x47, BlkNumPHL 71
00615 0916 06 		DB	0x06	;0x48, BlkNumPH1 72
00616 0917 06 		DB	0x06	;0x49, BlkNumPH2 73
00617 0918 06 		DB	0x06	;0x4A, BlkNumPH3 74
00618 0919 06 		DB	0x06	;0x4B, BlkNumPH4 75
00619 091A 00 		DB	0x00	;0x4C, BlkMZR Manzanar 76
00620 091B 00 		DB	0x00
00621 091C 00 		DB	0x00
00622 091D 	;
00623 091D 	; Cab 7 to Throttle #	(Baker Tower)		;Blk#, Blk Name, d'Blk#
00624 091D 00 	BlkCab7ToThr	DB	0x00	;0x00, BlkNumRDY1 0
00625 091E 00 		DB	0x00	;0x01, BlkNumRDY2 1
00626 091F 00 		DB	0x00	;0x02, BlkNumFYL  2
00627 0920 00 		DB	0x00	;0x03, BlkNum100  3
00628 0921 00 		DB	0x00	;0x04, BlkNum101  4
00629 0922 00 		DB	0x00	;0x05, BlkNum110  5
00630 0923 00 		DB	0x00	;0x06, BlkNum111  6
00631 0924 00 		DB	0x00	;0x07, BlkNum120  7
00632 0925 00 		DB	0x00	;0x08, BlkNum121  8
00633 0926 00 		DB	0x00	;0x09, BlkNum130  9
00634 0927 00 		DB	0x00	;0x0A, BlkNum131 10
00635 0928 00 		DB	0x00	;0x0B, BlkNum140 11
00636 0929 00 		DB	0x00	;0x0C, BlkNum141 12
00637 092A 00 		DB	0x00	;0x0D, BlkNumPT1 13
00638 092B 00 		DB	0x00	;0x0E, BlkNumPT2 14
00639 092C 00 		DB	0x00	;0x0F, BlkNum150 15
00640 092D 00 		DB	0x00	;0x10, BlkNum151 16
00641 092E 00 		DB	0x00	;0x11, BlkNum160 17
00642 092F 00 		DB	0x00	;0x12, BlkNum170 18
00643 0930 00 		DB	0x00	;0x13, BlkNum171 19
00644 0931 00 		DB	0x00	;0x14, BlkNumSYL 20
00645 0932 00 		DB	0x00	;0x15, BlkNum180 21
00646 0933 00 		DB	0x00	;0x16, BlkNum190 22
00647 0934 00 		DB	0x00	;0x17, BlkNum191 23
00648 0935 00 		DB	0x00	;0x18, BlkNum200 24
00649 0936 00 		DB	0x00	;0x19, BlkNum201 25
00650 0937 00 		DB	0x00	;0x1A, BlkNum202 26
00651 0938 00 		DB	0x00	;0x1B, BlkNum210 27
00652 0939 00 		DB	0x00	;0x1C, BlkNum220 28
00653 093A 00 		DB	0x00	;0x1D, BlkNum221 29
00654 093B 00 		DB	0x00	;0x1E, BlkNum222 30
00655 093C 00 		DB	0x00	;0x1F, BlkNum230 31
00656 093D 00 		DB	0x00	;0x20, BlkNum240 32
00657 093E 00 		DB	0x00	;0x21, BlkNum250 33
00658 093F 00 		DB	0x00	;0x22, BlkNum251 34
00659 0940 00 		DB	0x00	;0x23, BlkNum260 35
00660 0941 00 		DB	0x00	;0x24, BlkNum270 36
00661 0942 00 		DB	0x00	;0x25, BlkNum271 37
00662 0943 00 		DB	0x00	;0x26, BlkNum280 38
00663 0944 00 		DB	0x00	;0x27, BlkNum290 39
CastleGate.asm   "Data.inc"                                              Page: 45
/HPRR Electrical Dept/Castlegate/Firmware/

00664 0945 00 		DB	0x00	;0x28, BlkNum291 40
00665 0946 00 		DB	0x00	;0x29, BlkNum300 41
00666 0947 00 		DB	0x00	;0x2A, BlkNum3101 42
00667 0948 00 		DB	0x00	;0x2B, BlkNum3102 43
00668 0949 00 		DB	0x00	;0x2C, BlkNum3111 44
00669 094A 00 		DB	0x00	;0x2D, BlkNum3112 45
00670 094B 00 		DB	0x00	;0x2E, BlkNum3121 46
00671 094C 00 		DB	0x00	;0x2F, BlkNum3122 47
00672 094D 00 		DB	0x00	;0x30, BlkNum3131 48
00673 094E 00 		DB	0x00	;0x31, BlkNum3132 49
00674 094F 00 		DB	0x00	;0x32, BlkNum320 50
00675 0950 00 		DB	0x00	;0x33, BlkNum390 51
00676 0951 00 		DB	0x00	;0x34, BlkNum330 52
00677 0952 00 		DB	0x00	;0x35, BlkNum380 53
00678 0953 00 		DB	0x00	;0x36, BlkNum340 54
00679 0954 00 		DB	0x00	;0x37, BlkNum370 55
00680 0955 00 		DB	0x00	;0x38, BlkNum350 56
00681 0956 00 		DB	0x00	;0x39, BlkNum351 57
00682 0957 00 		DB	0x00	;0x3A, BlkNum360 58
00683 0958 00 		DB	0x00	;0x3B, BlkNum361 59
00684 0959 00 		DB	0x00	;0x3C, BlkNum362 60
00685 095A 00 		DB	0x00	;0x3D, BlkNum363 61
00686 095B 00 		DB	0x00	;0x3E, BlkNum364 62
00687 095C 00 		DB	0x00	;0x3F, BlkNum365 63
00688 095D 00 		DB	0x00	;none, BlkNumVY1 64
00689 095E 00 		DB	0x00	;none, BlkNumVY2 65
00690 095F 00 		DB	0x00	;none, BlkNumVY3 66
00691 0960 00 		DB	0x00	;none, BlkNumVY4 67
00692 0961 00 		DB	0x00	;none, BlkNumVY5 68
00693 0962 00 		DB	0x00	;none, BlkNumVY6 69
00694 0963 00 		DB	0x00	;none, BlkNumEYF 70
00695 0964 00 		DB	0x00	;0x47, BlkNumPHL 71
00696 0965 00 		DB	0x00	;0x48, BlkNumPH1 72
00697 0966 00 		DB	0x00	;0x49, BlkNumPH2 73
00698 0967 00 		DB	0x00	;0x4A, BlkNumPH3 74
00699 0968 00 		DB	0x00	;0x4B, BlkNumPH4 75
00700 0969 00 		DB	0x00	;0x4C, BlkMZR Manzanar 76
00701 096A 00 		DB	0x00
00702 096B 00 		DB	0x00
00703 096C 	;
00704 096C 	; Cab 8 to Throttle #			;Blk#, Blk Name, d'Blk#
00705 096C 00 	BlkCab8ToThr	DB	0x00	;0x00, BlkNumRDY1 0
00706 096D 00 		DB	0x00	;0x01, BlkNumRDY2 1
00707 096E 00 		DB	0x00	;0x02, BlkNumFYL  2
00708 096F 00 		DB	0x00	;0x03, BlkNum100  3
00709 0970 00 		DB	0x00	;0x04, BlkNum101  4
00710 0971 00 		DB	0x00	;0x05, BlkNum110  5
00711 0972 00 		DB	0x00	;0x06, BlkNum111  6
00712 0973 00 		DB	0x00	;0x07, BlkNum120  7
00713 0974 00 		DB	0x00	;0x08, BlkNum121  8
00714 0975 00 		DB	0x00	;0x09, BlkNum130  9
00715 0976 00 		DB	0x00	;0x0A, BlkNum131 10
00716 0977 00 		DB	0x00	;0x0B, BlkNum140 11
00717 0978 00 		DB	0x00	;0x0C, BlkNum141 12
00718 0979 00 		DB	0x00	;0x0D, BlkNumPT1 13
00719 097A 00 		DB	0x00	;0x0E, BlkNumPT2 14
00720 097B 00 		DB	0x00	;0x0F, BlkNum150 15
00721 097C 00 		DB	0x00	;0x10, BlkNum151 16
00722 097D 00 		DB	0x00	;0x11, BlkNum160 17
00723 097E 00 		DB	0x00	;0x12, BlkNum170 18
00724 097F 00 		DB	0x00	;0x13, BlkNum171 19
00725 0980 00 		DB	0x00	;0x14, BlkNumSYL 20
00726 0981 00 		DB	0x00	;0x15, BlkNum180 21
00727 0982 00 		DB	0x00	;0x16, BlkNum190 22
00728 0983 00 		DB	0x00	;0x17, BlkNum191 23
00729 0984 00 		DB	0x00	;0x18, BlkNum200 24
00730 0985 00 		DB	0x00	;0x19, BlkNum201 25
00731 0986 00 		DB	0x00	;0x1A, BlkNum202 26
00732 0987 00 		DB	0x00	;0x1B, BlkNum210 27
00733 0988 00 		DB	0x00	;0x1C, BlkNum220 28
00734 0989 00 		DB	0x00	;0x1D, BlkNum221 29
00735 098A 00 		DB	0x00	;0x1E, BlkNum222 30
00736 098B 00 		DB	0x00	;0x1F, BlkNum230 31
00737 098C 00 		DB	0x00	;0x20, BlkNum240 32
00738 098D 00 		DB	0x00	;0x21, BlkNum250 33
00739 098E 00 		DB	0x00	;0x22, BlkNum251 34
00740 098F 00 		DB	0x00	;0x23, BlkNum260 35
00741 0990 00 		DB	0x00	;0x24, BlkNum270 36
00742 0991 00 		DB	0x00	;0x25, BlkNum271 37
00743 0992 00 		DB	0x00	;0x26, BlkNum280 38
00744 0993 00 		DB	0x00	;0x27, BlkNum290 39
00745 0994 00 		DB	0x00	;0x28, BlkNum291 40
00746 0995 00 		DB	0x00	;0x29, BlkNum300 41
00747 0996 00 		DB	0x00	;0x2A, BlkNum3101 42
00748 0997 00 		DB	0x00	;0x2B, BlkNum3102 43
00749 0998 00 		DB	0x00	;0x2C, BlkNum3111 44
00750 0999 00 		DB	0x00	;0x2D, BlkNum3112 45
00751 099A 00 		DB	0x00	;0x2E, BlkNum3121 46
00752 099B 00 		DB	0x00	;0x2F, BlkNum3122 47
00753 099C 00 		DB	0x00	;0x30, BlkNum3131 48
00754 099D 00 		DB	0x00	;0x31, BlkNum3132 49
00755 099E 00 		DB	0x00	;0x32, BlkNum320 50
00756 099F 00 		DB	0x00	;0x33, BlkNum390 51
00757 09A0 00 		DB	0x00	;0x34, BlkNum330 52
00758 09A1 00 		DB	0x00	;0x35, BlkNum380 53
00759 09A2 00 		DB	0x00	;0x36, BlkNum340 54
00760 09A3 00 		DB	0x00	;0x37, BlkNum370 55
00761 09A4 00 		DB	0x00	;0x38, BlkNum350 56
00762 09A5 00 		DB	0x00	;0x39, BlkNum351 57
00763 09A6 00 		DB	0x00	;0x3A, BlkNum360 58
CastleGate.asm   "Data.inc"                                              Page: 46
/HPRR Electrical Dept/Castlegate/Firmware/

00764 09A7 00 		DB	0x00	;0x3B, BlkNum361 59
00765 09A8 00 		DB	0x00	;0x3C, BlkNum362 60
00766 09A9 00 		DB	0x00	;0x3D, BlkNum363 61
00767 09AA 00 		DB	0x00	;0x3E, BlkNum364 62
00768 09AB 00 		DB	0x00	;0x3F, BlkNum365 63
00769 09AC 00 		DB	0x00	;none, BlkNumVY1 64
00770 09AD 00 		DB	0x00	;none, BlkNumVY2 65
00771 09AE 00 		DB	0x00	;none, BlkNumVY3 66
00772 09AF 00 		DB	0x00	;none, BlkNumVY4 67
00773 09B0 00 		DB	0x00	;none, BlkNumVY5 68
00774 09B1 00 		DB	0x00	;none, BlkNumVY6 69
00775 09B2 00 		DB	0x00	;none, BlkNumEYF 70
00776 09B3 00 		DB	0x00	;0x47, BlkNumPHL 71
00777 09B4 00 		DB	0x00	;0x48, BlkNumPH1 72
00778 09B5 00 		DB	0x00	;0x49, BlkNumPH2 73
00779 09B6 00 		DB	0x00	;0x4A, BlkNumPH3 74
00780 09B7 00 		DB	0x00	;0x4B, BlkNumPH4 75
00781 09B8 00 		DB	0x00	;0x4C, BlkMZR Manzanar 76
00782 09B9 00 		DB	0x00
00783 09BA 00 		DB	0x00
00784 09BB 	;
00785 09BB 	; Cab 9 to Throttle #	(Dawson Tower)		;Blk#, Blk Name, d'Blk#
00786 09BB 00 	BlkCab9ToThr	DB	0x00	;0x00, BlkNumRDY1 0
00787 09BC 00 		DB	0x00	;0x01, BlkNumRDY2 1
00788 09BD 00 		DB	0x00	;0x02, BlkNumFYL  2
00789 09BE 00 		DB	0x00	;0x03, BlkNum100  3
00790 09BF 00 		DB	0x00	;0x04, BlkNum101  4
00791 09C0 00 		DB	0x00	;0x05, BlkNum110  5
00792 09C1 00 		DB	0x00	;0x06, BlkNum111  6
00793 09C2 00 		DB	0x00	;0x07, BlkNum120  7
00794 09C3 00 		DB	0x00	;0x08, BlkNum121  8
00795 09C4 00 		DB	0x00	;0x09, BlkNum130  9
00796 09C5 00 		DB	0x00	;0x0A, BlkNum131 10
00797 09C6 00 		DB	0x00	;0x0B, BlkNum140 11
00798 09C7 00 		DB	0x00	;0x0C, BlkNum141 12
00799 09C8 00 		DB	0x00	;0x0D, BlkNumPT1 13
00800 09C9 00 		DB	0x00	;0x0E, BlkNumPT2 14
00801 09CA 00 		DB	0x00	;0x0F, BlkNum150 15
00802 09CB 00 		DB	0x00	;0x10, BlkNum151 16
00803 09CC 00 		DB	0x00	;0x11, BlkNum160 17
00804 09CD 00 		DB	0x00	;0x12, BlkNum170 18
00805 09CE 00 		DB	0x00	;0x13, BlkNum171 19
00806 09CF 00 		DB	0x00	;0x14, BlkNumSYL 20
00807 09D0 00 		DB	0x00	;0x15, BlkNum180 21
00808 09D1 00 		DB	0x00	;0x16, BlkNum190 22
00809 09D2 00 		DB	0x00	;0x17, BlkNum191 23
00810 09D3 00 		DB	0x00	;0x18, BlkNum200 24
00811 09D4 00 		DB	0x00	;0x19, BlkNum201 25
00812 09D5 00 		DB	0x00	;0x1A, BlkNum202 26
00813 09D6 00 		DB	0x00	;0x1B, BlkNum210 27
00814 09D7 00 		DB	0x00	;0x1C, BlkNum220 28
00815 09D8 00 		DB	0x00	;0x1D, BlkNum221 29
00816 09D9 00 		DB	0x00	;0x1E, BlkNum222 30
00817 09DA 00 		DB	0x00	;0x1F, BlkNum230 31
00818 09DB 00 		DB	0x00	;0x20, BlkNum240 32
00819 09DC 00 		DB	0x00	;0x21, BlkNum250 33
00820 09DD 00 		DB	0x00	;0x22, BlkNum251 34
00821 09DE 00 		DB	0x00	;0x23, BlkNum260 35
00822 09DF 00 		DB	0x00	;0x24, BlkNum270 36
00823 09E0 00 		DB	0x00	;0x25, BlkNum271 37
00824 09E1 00 		DB	0x00	;0x26, BlkNum280 38
00825 09E2 00 		DB	0x00	;0x27, BlkNum290 39
00826 09E3 00 		DB	0x00	;0x28, BlkNum291 40
00827 09E4 00 		DB	0x00	;0x29, BlkNum300 41
00828 09E5 00 		DB	0x00	;0x2A, BlkNum3101 42
00829 09E6 00 		DB	0x00	;0x2B, BlkNum3102 43
00830 09E7 00 		DB	0x00	;0x2C, BlkNum3111 44
00831 09E8 00 		DB	0x00	;0x2D, BlkNum3112 45
00832 09E9 00 		DB	0x00	;0x2E, BlkNum3121 46
00833 09EA 00 		DB	0x00	;0x2F, BlkNum3122 47
00834 09EB 00 		DB	0x00	;0x30, BlkNum3131 48
00835 09EC 00 		DB	0x00	;0x31, BlkNum3132 49
00836 09ED 00 		DB	0x00	;0x32, BlkNum320 50
00837 09EE 00 		DB	0x00	;0x33, BlkNum390 51
00838 09EF 00 		DB	0x00	;0x34, BlkNum330 52
00839 09F0 00 		DB	0x00	;0x35, BlkNum380 53
00840 09F1 00 		DB	0x00	;0x36, BlkNum340 54
00841 09F2 00 		DB	0x00	;0x37, BlkNum370 55
00842 09F3 00 		DB	0x00	;0x38, BlkNum350 56
00843 09F4 00 		DB	0x00	;0x39, BlkNum351 57
00844 09F5 00 		DB	0x00	;0x3A, BlkNum360 58
00845 09F6 00 		DB	0x00	;0x3B, BlkNum361 59
00846 09F7 00 		DB	0x00	;0x3C, BlkNum362 60
00847 09F8 00 		DB	0x00	;0x3D, BlkNum363 61
00848 09F9 00 		DB	0x00	;0x3E, BlkNum364 62
00849 09FA 00 		DB	0x00	;0x3F, BlkNum365 63
00850 09FB 00 		DB	0x00	;none, BlkNumVY1 64
00851 09FC 00 		DB	0x00	;none, BlkNumVY2 65
00852 09FD 00 		DB	0x00	;none, BlkNumVY3 66
00853 09FE 00 		DB	0x00	;none, BlkNumVY4 67
00854 09FF 00 		DB	0x00	;none, BlkNumVY5 68
00855 0A00 00 		DB	0x00	;none, BlkNumVY6 69
00856 0A01 00 		DB	0x00	;none, BlkNumEYF 70
00857 0A02 00 		DB	0x00	;0x47, BlkNumPHL 71
00858 0A03 00 		DB	0x00	;0x48, BlkNumPH1 72
00859 0A04 00 		DB	0x00	;0x49, BlkNumPH2 73
00860 0A05 00 		DB	0x00	;0x4A, BlkNumPH3 74
00861 0A06 00 		DB	0x00	;0x4B, BlkNumPH4 75
00862 0A07 00 		DB	0x00	;0x4C, BlkMZR Manzanar 76
00863 0A08 00 		DB	0x00
CastleGate.asm   "Data.inc"                                              Page: 47
/HPRR Electrical Dept/Castlegate/Firmware/

00864 0A09 00 		DB	0x00
00865 0A0A 	;
00866 0A0A 	;==============================================================================================
00867 0A0A 	; Translate a block used by a throttle to a cab number
00868 0A0A 	;
00869 0A0A 	; Throttle 6 to Cab #			;Blk#, Blk Name, d'Blk#
00870 0A0A 00 	BlkThr6ToCab	DB	0x00	;0x00, BlkNumRDY1 0
00871 0A0B 00 		DB	0x00	;0x01, BlkNumRDY2 1
00872 0A0C 00 		DB	0x00	;0x02, BlkNumFYL  2
00873 0A0D 00 		DB	0x00	;0x03, BlkNum100  3
00874 0A0E 00 		DB	0x00	;0x04, BlkNum101  4
00875 0A0F 00 		DB	0x00	;0x05, BlkNum110  5
00876 0A10 00 		DB	0x00	;0x06, BlkNum111  6
00877 0A11 00 		DB	0x00	;0x07, BlkNum120  7
00878 0A12 00 		DB	0x00	;0x08, BlkNum121  8
00879 0A13 00 		DB	0x00	;0x09, BlkNum130  9
00880 0A14 00 		DB	0x00	;0x0A, BlkNum131 10
00881 0A15 00 		DB	0x00	;0x0B, BlkNum140 11
00882 0A16 00 		DB	0x00	;0x0C, BlkNum141 12
00883 0A17 00 		DB	0x00	;0x0D, BlkNumPT1 13
00884 0A18 00 		DB	0x00	;0x0E, BlkNumPT2 14
00885 0A19 00 		DB	0x00	;0x0F, BlkNum150 15
00886 0A1A 00 		DB	0x00	;0x10, BlkNum151 16
00887 0A1B 00 		DB	0x00	;0x11, BlkNum160 17
00888 0A1C 00 		DB	0x00	;0x12, BlkNum170 18
00889 0A1D 00 		DB	0x00	;0x13, BlkNum171 19
00890 0A1E 00 		DB	0x00	;0x14, BlkNumSYL 20
00891 0A1F 00 		DB	0x00	;0x15, BlkNum180 21
00892 0A20 00 		DB	0x00	;0x16, BlkNum190 22
00893 0A21 00 		DB	0x00	;0x17, BlkNum191 23
00894 0A22 07 		DB	0x07	;0x18, BlkNum200 24
00895 0A23 07 		DB	0x07	;0x19, BlkNum201 25
00896 0A24 06 		DB	0x06	;0x1A, BlkNum202 26
00897 0A25 06 		DB	0x06	;0x1B, BlkNum210 27
00898 0A26 06 		DB	0x06	;0x1C, BlkNum220 28
00899 0A27 06 		DB	0x06	;0x1D, BlkNum221 29
00900 0A28 06 		DB	0x06	;0x1E, BlkNum222 30
00901 0A29 06 		DB	0x06	;0x1F, BlkNum230 31
00902 0A2A 06 		DB	0x06	;0x20, BlkNum240 32
00903 0A2B 06 		DB	0x06	;0x21, BlkNum250 33
00904 0A2C 06 		DB	0x06	;0x22, BlkNum251 34
00905 0A2D 06 		DB	0x06	;0x23, BlkNum260 35
00906 0A2E 06 		DB	0x06	;0x24, BlkNum270 36
00907 0A2F 06 		DB	0x06	;0x25, BlkNum271 37
00908 0A30 06 		DB	0x06	;0x26, BlkNum280 38
00909 0A31 06 		DB	0x06	;0x27, BlkNum290 39
00910 0A32 06 		DB	0x06	;0x28, BlkNum291 40
00911 0A33 06 		DB	0x06	;0x29, BlkNum300 41
00912 0A34 07 		DB	0x07	;0x2A, BlkNum3101 42
00913 0A35 07 		DB	0x07	;0x2B, BlkNum3102 43
00914 0A36 07 		DB	0x07	;0x2C, BlkNum3111 44
00915 0A37 07 		DB	0x07	;0x2D, BlkNum3112 45
00916 0A38 07 		DB	0x07	;0x2E, BlkNum3121 46
00917 0A39 07 		DB	0x07	;0x2F, BlkNum3122 47
00918 0A3A 07 		DB	0x07	;0x30, BlkNum3131 48
00919 0A3B 07 		DB	0x07	;0x31, BlkNum3132 49
00920 0A3C 00 		DB	0x00	;0x32, BlkNum320 50
00921 0A3D 00 		DB	0x00	;0x33, BlkNum390 51
00922 0A3E 00 		DB	0x00	;0x34, BlkNum330 52
00923 0A3F 00 		DB	0x00	;0x35, BlkNum380 53
00924 0A40 00 		DB	0x00	;0x36, BlkNum340 54
00925 0A41 00 		DB	0x00	;0x37, BlkNum370 55
00926 0A42 00 		DB	0x00	;0x38, BlkNum350 56
00927 0A43 00 		DB	0x00	;0x39, BlkNum351 57
00928 0A44 00 		DB	0x00	;0x3A, BlkNum360 58
00929 0A45 00 		DB	0x00	;0x3B, BlkNum361 59
00930 0A46 00 		DB	0x00	;0x3C, BlkNum362 60
00931 0A47 00 		DB	0x00	;0x3D, BlkNum363 61
00932 0A48 00 		DB	0x00	;0x3E, BlkNum364 62
00933 0A49 00 		DB	0x00	;0x3F, BlkNum365 63
00934 0A4A 00 		DB	0x00	;none, BlkNumVY1 64
00935 0A4B 00 		DB	0x00	;none, BlkNumVY2 65
00936 0A4C 00 		DB	0x00	;none, BlkNumVY3 66
00937 0A4D 00 		DB	0x00	;none, BlkNumVY4 67
00938 0A4E 00 		DB	0x00	;none, BlkNumVY5 68
00939 0A4F 00 		DB	0x00	;none, BlkNumVY6 69
00940 0A50 00 		DB	0x00	;none, BlkNumEYF 70
00941 0A51 06 		DB	0x06	;0x47, BlkNumPHL 71
00942 0A52 06 		DB	0x06	;0x48, BlkNumPH1 72
00943 0A53 06 		DB	0x06	;0x49, BlkNumPH2 73
00944 0A54 06 		DB	0x06	;0x4A, BlkNumPH3 74
00945 0A55 06 		DB	0x06	;0x4B, BlkNumPH4 75
00946 0A56 00 		DB	0x00	;0x4C, BlkMZR Manzanar 76
00947 0A57 00 		DB	0x00
00948 0A58 00 		DB	0x00
00949 0A59 	;
00950 0A59 	; Throttle 7 to Cab #			;Blk#, Blk Name, d'Blk#
00951 0A59 00 	BlkThr7ToCab	DB	0x00	;0x00, BlkNumRDY1 0
00952 0A5A 00 		DB	0x00	;0x01, BlkNumRDY2 1
00953 0A5B 00 		DB	0x00	;0x02, BlkNumFYL  2
00954 0A5C 00 		DB	0x00	;0x03, BlkNum100  3
00955 0A5D 00 		DB	0x00	;0x04, BlkNum101  4
00956 0A5E 00 		DB	0x00	;0x05, BlkNum110  5
00957 0A5F 00 		DB	0x00	;0x06, BlkNum111  6
00958 0A60 00 		DB	0x00	;0x07, BlkNum120  7
00959 0A61 00 		DB	0x00	;0x08, BlkNum121  8
00960 0A62 00 		DB	0x00	;0x09, BlkNum130  9
00961 0A63 00 		DB	0x00	;0x0A, BlkNum131 10
00962 0A64 00 		DB	0x00	;0x0B, BlkNum140 11
00963 0A65 00 		DB	0x00	;0x0C, BlkNum141 12
CastleGate.asm   "Data.inc"                                              Page: 48
/HPRR Electrical Dept/Castlegate/Firmware/

00964 0A66 00 		DB	0x00	;0x0D, BlkNumPT1 13
00965 0A67 00 		DB	0x00	;0x0E, BlkNumPT2 14
00966 0A68 00 		DB	0x00	;0x0F, BlkNum150 15
00967 0A69 00 		DB	0x00	;0x10, BlkNum151 16
00968 0A6A 00 		DB	0x00	;0x11, BlkNum160 17
00969 0A6B 00 		DB	0x00	;0x12, BlkNum170 18
00970 0A6C 00 		DB	0x00	;0x13, BlkNum171 19
00971 0A6D 00 		DB	0x00	;0x14, BlkNumSYL 20
00972 0A6E 00 		DB	0x00	;0x15, BlkNum180 21
00973 0A6F 00 		DB	0x00	;0x16, BlkNum190 22
00974 0A70 00 		DB	0x00	;0x17, BlkNum191 23
00975 0A71 06 		DB	0x06	;0x18, BlkNum200 24
00976 0A72 06 		DB	0x06	;0x19, BlkNum201 25
00977 0A73 00 		DB	0x00	;0x1A, BlkNum202 26
00978 0A74 00 		DB	0x00	;0x1B, BlkNum210 27
00979 0A75 00 		DB	0x00	;0x1C, BlkNum220 28
00980 0A76 00 		DB	0x00	;0x1D, BlkNum221 29
00981 0A77 00 		DB	0x00	;0x1E, BlkNum222 30
00982 0A78 00 		DB	0x00	;0x1F, BlkNum230 31
00983 0A79 00 		DB	0x00	;0x20, BlkNum240 32
00984 0A7A 00 		DB	0x00	;0x21, BlkNum250 33
00985 0A7B 00 		DB	0x00	;0x22, BlkNum251 34
00986 0A7C 00 		DB	0x00	;0x23, BlkNum260 35
00987 0A7D 00 		DB	0x00	;0x24, BlkNum270 36
00988 0A7E 00 		DB	0x00	;0x25, BlkNum271 37
00989 0A7F 00 		DB	0x00	;0x26, BlkNum280 38
00990 0A80 00 		DB	0x00	;0x27, BlkNum290 39
00991 0A81 00 		DB	0x00	;0x28, BlkNum291 40
00992 0A82 00 		DB	0x00	;0x29, BlkNum300 41
00993 0A83 06 		DB	0x06	;0x2A, BlkNum3101 42
00994 0A84 06 		DB	0x06	;0x2B, BlkNum3102 43
00995 0A85 06 		DB	0x06	;0x2C, BlkNum3111 44
00996 0A86 06 		DB	0x06	;0x2D, BlkNum3112 45
00997 0A87 06 		DB	0x06	;0x2E, BlkNum3121 46
00998 0A88 06 		DB	0x06	;0x2F, BlkNum3122 47
00999 0A89 06 		DB	0x06	;0x30, BlkNum3131 48
01000 0A8A 06 		DB	0x06	;0x31, BlkNum3132 49
01001 0A8B 00 		DB	0x00	;0x32, BlkNum320 50
01002 0A8C 00 		DB	0x00	;0x33, BlkNum390 51
01003 0A8D 00 		DB	0x00	;0x34, BlkNum330 52
01004 0A8E 00 		DB	0x00	;0x35, BlkNum380 53
01005 0A8F 00 		DB	0x00	;0x36, BlkNum340 54
01006 0A90 00 		DB	0x00	;0x37, BlkNum370 55
01007 0A91 00 		DB	0x00	;0x38, BlkNum350 56
01008 0A92 00 		DB	0x00	;0x39, BlkNum351 57
01009 0A93 00 		DB	0x00	;0x3A, BlkNum360 58
01010 0A94 00 		DB	0x00	;0x3B, BlkNum361 59
01011 0A95 00 		DB	0x00	;0x3C, BlkNum362 60
01012 0A96 00 		DB	0x00	;0x3D, BlkNum363 61
01013 0A97 00 		DB	0x00	;0x3E, BlkNum364 62
01014 0A98 00 		DB	0x00	;0x3F, BlkNum365 63
01015 0A99 00 		DB	0x00	;none, BlkNumVY1 64
01016 0A9A 00 		DB	0x00	;none, BlkNumVY2 65
01017 0A9B 00 		DB	0x00	;none, BlkNumVY3 66
01018 0A9C 00 		DB	0x00	;none, BlkNumVY4 67
01019 0A9D 00 		DB	0x00	;none, BlkNumVY5 68
01020 0A9E 00 		DB	0x00	;none, BlkNumVY6 69
01021 0A9F 00 		DB	0x00	;none, BlkNumEYF 70
01022 0AA0 00 		DB	0x00	;0x47, BlkNumPHL 71
01023 0AA1 00 		DB	0x00	;0x48, BlkNumPH1 72
01024 0AA2 00 		DB	0x00	;0x49, BlkNumPH2 73
01025 0AA3 00 		DB	0x00	;0x4A, BlkNumPH3 74
01026 0AA4 00 		DB	0x00	;0x4B, BlkNumPH4 75
01027 0AA5 00 		DB	0x00	;0x4C, BlkMZR Manzanar 76
01028 0AA6 00 		DB	0x00
01029 0AA7 00 		DB	0x00
01030 0AA8 	;
01031 0AA8 	; Throttle 8 to Cab #	(NOT USED)		;Blk#, Blk Name, d'Blk#
01032 0AA8 00 	BlkThr8ToCab	DB	0x00	;0x00, BlkNumRDY1 0
01033 0AA9 00 		DB	0x00	;0x01, BlkNumRDY2 1
01034 0AAA 00 		DB	0x00	;0x02, BlkNumFYL  2
01035 0AAB 00 		DB	0x00	;0x03, BlkNum100  3
01036 0AAC 00 		DB	0x00	;0x04, BlkNum101  4
01037 0AAD 00 		DB	0x00	;0x05, BlkNum110  5
01038 0AAE 00 		DB	0x00	;0x06, BlkNum111  6
01039 0AAF 00 		DB	0x00	;0x07, BlkNum120  7
01040 0AB0 00 		DB	0x00	;0x08, BlkNum121  8
01041 0AB1 00 		DB	0x00	;0x09, BlkNum130  9
01042 0AB2 00 		DB	0x00	;0x0A, BlkNum131 10
01043 0AB3 00 		DB	0x00	;0x0B, BlkNum140 11
01044 0AB4 00 		DB	0x00	;0x0C, BlkNum141 12
01045 0AB5 00 		DB	0x00	;0x0D, BlkNumPT1 13
01046 0AB6 00 		DB	0x00	;0x0E, BlkNumPT2 14
01047 0AB7 00 		DB	0x00	;0x0F, BlkNum150 15
01048 0AB8 00 		DB	0x00	;0x10, BlkNum151 16
01049 0AB9 00 		DB	0x00	;0x11, BlkNum160 17
01050 0ABA 00 		DB	0x00	;0x12, BlkNum170 18
01051 0ABB 00 		DB	0x00	;0x13, BlkNum171 19
01052 0ABC 00 		DB	0x00	;0x14, BlkNumSYL 20
01053 0ABD 00 		DB	0x00	;0x15, BlkNum180 21
01054 0ABE 00 		DB	0x00	;0x16, BlkNum190 22
01055 0ABF 00 		DB	0x00	;0x17, BlkNum191 23
01056 0AC0 00 		DB	0x00	;0x18, BlkNum200 24
01057 0AC1 00 		DB	0x00	;0x19, BlkNum201 25
01058 0AC2 00 		DB	0x00	;0x1A, BlkNum202 26
01059 0AC3 00 		DB	0x00	;0x1B, BlkNum210 27
01060 0AC4 00 		DB	0x00	;0x1C, BlkNum220 28
01061 0AC5 00 		DB	0x00	;0x1D, BlkNum221 29
01062 0AC6 00 		DB	0x00	;0x1E, BlkNum222 30
01063 0AC7 00 		DB	0x00	;0x1F, BlkNum230 31
CastleGate.asm   "Data.inc"                                              Page: 49
/HPRR Electrical Dept/Castlegate/Firmware/

01064 0AC8 00 		DB	0x00	;0x20, BlkNum240 32
01065 0AC9 00 		DB	0x00	;0x21, BlkNum250 33
01066 0ACA 00 		DB	0x00	;0x22, BlkNum251 34
01067 0ACB 00 		DB	0x00	;0x23, BlkNum260 35
01068 0ACC 00 		DB	0x00	;0x24, BlkNum270 36
01069 0ACD 00 		DB	0x00	;0x25, BlkNum271 37
01070 0ACE 00 		DB	0x00	;0x26, BlkNum280 38
01071 0ACF 00 		DB	0x00	;0x27, BlkNum290 39
01072 0AD0 00 		DB	0x00	;0x28, BlkNum291 40
01073 0AD1 00 		DB	0x00	;0x29, BlkNum300 41
01074 0AD2 00 		DB	0x00	;0x2A, BlkNum3101 42
01075 0AD3 00 		DB	0x00	;0x2B, BlkNum3102 43
01076 0AD4 00 		DB	0x00	;0x2C, BlkNum3111 44
01077 0AD5 00 		DB	0x00	;0x2D, BlkNum3112 45
01078 0AD6 00 		DB	0x00	;0x2E, BlkNum3121 46
01079 0AD7 00 		DB	0x00	;0x2F, BlkNum3122 47
01080 0AD8 00 		DB	0x00	;0x30, BlkNum3131 48
01081 0AD9 00 		DB	0x00	;0x31, BlkNum3132 49
01082 0ADA 00 		DB	0x00	;0x32, BlkNum320 50
01083 0ADB 00 		DB	0x00	;0x33, BlkNum390 51
01084 0ADC 00 		DB	0x00	;0x34, BlkNum330 52
01085 0ADD 00 		DB	0x00	;0x35, BlkNum380 53
01086 0ADE 00 		DB	0x00	;0x36, BlkNum340 54
01087 0ADF 00 		DB	0x00	;0x37, BlkNum370 55
01088 0AE0 00 		DB	0x00	;0x38, BlkNum350 56
01089 0AE1 00 		DB	0x00	;0x39, BlkNum351 57
01090 0AE2 00 		DB	0x00	;0x3A, BlkNum360 58
01091 0AE3 00 		DB	0x00	;0x3B, BlkNum361 59
01092 0AE4 00 		DB	0x00	;0x3C, BlkNum362 60
01093 0AE5 00 		DB	0x00	;0x3D, BlkNum363 61
01094 0AE6 00 		DB	0x00	;0x3E, BlkNum364 62
01095 0AE7 00 		DB	0x00	;0x3F, BlkNum365 63
01096 0AE8 00 		DB	0x00	;none, BlkNumVY1 64
01097 0AE9 00 		DB	0x00	;none, BlkNumVY2 65
01098 0AEA 00 		DB	0x00	;none, BlkNumVY3 66
01099 0AEB 00 		DB	0x00	;none, BlkNumVY4 67
01100 0AEC 00 		DB	0x00	;none, BlkNumVY5 68
01101 0AED 00 		DB	0x00	;none, BlkNumVY6 69
01102 0AEE 00 		DB	0x00	;none, BlkNumEYF 70
01103 0AEF 00 		DB	0x00	;0x47, BlkNumPHL 71
01104 0AF0 00 		DB	0x00	;0x48, BlkNumPH1 72
01105 0AF1 00 		DB	0x00	;0x49, BlkNumPH2 73
01106 0AF2 00 		DB	0x00	;0x4A, BlkNumPH3 74
01107 0AF3 00 		DB	0x00	;0x4B, BlkNumPH4 75
01108 0AF4 00 		DB	0x00	;0x4C, BlkMZR Manzanar 76
01109 0AF5 00 		DB	0x00
01110 0AF6 00 		DB	0x00
01111 0AF7 	;
01112 0AF7 	; Throttle 9 to Cab #	(NOT USED)		;Blk#, Blk Name, d'Blk#
01113 0AF7 00 	BlkThr9ToCab	DB	0x00	;0x00, BlkNumRDY1 0
01114 0AF8 00 		DB	0x00	;0x01, BlkNumRDY2 1
01115 0AF9 00 		DB	0x00	;0x02, BlkNumFYL  2
01116 0AFA 00 		DB	0x00	;0x03, BlkNum100  3
01117 0AFB 00 		DB	0x00	;0x04, BlkNum101  4
01118 0AFC 00 		DB	0x00	;0x05, BlkNum110  5
01119 0AFD 00 		DB	0x00	;0x06, BlkNum111  6
01120 0AFE 00 		DB	0x00	;0x07, BlkNum120  7
01121 0AFF 00 		DB	0x00	;0x08, BlkNum121  8
01122 0B00 00 		DB	0x00	;0x09, BlkNum130  9
01123 0B01 00 		DB	0x00	;0x0A, BlkNum131 10
01124 0B02 00 		DB	0x00	;0x0B, BlkNum140 11
01125 0B03 00 		DB	0x00	;0x0C, BlkNum141 12
01126 0B04 00 		DB	0x00	;0x0D, BlkNumPT1 13
01127 0B05 00 		DB	0x00	;0x0E, BlkNumPT2 14
01128 0B06 00 		DB	0x00	;0x0F, BlkNum150 15
01129 0B07 00 		DB	0x00	;0x10, BlkNum151 16
01130 0B08 00 		DB	0x00	;0x11, BlkNum160 17
01131 0B09 00 		DB	0x00	;0x12, BlkNum170 18
01132 0B0A 00 		DB	0x00	;0x13, BlkNum171 19
01133 0B0B 00 		DB	0x00	;0x14, BlkNumSYL 20
01134 0B0C 00 		DB	0x00	;0x15, BlkNum180 21
01135 0B0D 00 		DB	0x00	;0x16, BlkNum190 22
01136 0B0E 00 		DB	0x00	;0x17, BlkNum191 23
01137 0B0F 00 		DB	0x00	;0x18, BlkNum200 24
01138 0B10 00 		DB	0x00	;0x19, BlkNum201 25
01139 0B11 00 		DB	0x00	;0x1A, BlkNum202 26
01140 0B12 00 		DB	0x00	;0x1B, BlkNum210 27
01141 0B13 00 		DB	0x00	;0x1C, BlkNum220 28
01142 0B14 00 		DB	0x00	;0x1D, BlkNum221 29
01143 0B15 00 		DB	0x00	;0x1E, BlkNum222 30
01144 0B16 00 		DB	0x00	;0x1F, BlkNum230 31
01145 0B17 00 		DB	0x00	;0x20, BlkNum240 32
01146 0B18 00 		DB	0x00	;0x21, BlkNum250 33
01147 0B19 00 		DB	0x00	;0x22, BlkNum251 34
01148 0B1A 00 		DB	0x00	;0x23, BlkNum260 35
01149 0B1B 00 		DB	0x00	;0x24, BlkNum270 36
01150 0B1C 00 		DB	0x00	;0x25, BlkNum271 37
01151 0B1D 00 		DB	0x00	;0x26, BlkNum280 38
01152 0B1E 00 		DB	0x00	;0x27, BlkNum290 39
01153 0B1F 00 		DB	0x00	;0x28, BlkNum291 40
01154 0B20 00 		DB	0x00	;0x29, BlkNum300 41
01155 0B21 00 		DB	0x00	;0x2A, BlkNum3101 42
01156 0B22 00 		DB	0x00	;0x2B, BlkNum3102 43
01157 0B23 00 		DB	0x00	;0x2C, BlkNum3111 44
01158 0B24 00 		DB	0x00	;0x2D, BlkNum3112 45
01159 0B25 00 		DB	0x00	;0x2E, BlkNum3121 46
01160 0B26 00 		DB	0x00	;0x2F, BlkNum3122 47
01161 0B27 00 		DB	0x00	;0x30, BlkNum3131 48
01162 0B28 00 		DB	0x00	;0x31, BlkNum3132 49
01163 0B29 00 		DB	0x00	;0x32, BlkNum320 50
CastleGate.asm   "Data.inc"                                              Page: 50
/HPRR Electrical Dept/Castlegate/Firmware/

01164 0B2A 00 		DB	0x00	;0x33, BlkNum390 51
01165 0B2B 00 		DB	0x00	;0x34, BlkNum330 52
01166 0B2C 00 		DB	0x00	;0x35, BlkNum380 53
01167 0B2D 00 		DB	0x00	;0x36, BlkNum340 54
01168 0B2E 00 		DB	0x00	;0x37, BlkNum370 55
01169 0B2F 00 		DB	0x00	;0x38, BlkNum350 56
01170 0B30 00 		DB	0x00	;0x39, BlkNum351 57
01171 0B31 00 		DB	0x00	;0x3A, BlkNum360 58
01172 0B32 00 		DB	0x00	;0x3B, BlkNum361 59
01173 0B33 00 		DB	0x00	;0x3C, BlkNum362 60
01174 0B34 00 		DB	0x00	;0x3D, BlkNum363 61
01175 0B35 00 		DB	0x00	;0x3E, BlkNum364 62
01176 0B36 00 		DB	0x00	;0x3F, BlkNum365 63
01177 0B37 00 		DB	0x00	;none, BlkNumVY1 64
01178 0B38 00 		DB	0x00	;none, BlkNumVY2 65
01179 0B39 00 		DB	0x00	;none, BlkNumVY3 66
01180 0B3A 00 		DB	0x00	;none, BlkNumVY4 67
01181 0B3B 00 		DB	0x00	;none, BlkNumVY5 68
01182 0B3C 00 		DB	0x00	;none, BlkNumVY6 69
01183 0B3D 00 		DB	0x00	;none, BlkNumEYF 70
01184 0B3E 00 		DB	0x00	;0x47, BlkNumPHL 71
01185 0B3F 00 		DB	0x00	;0x48, BlkNumPH1 72
01186 0B40 00 		DB	0x00	;0x49, BlkNumPH2 73
01187 0B41 00 		DB	0x00	;0x4A, BlkNumPH3 74
01188 0B42 00 		DB	0x00	;0x4B, BlkNumPH4 75
01189 0B43 00 		DB	0x00	;0x4C, BlkMZR Manzanar 76
01190 0B44 00 		DB	0x00
01191 0B45 00 		DB	0x00
01192 0B46 	;
01193 0B46 	;
01194 0B46 		include	MLSMData.inc
00001 0B46 		subtitle	MLSMData.inc

00002 0B46 		page
00003 0B46 	;
00004 0B46 	;============================================================================================================
00005 0B46 	;
00006 0B46 	;  FileName: MLSMData.inc
00007 0B46 	;  Date: 7/12/09
00008 0B46 	;  File Version: 1.0.0
00009 0B46 	;  
00010 0B46 	;  Author: David M. Flynn
00011 0B46 	;  Company: HPRR
00012 0B46 	;  Project: Casper Tower
00013 0B46 	;
00014 0B46 	;============================================================================================================
00015 0B46 	; Revision History
00016 0B46 	;
00017 0B46 	; 1.0.0  7/12/2009	First reved version.
00018 0B46 	;
00019 0B46 	;============================================================================================================
00020 0B46 	; Notes:
00021 0B46 	;
00022 0B46 	;  This file has data that is loaded from the eeROM to SRAM
00023 0B46 	;  evDataROM*256 is added to the PC here to get the SRAM address
00024 0B46 	;
00025 0B46 	;  The BD and DW commands are related to the STR and RES commands.
00026 0B46 	;  The label is stored with the currnt PC value then
00027 0B46 	;   the PC is incremented by the data length
00028 0B46 	;  A "d.d" file is created containing the data for the eerom file.
00029 0B46 	;  Copy the "d.d" file to the WWW page subdirectory then run eeROM to make an eeROM.binary file.
00030 0B46 	;  Then run eeROM Uploader to upload the eeROM.binary file into the first 24LC256 at U2 on the Brain GP CPU.
00031 0B46 	;
00032 0B46 	;============================================================================================================
00033 0B46 	;
00034 0B46 0000 	SMNumOff	EQU	0x00
00035 0B46 0002 	SMNum2Off	EQU	0x02
00036 0B46 0004 	SMNum3Off	EQU	0x04
00037 0B46 0006 	SMRootBlk	EQU	0x06
00038 0B46 0008 	SMNormBlk	EQU	0x08
00039 0B46 000A 	SMRevBlk	EQU	0x0A
00040 0B46 000C 	SMLamp	EQU	0x0C	;Block#(offset to BlkModID):Output(00,02,0A,0C)
00041 0B46 000E 	SMLamp2	EQU	0x0E
00042 0B46 0010 	SMToggle	EQU	0x10	;Bit 6 inverts the toggle
00043 0B46 0012 	SMEnable	EQU	0x12	;Bit 6 inverts the enable
00044 0B46 0014 	SMFlagsWord	EQU	0x14
00045 0B46 	;
00046 0B46 0016 	SMAddBlk	EQU	0x16
00047 0B46 	;None	EQU	0xFEFE
00048 0B46 	;EOD	EQU	0xFF
00049 0B46 	;
00050 0B46 4000 	SMEnableInvert	EQU	0x4000
00051 0B46 0200 	SMOffRouteFlag	EQU	0x0200
00052 0B46 0001 	SMOffRouteFlagBit	EQU	0x01
00053 0B46 4000 	OddSMOBFlag	EQU	0x4000
00054 0B46 0006 	OddSMOBFlagBit	EQU	0x06
00055 0B46 	; Overview Tower Zone Disable Pseudo SMs
00056 0B46 	; SM500 is the BPK Mode 2 status bit
00057 0B46 01F5 	DisableOVZoneD2	EQU	d'501'	;245,Disable Overview Tower Zone D2
00058 0B46 01F6 	DisableOVZoneD1	EQU	d'502'	;Disable Overview Tower Zone D1
00059 0B46 01F7 	DisableOVZoneC3	EQU	d'503'	;Disable Overview Tower Zone C3
00060 0B46 01F8 	DisableOVZoneC2	EQU	d'504'	;Disable Overview Tower Zone C2
00061 0B46 01F9 	DisableOVZoneC1	EQU	d'505'	;Disable Overview Tower Zone C1
00062 0B46 01FA 	DisableOVZoneB2	EQU	d'506'	;Disable Overview Tower Zone B2
00063 0B46 01FB 	DisableOVZoneB1	EQU	d'507'	;Disable Overview Tower Zone B1
00064 0B46 01FC 	DisableOVZoneA3	EQU	d'508'	;Disable Overview Tower Zone A3
00065 0B46 01FD 	DisableOVZoneA2	EQU	d'509'	;Disable Overview Tower Zone A2
00066 0B46 01FE 	DisableOVZoneA1	EQU	d'510'	;254,Disable Overview Tower Zone A1
00067 0B46 	;SM511	DW	0x1040	;Disable Auto Blk Selector
00068 0B46 	;
CastleGate.asm   MLSMData.inc                                            Page: 51
/HPRR Electrical Dept/Castlegate/Firmware/

00069 0B46 01E2 	EnableDTZoneD2	EQU	d'482'	;SM CTRL psuedo SM, Enable D2
00070 0B46 01E3 	EnableDTZoneD1	EQU	d'483'	;SM CTRL psuedo SM, Enable D1
00071 0B46 01E4 	EnableCTZoneC3	EQU	d'484'	;SM CTRL psuedo SM, Enable C3
00072 0B46 01E5 	EnableCTZoneC2	EQU	d'485'	;SM CTRL psuedo SM, Enable C2
00073 0B46 01E6 	EnableCTZoneC1	EQU	d'486'	;SM CTRL psuedo SM, Enable C1
00074 0B46 01E7 	EnableBTZoneB2	EQU	d'487'	;SM CTRL psuedo SM, Enable B2
00075 0B46 01E8 	EnableBTZoneB1	EQU	d'488'	;SM CTRL psuedo SM, Enable B1
00076 0B46 01E9 	EnableATZoneA3	EQU	d'489'	;SM CTRL psuedo SM, Enable A3
00077 0B46 01EA 	EnableATZoneA2	EQU	d'490'	;SM CTRL psuedo SM, Enable A2
00078 0B46 01EB 	EnableATZoneA1	EQU	d'491'	;SM CTRL psuedo SM, Enable A1
00079 0B46 	;
00080 0B46 	;-----------------------
00081 0B46 	; SMToggle Flags
00082 0B46 4000 	SMToggleInvert	EQU	0x4000
00083 0B46 	;
00084 0B46 	;-----------------------
00085 0B46 	; SMFlagsWord Flags
00086 0B46 	;
00087 0B46 0001 	AllowInMode2	EQU	0x0001
00088 0B46 0000 	AIM2_Bit	EQU	0
00089 0B46 0000 	DisabledInMode2	EQU	0x0000
00090 0B46 	;
00091 0B46 0002 	SMLamp2InvertFlag	EQU	0x0002	;Lamps are normally on when the SM is active
00092 0B46 0001 	SML2InvFlag	EQU	1	;bit number for BSF/BCF
00093 0B46 	;
00094 0B46 0004 	SM2InvertFlag	EQU	0x0004	;Not to ctrl SMs, used to light LEDs
00095 0B46 0002 	SM2InvFlag	EQU	2
00096 0B46 0008 	SM2RequiredFlag	EQU	0x0008
00097 0B46 0003 	SM2ReqFlag	EQU	3
00098 0B46 0010 	RevBlkRequired	EQU	0x0010
00099 0B46 0004 	RevBlkReqFlag	EQU	4
00100 0B46 0040 	RootCabRequired	EQU	0x0040
00101 0B46 0006 	RootCabReqFlag	EQU	6
00102 0B46 	;
00103 0B46 0020 	SMLampIsOB	EQU	0x0020	;Use output board instead of block module
00104 0B46 0005 	SMLampIsOBFlag	EQU	5
00105 0B46 	;-----------------------
00106 0B46 	;
00107 0B46 	MLSM1
00108 0B46 	MLSM21
00109 0B46 3700 		DW	d'55'	;SM Num 1
00110 0B48 5400 		DW	d'84'	;SM Num 2
00111 0B4A FEFE 		DW	None	;SM Num 3
00112 0B4C 1B00 		DW	BlkNum210	;ROOT
00113 0B4E 1800 		DW	BlkNum200	;NORMAL
00114 0B50 1A00 		DW	BlkNum202	;REV.
00115 0B52 021C 		DW	0x1C02	;SM LAMP
00116 0B54 FEFE 		DW	None	;SM Lamp2
00117 0B56 FEFE 		DW	None	;SM Toggle Sw
00118 0B58 E601 		DW	EnableCTZoneC1	;SM Enable
00119 0B5A 1200 		DW	SMLamp2InvertFlag+RevBlkRequired	;Flags
00120 0B5C 	; Clear SMs for 210 to 201 traffic
00121 0B5C 3700 		DW	d'55'	;SM Num 1
00122 0B5E 5400 		DW	d'84'	;SM Num 2
00123 0B60 FEFE 		DW	None	;SM Num 3
00124 0B62 1A00 		DW	BlkNum202	;ROOT
00125 0B64 FEFE 		DW	None	;NORMAL
00126 0B66 1B00 		DW	BlkNum210	;REV.
00127 0B68 FEFE 		DW	None	;SM LAMP
00128 0B6A FEFE 		DW	None	;SM Lamp2
00129 0B6C FEFE 		DW	None	;SM Toggle Sw
00130 0B6E E601 		DW	EnableCTZoneC1	;SM Enable
00131 0B70 1000 		DW	RevBlkRequired	;Flags
00132 0B72 	MLSM22
00133 0B72 3600 		DW	d'54'	;SM Num 1
00134 0B74 FEFE 		DW	None	;SM Num 2
00135 0B76 FEFE 		DW	None	;SM Num 3
00136 0B78 1B00 		DW	BlkNum210	;ROOT
00137 0B7A 1800 		DW	BlkNum200	;NORMAL
00138 0B7C 1900 		DW	BlkNum201	;REV.
00139 0B7E 0C1B 		DW	0x1B0C	;SM LAMP
00140 0B80 021B 		DW	0x1B02	;SM Lamp2
00141 0B82 FEFE 		DW	None	;SM Toggle Sw
00142 0B84 E601 		DW	EnableCTZoneC1	;SM Enable
00143 0B86 0200 		DW	SMLamp2InvertFlag	;Flags
00144 0B88 	; Clear SM for 210 to 202 traffic
00145 0B88 	;	DW	d'54'	;SM Num 1
00146 0B88 	;	DW	None	;SM Num 2
00147 0B88 	;	DW	None	;SM Num 3
00148 0B88 	;	DW	BlkNum210	;ROOT
00149 0B88 	;	DW	BlkNum202	;NORMAL
00150 0B88 	;	DW	None	;REV.
00151 0B88 	;	DW	None	;SM LAMP
00152 0B88 	;	DW	None	;SM Lamp2
00153 0B88 	;	DW	None	;SM Toggle Sw
00154 0B88 	;	DW	EnableCTZoneC1	;SM Enable
00155 0B88 	;	DW	0x0000	;Flags
00156 0B88 	;210 to 220
00157 0B88 3800 		DW	d'56'	;SM Num 1
00158 0B8A FEFE 		DW	None	;SM Num 2
00159 0B8C FEFE 		DW	None	;SM Num 3
00160 0B8E 1B00 		DW	BlkNum210	;ROOT
00161 0B90 1C00 		DW	BlkNum220	;NORMAL
00162 0B92 FEFE 		DW	None	;REV.
00163 0B94 0C1C 		DW	0x1C0C	;SM LAMP
00164 0B96 021D 		DW	0x1D02	;SM Lamp2
00165 0B98 FEFE 		DW	None	;SM Toggle Sw
00166 0B9A E601 		DW	EnableCTZoneC1	;SM Enable
00167 0B9C 0200 		DW	SMLamp2InvertFlag	;Flags
00168 0B9E 	;210 to 221
CastleGate.asm   MLSMData.inc                                            Page: 52
/HPRR Electrical Dept/Castlegate/Firmware/

00169 0B9E 3800 		DW	d'56'	;SM Num 1
00170 0BA0 FEFE 		DW	None	;SM Num 2
00171 0BA2 FEFE 		DW	None	;SM Num 3
00172 0BA4 1B00 		DW	BlkNum210	;ROOT
00173 0BA6 FEFE 		DW	None	;NORMAL
00174 0BA8 1D00 		DW	BlkNum221	;REV.
00175 0BAA FEFE 		DW	None	;SM LAMP
00176 0BAC FEFE 		DW	None	;SM Lamp2
00177 0BAE FEFE 		DW	None	;SM Toggle Sw
00178 0BB0 E601 		DW	EnableCTZoneC1	;SM Enable
00179 0BB2 0200 		DW	SMLamp2InvertFlag	;Flags
00180 0BB4 	;210 to 222
00181 0BB4 3800 		DW	d'56'	;SM Num 1
00182 0BB6 FEFE 		DW	None	;SM Num 2
00183 0BB8 FEFE 		DW	None	;SM Num 3
00184 0BBA 1B00 		DW	BlkNum210	;ROOT
00185 0BBC FEFE 		DW	None	;NORMAL
00186 0BBE 1E00 		DW	BlkNum222	;REV.
00187 0BC0 FEFE 		DW	None	;SM LAMP
00188 0BC2 FEFE 		DW	None	;SM Lamp2
00189 0BC4 FEFE 		DW	None	;SM Toggle Sw
00190 0BC6 E601 		DW	EnableCTZoneC1	;SM Enable
00191 0BC8 0200 		DW	SMLamp2InvertFlag	;Flags
00192 0BCA 	;210 to 222
00193 0BCA 3900 		DW	d'57'	;SM Num 1
00194 0BCC FEFE 		DW	None	;SM Num 2
00195 0BCE FEFE 		DW	None	;SM Num 3
00196 0BD0 1B00 		DW	BlkNum210	;ROOT 210 End
00197 0BD2 1D00 		DW	BlkNum221	;NORMAL
00198 0BD4 1E00 		DW	BlkNum222	;REV.
00199 0BD6 021F 		DW	0x1F02	;SM LAMP
00200 0BD8 FEFE 		DW	None	;SM LAMP2
00201 0BDA FEFE 		DW	None	;SM Toggle Sw 0x204B+SMToggleInvert
00202 0BDC E601 		DW	EnableCTZoneC1	;SM Enable
00203 0BDE 0200 		DW	SMLamp2InvertFlag	;Flags
00204 0BE0 	;230 to 220
00205 0BE0 3B00 		DW	d'59'	;SM Num 1
00206 0BE2 FEFE 		DW	None	;SM Num 2
00207 0BE4 FEFE 		DW	None	;SM Num 3
00208 0BE6 1F00 		DW	BlkNum230	;ROOT
00209 0BE8 1C00 		DW	BlkNum220	;NORMAL
00210 0BEA FEFE 		DW	None	;REV.
00211 0BEC 0A1F 		DW	0x1F0A	;SM LAMP
00212 0BEE 0C1F 		DW	0x1F0C	;SM Lamp2
00213 0BF0 FEFE 		DW	None	;SM Toggle Sw
00214 0BF2 E601 		DW	EnableCTZoneC1	;SM Enable
00215 0BF4 0200 		DW	SMLamp2InvertFlag	;Flags
00216 0BF6 	;230 to 221	
00217 0BF6 3B00 		DW	d'59'	;SM Num 1
00218 0BF8 FEFE 		DW	None	;SM Num 2
00219 0BFA FEFE 		DW	None	;SM Num 3
00220 0BFC 1F00 		DW	BlkNum230	;ROOT
00221 0BFE FEFE 		DW	None	;NORMAL
00222 0C00 1D00 		DW	BlkNum221	;REV.
00223 0C02 FEFE 		DW	None	;SM LAMP
00224 0C04 FEFE 		DW	None	;SM Lamp2
00225 0C06 FEFE 		DW	None	;SM Toggle Sw
00226 0C08 E601 		DW	EnableCTZoneC1	;SM Enable
00227 0C0A 0200 		DW	SMLamp2InvertFlag	;Flags
00228 0C0C 	;230 to 222	
00229 0C0C 3B00 		DW	d'59'	;SM Num 1
00230 0C0E FEFE 		DW	None	;SM Num 2
00231 0C10 FEFE 		DW	None	;SM Num 3
00232 0C12 1F00 		DW	BlkNum230	;ROOT
00233 0C14 FEFE 		DW	None	;NORMAL
00234 0C16 1E00 		DW	BlkNum222	;REV.
00235 0C18 FEFE 		DW	None	;SM LAMP
00236 0C1A FEFE 		DW	None	;SM Lamp2
00237 0C1C FEFE 		DW	None	;SM Toggle Sw
00238 0C1E E601 		DW	EnableCTZoneC1	;SM Enable
00239 0C20 0200 		DW	SMLamp2InvertFlag	;Flags
00240 0C22 	;230 to 222
00241 0C22 3A00 		DW	d'58'	;SM Num 1
00242 0C24 FEFE 		DW	None	;SM Num 2
00243 0C26 FEFE 		DW	None	;SM Num 3
00244 0C28 1F00 		DW	BlkNum230	;ROOT 230 End
00245 0C2A 1D00 		DW	BlkNum221	;NORMAL
00246 0C2C 1E00 		DW	BlkNum222	;REV.
00247 0C2E 0220 		DW	0x2002	;SM LAMP
00248 0C30 FEFE 		DW	None	;SM Lamp2
00249 0C32 FEFE 		DW	None	;SM Toggle Sw 0x204A+SMToggleInvert
00250 0C34 E601 		DW	EnableCTZoneC1	;SM Enable
00251 0C36 0200 		DW	SMLamp2InvertFlag	;Flags
00252 0C38 	;240 to 251
00253 0C38 3C00 		DW	d'60'	;SM #
00254 0C3A FEFE 		DW	None	;SM Num 2
00255 0C3C FEFE 		DW	None	;SM Num 3
00256 0C3E 2000 		DW	BlkNum240	;ROOT
00257 0C40 2100 		DW	BlkNum250	;NORMAL
00258 0C42 2200 		DW	BlkNum251	;REV.
00259 0C44 0221 		DW	0x2102	;SM LAMP 240-251
00260 0C46 0C21 		DW	0x210C	;SM Lamp2 240-250
00261 0C48 FEFE 		DW	None	;SM Toggle Sw
00262 0C4A E601 		DW	EnableCTZoneC1	;SM Enable
00263 0C4C 0200 		DW	SMLamp2InvertFlag	;Flags
00264 0C4E 	;260 to 251
00265 0C4E 3D00 		DW	d'61'	;SM Num 1
00266 0C50 FEFE 		DW	None	;SM Num 2
00267 0C52 FEFE 		DW	None	;SM Num 3
00268 0C54 2300 		DW	BlkNum260	;ROOT
CastleGate.asm   MLSMData.inc                                            Page: 53
/HPRR Electrical Dept/Castlegate/Firmware/

00269 0C56 2100 		DW	BlkNum250	;NORMAL
00270 0C58 2200 		DW	BlkNum251	;REV.
00271 0C5A 0A21 		DW	0x210A	;SM LAMP 260-251
00272 0C5C 0A22 		DW	0x220A	;SM Lamp2 260-250
00273 0C5E FEFE 		DW	None	;SM Toggle Sw
00274 0C60 E501 		DW	EnableCTZoneC2	;SM Enable
00275 0C62 0200 		DW	SMLamp2InvertFlag	;Flags
00276 0C64 	;260 to 271
00277 0C64 3E00 		DW	d'62'	;SM Num 1
00278 0C66 FEFE 		DW	None	;SM Num 2
00279 0C68 FEFE 		DW	None	;SM Num 3
00280 0C6A 2300 		DW	BlkNum260	;ROOT
00281 0C6C 2400 		DW	BlkNum270	;NORMAL
00282 0C6E 2500 		DW	BlkNum271	;REV.
00283 0C70 0C22 		DW	0x220C	;SM LAMP 260-271
00284 0C72 0222 		DW	0x2202	;SM Lamp2 260-270
00285 0C74 FEFE 		DW	None	;SM Toggle Sw
00286 0C76 E501 		DW	EnableCTZoneC2	;SM Enable
00287 0C78 0200 		DW	SMLamp2InvertFlag	;Flags
00288 0C7A 	;280 to 271
00289 0C7A 3F00 		DW	d'63'	;SM Num 1
00290 0C7C FEFE 		DW	None	;SM Num 2
00291 0C7E FEFE 		DW	None	;SM Num 3
00292 0C80 2600 		DW	BlkNum280	;ROOT
00293 0C82 2400 		DW	BlkNum270	;NORMAL
00294 0C84 2500 		DW	BlkNum271	;REV.
00295 0C86 0224 		DW	0x2402	;SM LAMP 280-271
00296 0C88 0A25 		DW	0x250A	;SM Lamp2 280-270
00297 0C8A FEFE 		DW	None	;SM Toggle Sw
00298 0C8C E501 		DW	EnableCTZoneC2	;SM Enable
00299 0C8E 0200 		DW	SMLamp2InvertFlag	;Flags
00300 0C90 	;280 to 291
00301 0C90 4000 		DW	d'64'	;SM Num 1
00302 0C92 FEFE 		DW	None	;SM Num 2
00303 0C94 FEFE 		DW	None	;SM Num 3
00304 0C96 2600 		DW	BlkNum280	;ROOT
00305 0C98 2700 		DW	BlkNum290	;NORMAL
00306 0C9A 2800 		DW	BlkNum291	;REV.
00307 0C9C 0C24 		DW	0x240C	;SM LAMP 280-291
00308 0C9E 0A24 		DW	0x240A	;SM Lamp2 280-290
00309 0CA0 FEFE 		DW	None	;SM Toggle Sw
00310 0CA2 E501 		DW	EnableCTZoneC2	;SM Enable
00311 0CA4 0200 		DW	SMLamp2InvertFlag	;Flags
00312 0CA6 	;300 to 291
00313 0CA6 4100 		DW	d'65'	;SM Num 1
00314 0CA8 FEFE 		DW	None	;SM Num 2
00315 0CAA FEFE 		DW	None	;SM Num 3
00316 0CAC 2900 		DW	BlkNum300	;ROOT
00317 0CAE 2700 		DW	BlkNum290	;NORMAL
00318 0CB0 2800 		DW	BlkNum291	;REV.
00319 0CB2 0226 		DW	0x2602	;SM LAMP
00320 0CB4 0A26 		DW	0x260A	;SM Lamp2
00321 0CB6 FEFE 		DW	None	;SM Toggle Sw
00322 0CB8 E401 		DW	EnableCTZoneC3	;SM Enable
00323 0CBA 0200 		DW	SMLamp2InvertFlag	;Flags
00324 0CBC 	;
00325 0CBC 	;----------------------------------------------------------------------------------------
00326 0CBC 	; Highland and Greeley
00327 0CBC 	;
00328 0CBC 	;
00329 0CBC 4400 		DW	d'68'	;SM Num 1
00330 0CBE FEFE 		DW	None	;SM Num 2
00331 0CC0 FEFE 		DW	None	;SM Num 3
00332 0CC2 2900 		DW	BlkNum300	;ROOT
00333 0CC4 2C00 		DW	BlkNum3111	;NORMAL
00334 0CC6 2A00 		DW	BlkNum3101	;REV.
00335 0CC8 FEFE 		DW	None	;0x2A0C ;SM LAMP
00336 0CCA FEFE 		DW	None	;SM Lamp2
00337 0CCC FEFE 		DW	None	;SM Toggle Sw
00338 0CCE E401 		DW	EnableCTZoneC3	;SM Enable
00339 0CD0 0000 		DW	0x0000	;Flags
00340 0CD2 	;
00341 0CD2 4400 		DW	d'68'	;SM Num 1
00342 0CD4 FEFE 		DW	None	;SM Num 2
00343 0CD6 FEFE 		DW	None	;SM Num 3
00344 0CD8 2900 		DW	BlkNum300	;ROOT
00345 0CDA 2D00 		DW	BlkNum3112	;NORMAL
00346 0CDC 2B00 		DW	BlkNum3102	;REV.
00347 0CDE FEFE 		DW	None	;SM LAMP
00348 0CE0 FEFE 		DW	None	;SM Lamp2
00349 0CE2 FEFE 		DW	None	;SM Toggle Sw
00350 0CE4 E401 		DW	EnableCTZoneC3	;SM Enable
00351 0CE6 0000 		DW	0x0000	;Flags
00352 0CE8 	;
00353 0CE8 6800 		DW	d'104'	;SM Num 1
00354 0CEA FEFE 		DW	None	;SM Num 2
00355 0CEC FEFE 		DW	None	;SM Num 3
00356 0CEE 2900 		DW	BlkNum300	;ROOT
00357 0CF0 2A00 		DW	BlkNum3101	;NORMAL
00358 0CF2 2B00 		DW	BlkNum3102	;REV.
00359 0CF4 FEFE 		DW	None	;SM Lamp (R)
00360 0CF6 FEFE 		DW	None	;SM Lamp2 (N)
00361 0CF8 FEFE 		DW	None	;SM Toggle Sw
00362 0CFA E401 		DW	EnableCTZoneC3	;SM Enable
00363 0CFC 0200 		DW	SMLamp2InvertFlag	;Flags
00364 0CFE 	;
00365 0CFE 6B00 		DW	d'107'	;SM Num 1
00366 0D00 FEFE 		DW	None	;SM Num 2
00367 0D02 FEFE 		DW	None	;SM Num 3
00368 0D04 2900 		DW	BlkNum300	;ROOT
CastleGate.asm   MLSMData.inc                                            Page: 54
/HPRR Electrical Dept/Castlegate/Firmware/

00369 0D06 2D00 		DW	BlkNum3112	;NORMAL
00370 0D08 2C00 		DW	BlkNum3111	;REV.
00371 0D0A FEFE 		DW	None	;SM Lamp (R)
00372 0D0C FEFE 		DW	None	;SM Lamp2 (N)
00373 0D0E FEFE 		DW	None	;SM Toggle Sw
00374 0D10 E401 		DW	EnableCTZoneC3	;SM Enable
00375 0D12 0200 		DW	SMLamp2InvertFlag	;Flags
00376 0D14 	;
00377 0D14 4200 		DW	d'66'	;SM Num 1
00378 0D16 FEFE 		DW	None	;SM Num 2
00379 0D18 FEFE 		DW	None	;SM Num 3
00380 0D1A 2900 		DW	BlkNum300	;ROOT
00381 0D1C 2C00 		DW	BlkNum3111	;NORMAL
00382 0D1E 2E00 		DW	BlkNum3121	;REV.
00383 0D20 FEFE 		DW	None	;0x2E0C ;SM LAMP
00384 0D22 FEFE 		DW	None	;SM Lamp2
00385 0D24 FEFE 		DW	None	;SM Toggle Sw
00386 0D26 E401 		DW	EnableCTZoneC3	;SM Enable
00387 0D28 0000 		DW	0x0000	;Flags
00388 0D2A 	;
00389 0D2A 4200 		DW	d'66'	;SM Num 1
00390 0D2C FEFE 		DW	None	;SM Num 2
00391 0D2E FEFE 		DW	None	;SM Num 3
00392 0D30 2900 		DW	BlkNum300	;ROOT
00393 0D32 2A00 		DW	BlkNum3101	;NORMAL
00394 0D34 FEFE 		DW	None	;REV.
00395 0D36 FEFE 		DW	None	;SM LAMP
00396 0D38 FEFE 		DW	None	;SM Lamp2
00397 0D3A FEFE 		DW	None	;SM Toggle Sw
00398 0D3C E401 		DW	EnableCTZoneC3	;SM Enable
00399 0D3E 0000 		DW	0x0000	;Flags
00400 0D40 	;
00401 0D40 4200 		DW	d'66'	;SM Num 1
00402 0D42 FEFE 		DW	None	;SM Num 2
00403 0D44 FEFE 		DW	None	;SM Num 3
00404 0D46 2900 		DW	BlkNum300	;ROOT
00405 0D48 2D00 		DW	BlkNum3112	;NORMAL
00406 0D4A 2F00 		DW	BlkNum3122	;REV.
00407 0D4C FEFE 		DW	None	;SM Lamp (R)
00408 0D4E FEFE 		DW	None	;SM Lamp2 (N)
00409 0D50 FEFE 		DW	None	;SM Toggle Sw
00410 0D52 E401 		DW	EnableCTZoneC3	;SM Enable
00411 0D54 0200 		DW	SMLamp2InvertFlag	;Flags
00412 0D56 	;
00413 0D56 4200 		DW	d'66'	;SM Num 1
00414 0D58 FEFE 		DW	None	;SM Num 2
00415 0D5A FEFE 		DW	None	;SM Num 3
00416 0D5C 2900 		DW	BlkNum300	;ROOT
00417 0D5E 2B00 		DW	BlkNum3102	;NORMAL
00418 0D60 FEFE 		DW	None	;REV.
00419 0D62 FEFE 		DW	None	;SM Lamp (R)
00420 0D64 FEFE 		DW	None	;SM Lamp2 (N)
00421 0D66 FEFE 		DW	None	;SM Toggle Sw
00422 0D68 E401 		DW	EnableCTZoneC3	;SM Enable
00423 0D6A 0200 		DW	SMLamp2InvertFlag	;Flags
00424 0D6C 	;
00425 0D6C 4300 		DW	d'67'	;SM Num 1
00426 0D6E FEFE 		DW	None	;SM Num 2
00427 0D70 FEFE 		DW	None	;SM Num 3
00428 0D72 2900 		DW	BlkNum300	;ROOT
00429 0D74 2E00 		DW	BlkNum3121	;NORMAL
00430 0D76 3000 		DW	BlkNum3131	;REV.
00431 0D78 FEFE 		DW	None	;0x300C ;SM LAMP
00432 0D7A FEFE 		DW	None	;SM LAMP2
00433 0D7C FEFE 		DW	None	;SM Toggle Sw
00434 0D7E E401 		DW	EnableCTZoneC3	;SM Enable
00435 0D80 0000 		DW	0x0000	;Flags
00436 0D82 	;
00437 0D82 4200 		DW	d'66'	;SM Num 1
00438 0D84 FEFE 		DW	None	;SM Num 2
00439 0D86 FEFE 		DW	None	;SM Num 3
00440 0D88 2900 		DW	BlkNum300	;ROOT
00441 0D8A FEFE 		DW	None	;NORMAL
00442 0D8C 3000 		DW	BlkNum3131	;REV.
00443 0D8E FEFE 		DW	None	;SM LAMP
00444 0D90 FEFE 		DW	None	;SM LAMP2
00445 0D92 FEFE 		DW	None	;SM Toggle Sw
00446 0D94 E401 		DW	EnableCTZoneC3	;SM Enable
00447 0D96 0000 		DW	0x0000	;Flags
00448 0D98 	;
00449 0D98 4300 		DW	d'67'	;SM Num 1
00450 0D9A FEFE 		DW	None	;SM Num 2
00451 0D9C FEFE 		DW	None	;SM Num 3
00452 0D9E 2900 		DW	BlkNum300	;ROOT
00453 0DA0 2F00 		DW	BlkNum3122	;NORMAL
00454 0DA2 3100 		DW	BlkNum3132	;REV.
00455 0DA4 FEFE 		DW	None	;SM Lamp (R)
00456 0DA6 FEFE 		DW	None	;SM Lamp2 (N)
00457 0DA8 FEFE 		DW	None	;SM Toggle Sw
00458 0DAA E401 		DW	EnableCTZoneC3	;SM Enable
00459 0DAC 0200 		DW	SMLamp2InvertFlag	;Flags
00460 0DAE 	;
00461 0DAE 4200 		DW	d'66'	;SM Num 1
00462 0DB0 FEFE 		DW	None	;SM Num 2
00463 0DB2 FEFE 		DW	None	;SM Num 3
00464 0DB4 2900 		DW	BlkNum300	;ROOT
00465 0DB6 FEFE 		DW	None	;NORMAL
00466 0DB8 3100 		DW	BlkNum3132	;REV.
00467 0DBA FEFE 		DW	None	;SM Lamp (R)
00468 0DBC FEFE 		DW	None	;SM Lamp2 (N)
CastleGate.asm   MLSMData.inc                                            Page: 55
/HPRR Electrical Dept/Castlegate/Firmware/

00469 0DBE FEFE 		DW	None	;SM Toggle Sw
00470 0DC0 E401 		DW	EnableCTZoneC3	;SM Enable
00471 0DC2 0200 		DW	SMLamp2InvertFlag	;Flags
00472 0DC4 	;
00473 0DC4 7800 		DW	d'120'	;SM Num 1
00474 0DC6 FEFE 		DW	None	;SM Num 2
00475 0DC8 FEFE 		DW	None	;SM Num 3
00476 0DCA 2900 		DW	BlkNum300	;ROOT
00477 0DCC 2E00 		DW	BlkNum3121	;NORMAL
00478 0DCE 2F00 		DW	BlkNum3122	;REV.
00479 0DD0 FEFE 		DW	None	;SM Lamp (R)
00480 0DD2 FEFE 		DW	None	;SM Lamp2 (N)
00481 0DD4 FEFE 		DW	None	;SM Toggle Sw
00482 0DD6 E401 		DW	EnableCTZoneC3	;SM Enable
00483 0DD8 0200 		DW	SMLamp2InvertFlag	;Flags
00484 0DDA 	;
00485 0DDA 7500 		DW	d'117'	;SM Num 1
00486 0DDC FEFE 		DW	None	;SM Num 2
00487 0DDE FEFE 		DW	None	;SM Num 3
00488 0DE0 2900 		DW	BlkNum300	;ROOT
00489 0DE2 3100 		DW	BlkNum3132	;NORMAL
00490 0DE4 3000 		DW	BlkNum3131	;REV.
00491 0DE6 FEFE 		DW	None	;SM Lamp (R)
00492 0DE8 FEFE 		DW	None	;SM Lamp2 (N)
00493 0DEA FEFE 		DW	None	;SM Toggle Sw
00494 0DEC E401 		DW	EnableCTZoneC3	;SM Enable
00495 0DEE 0200 		DW	SMLamp2InvertFlag	;Flags
00496 0DF0 	;
00497 0DF0 	;271 to PHL
00498 0DF0 0801 		DW	d'264'	;SM Num 1
00499 0DF2 FEFE 		DW	None	;SM Num 2
00500 0DF4 FEFE 		DW	None	;SM Num 3
00501 0DF6 2500 		DW	BlkNum271	;ROOT
00502 0DF8 FEFE 		DW	None	;NORMAL
00503 0DFA 4700 		DW	BlkNumPHL	;REV.
00504 0DFC 0225 		DW	0x2502	;SM LAMP
00505 0DFE FEFE 		DW	None	;SM LAMP2
00506 0E00 FEFE 		DW	None	;SM Toggle Sw
00507 0E02 E501 		DW	EnableCTZoneC2	;SM Enable
00508 0E04 1000 		DW	RevBlkRequired	;Flags
00509 0E06 	;
00510 0E06 0901 		DW	d'265'	;SM Num 1
00511 0E08 FEFE 		DW	None	;SM Num 2
00512 0E0A FEFE 		DW	None	;SM Num 3
00513 0E0C 2300 		DW	BlkNum260	;ROOT
00514 0E0E FEFE 		DW	None	;NORMAL
00515 0E10 4700 		DW	BlkNumPHL	;REV.
00516 0E12 FEFE 		DW	None	;SM LAMP
00517 0E14 FEFE 		DW	None	;SM LAMP2
00518 0E16 FEFE 		DW	None	;SM Toggle Sw
00519 0E18 E501 		DW	EnableCTZoneC2	;SM Enable
00520 0E1A 1000 		DW	RevBlkRequired	;Flags
00521 0E1C 	;
00522 0E1C 3E00 		DW	d'62'	;SM Num 1
00523 0E1E FEFE 		DW	None	;SM Num 2
00524 0E20 FEFE 		DW	None	;SM Num 3
00525 0E22 2300 		DW	BlkNum260	;ROOT
00526 0E24 FEFE 		DW	None	;NORMAL
00527 0E26 4700 		DW	BlkNumPHL	;REV.
00528 0E28 FEFE 		DW	None	;SM LAMP
00529 0E2A FEFE 		DW	None	;SM LAMP2
00530 0E2C FEFE 		DW	None	;SM Toggle Sw
00531 0E2E E501 		DW	EnableCTZoneC2	;SM Enable
00532 0E30 0000 		DW	0x0000	;Flags
00533 0E32 	;
00534 0E32 0A01 		DW	d'266'	;SM Num 1
00535 0E34 FEFE 		DW	None	;SM Num 2
00536 0E36 FEFE 		DW	None	;SM Num 3
00537 0E38 4700 		DW	BlkNumPHL	;ROOT
00538 0E3A FEFE 		DW	None	;NORMAL
00539 0E3C 4A00 		DW	BlkNumPH3	;REV.
00540 0E3E 0223 		DW	0x2302	;SM LAMP
00541 0E40 FEFE 		DW	None	;SM LAMP2
00542 0E42 FEFE 		DW	None	;SM Toggle Sw
00543 0E44 FEFE 		DW	None	;SM Enable
00544 0E46 1000 		DW	RevBlkRequired	;Flags
00545 0E48 	;
00546 0E48 0B01 		DW	d'267'	;SM Num 1
00547 0E4A FEFE 		DW	None	;SM Num 2
00548 0E4C FEFE 		DW	None	;SM Num 3
00549 0E4E 4700 		DW	BlkNumPHL	;ROOT
00550 0E50 FEFE 		DW	None	;NORMAL
00551 0E52 4900 		DW	BlkNumPH2	;REV.
00552 0E54 0C23 		DW	0x230C	;SM LAMP
00553 0E56 FEFE 		DW	None	;SM LAMP2
00554 0E58 FEFE 		DW	None	;SM Toggle Sw
00555 0E5A FEFE 		DW	None	;SM Enable
00556 0E5C 1000 		DW	RevBlkRequired	;Flags
00557 0E5E 	;
00558 0E5E 0C01 		DW	d'268'	;SM Num 1
00559 0E60 FEFE 		DW	None	;SM Num 2
00560 0E62 FEFE 		DW	None	;SM Num 3
00561 0E64 4700 		DW	BlkNumPHL	;ROOT
00562 0E66 FEFE 		DW	None	;NORMAL
00563 0E68 4800 		DW	BlkNumPH1	;REV.
00564 0E6A 0A23 		DW	0x230A	;SM LAMP
00565 0E6C FEFE 		DW	None	;SM LAMP2
00566 0E6E FEFE 		DW	None	;SM Toggle Sw
00567 0E70 FEFE 		DW	None	;SM Enable
00568 0E72 1000 		DW	RevBlkRequired	;Flags
CastleGate.asm   MLSMData.inc                                            Page: 56
/HPRR Electrical Dept/Castlegate/Firmware/

00569 0E74 	;
00570 0E74 0701 		DW	d'263'	;SM Num 1
00571 0E76 FEFE 		DW	None	;SM Num 2
00572 0E78 FEFE 		DW	None	;SM Num 3
00573 0E7A 2500 		DW	BlkNum271	;ROOT
00574 0E7C FEFE 		DW	None	;NORMAL
00575 0E7E 4B00 		DW	BlkNumPH4	;REV.
00576 0E80 0C25 		DW	0x250C	;SM LAMP
00577 0E82 FEFE 		DW	None	;SM LAMP2
00578 0E84 FEFE 		DW	None	;SM Toggle Sw
00579 0E86 E501 		DW	EnableCTZoneC2	;SM Enable
00580 0E88 1000 		DW	RevBlkRequired	;Flags
00581 0E8A 	;
00582 0E8A 	;======================================================================================
00583 0E8A 	; Zone Control LEDs
00584 0E8A E401 		DW	EnableCTZoneC3	;SM Num 1
00585 0E8C FEFE 		DW	None	;SM Num 2
00586 0E8E FEFE 		DW	None	;SM Num 3
00587 0E90 FEFE 		DW	None	;ROOT
00588 0E92 FEFE 		DW	None	;NORMAL
00589 0E94 FEFE 		DW	None	;REV.
00590 0E96 0A4B 		DW	0x4B0A	;SM LAMP
00591 0E98 FEFE 		DW	None	;SM LAMP2
00592 0E9A FEFE 		DW	None	;SM Toggle Sw
00593 0E9C FEFE 		DW	None	;SM Enable
00594 0E9E 0000 		DW	0x0000	;Flags
00595 0EA0 	;
00596 0EA0 E501 		DW	EnableCTZoneC2	;SM Num 1 Hi 229
00597 0EA2 FEFE 		DW	None	;SM Num 2
00598 0EA4 FEFE 		DW	None	;SM Num 3
00599 0EA6 FEFE 		DW	None	;ROOT
00600 0EA8 FEFE 		DW	None	;NORMAL
00601 0EAA FEFE 		DW	None	;REV.
00602 0EAC 0C47 		DW	0x470C	;SM LAMP
00603 0EAE FEFE 		DW	None	;SM LAMP2
00604 0EB0 FEFE 		DW	None	;SM Toggle Sw
00605 0EB2 FEFE 		DW	None	;SM Enable
00606 0EB4 0000 		DW	0x0000	;Flags
00607 0EB6 	;
00608 0EB6 E601 		DW	EnableCTZoneC1	;SM Num 1
00609 0EB8 FEFE 		DW	None	;SM Num 2
00610 0EBA FEFE 		DW	None	;SM Num 3
00611 0EBC FEFE 		DW	None	;ROOT
00612 0EBE FEFE 		DW	None	;NORMAL
00613 0EC0 FEFE 		DW	None	;REV.
00614 0EC2 021E 		DW	0x1E02	;SM LAMP
00615 0EC4 FEFE 		DW	None	;SM LAMP2
00616 0EC6 FEFE 		DW	None	;SM Toggle Sw
00617 0EC8 FEFE 		DW	None	;SM Enable
00618 0ECA 0000 		DW	0x0000	;Flags
00619 0ECC 	; TCC
00620 0ECC F701 		DW	DisableOVZoneC3	;SM Num 1 on
00621 0ECE E401 		DW	EnableCTZoneC3	;SM Num 2 off
00622 0ED0 FEFE 		DW	None	;SM Num 3
00623 0ED2 FEFE 		DW	None	;ROOT
00624 0ED4 FEFE 		DW	None	;NORMAL
00625 0ED6 FEFE 		DW	None	;REV.
00626 0ED8 024B 		DW	0x4B02	;SM LAMP
00627 0EDA FEFE 		DW	None	;SM LAMP2
00628 0EDC FEFE 		DW	None	;SM Toggle Sw
00629 0EDE FEFE 		DW	None	;SM Enable
00630 0EE0 0400 		DW	SM2InvertFlag	;Flags
00631 0EE2 	;
00632 0EE2 F801 		DW	DisableOVZoneC2	;SM Num 1 on
00633 0EE4 E501 		DW	EnableCTZoneC2	;SM Num 2 off
00634 0EE6 FEFE 		DW	None	;SM Num 3
00635 0EE8 FEFE 		DW	None	;ROOT
00636 0EEA FEFE 		DW	None	;NORMAL
00637 0EEC FEFE 		DW	None	;REV.
00638 0EEE 0A47 		DW	0x470A	;SM LAMP
00639 0EF0 FEFE 		DW	None	;SM LAMP2
00640 0EF2 FEFE 		DW	None	;SM Toggle Sw
00641 0EF4 FEFE 		DW	None	;SM Enable
00642 0EF6 0400 		DW	SM2InvertFlag	;Flags
00643 0EF8 	;
00644 0EF8 F901 		DW	DisableOVZoneC1	;SM Num 1 on
00645 0EFA E601 		DW	EnableCTZoneC1	;SM Num 2 off
00646 0EFC FEFE 		DW	None	;SM Num 3
00647 0EFE FEFE 		DW	None	;ROOT
00648 0F00 FEFE 		DW	None	;NORMAL
00649 0F02 FEFE 		DW	None	;REV.
00650 0F04 0C1E 		DW	0x1E0C	;SM LAMP
00651 0F06 FEFE 		DW	None	;SM LAMP2
00652 0F08 FEFE 		DW	None	;SM Toggle Sw
00653 0F0A FEFE 		DW	None	;SM Enable
00654 0F0C 0400 		DW	SM2InvertFlag	;Flags
00655 0F0E 	;
00656 0F0E 	; OV
00657 0F0E F701 		DW	DisableOVZoneC3	;SM Num 1 off
00658 0F10 E401 		DW	EnableCTZoneC3	;SM Num 2 off
00659 0F12 FEFE 		DW	None	;SM Num 3
00660 0F14 FEFE 		DW	None	;ROOT
00661 0F16 FEFE 		DW	None	;NORMAL
00662 0F18 FEFE 		DW	None	;REV.
00663 0F1A FEFE 		DW	None	;SM LAMP
00664 0F1C 0C4B 		DW	0x4B0C	;SM LAMP2
00665 0F1E FEFE 		DW	None	;SM Toggle Sw
00666 0F20 FEFE 		DW	None	;SM Enable
00667 0F22 0E00 		DW	0x000E	;Flags SM2RequiredFlag+SMLamp2InvertFlag
00668 0F24 	;
CastleGate.asm   MLSMData.inc                                            Page: 57
/HPRR Electrical Dept/Castlegate/Firmware/

00669 0F24 F801 		DW	DisableOVZoneC2	;SM Num 1 off
00670 0F26 E501 		DW	EnableCTZoneC2	;SM Num 2 off
00671 0F28 FEFE 		DW	None	;SM Num 3
00672 0F2A FEFE 		DW	None	;ROOT
00673 0F2C FEFE 		DW	None	;NORMAL
00674 0F2E FEFE 		DW	None	;REV.
00675 0F30 FEFE 		DW	None	;SM LAMP
00676 0F32 0247 		DW	0x4702	;SM LAMP2
00677 0F34 FEFE 		DW	None	;SM Toggle Sw
00678 0F36 FEFE 		DW	None	;SM Enable
00679 0F38 0E00 		DW	0x000E	;Flags SM2RequiredFlag+SMLamp2InvertFlag
00680 0F3A 	;
00681 0F3A F901 		DW	DisableOVZoneC1	;SM Num 1 off
00682 0F3C E601 		DW	EnableCTZoneC1	;SM Num 2 off
00683 0F3E FEFE 		DW	None	;SM Num 3
00684 0F40 FEFE 		DW	None	;ROOT
00685 0F42 FEFE 		DW	None	;NORMAL
00686 0F44 FEFE 		DW	None	;REV.
00687 0F46 FEFE 		DW	None	;SM LAMP
00688 0F48 0A1E 		DW	0x1E0A	;SM LAMP2
00689 0F4A FEFE 		DW	None	;SM Toggle Sw
00690 0F4C FEFE 		DW	None	;SM Enable
00691 0F4E 0E00 		DW	0x000E	;Flags SM2RequiredFlag+SMLamp2InvertFlag
00692 0F50 	;
00693 0F50 FF 		DB	EOD
00694 0F51 	;
00695 0F51 	;
00696 0F51 	;===========================================================================================
00697 0F51 	; Data to light odd LEDs not in SMData
00698 0F51 	;
00699 0F51 	AuxSMLEDsData	
00700 0F51 	;300 to 310-1
00701 0F51 4202 		DW	d'66'+SMOffRouteFlag
00702 0F53 4400 		DW	d'68'
00703 0F55 6802 		DW	d'104'+SMOffRouteFlag
00704 0F57 FEFE 		DW	None	;Marks end of SMs
00705 0F59 29 		DB	BlkNum300	;Root block
00706 0F5A 0C2A 		DW	0x2A0C	;310-1
00707 0F5C 	;300 to 310-2
00708 0F5C 4202 		DW	d'66'+SMOffRouteFlag
00709 0F5E 4400 		DW	d'68'
00710 0F60 6800 		DW	d'104'
00711 0F62 FEFE 		DW	None	;Marks end of SMs
00712 0F64 29 		DB	BlkNum300	;Root block
00713 0F65 0C2B 		DW	0x2B0C	;310-2
00714 0F67 	;300 to 311-1
00715 0F67 4202 		DW	d'66'+SMOffRouteFlag
00716 0F69 4402 		DW	d'68'+SMOffRouteFlag
00717 0F6B 6B00 		DW	d'107'
00718 0F6D FEFE 		DW	None	;Marks end of SMs
00719 0F6F 29 		DB	BlkNum300	;Root block
00720 0F70 0A2A 		DW	0x2A0A	;311-1
00721 0F72 	;300 to 311-2
00722 0F72 4202 		DW	d'66'+SMOffRouteFlag
00723 0F74 4402 		DW	d'68'+SMOffRouteFlag
00724 0F76 6B02 		DW	d'107'+SMOffRouteFlag
00725 0F78 FEFE 		DW	None	;Marks end of SMs
00726 0F7A 29 		DB	BlkNum300	;Root block
00727 0F7B 0C2D 		DW	0x2D0C	;311-2
00728 0F7D 	;300 to 312-1
00729 0F7D 4200 		DW	d'66'
00730 0F7F 4302 		DW	d'67'+SMOffRouteFlag
00731 0F81 7802 		DW	d'120'+SMOffRouteFlag
00732 0F83 FEFE 		DW	None	;Marks end of SMs
00733 0F85 29 		DB	BlkNum300	;Root block
00734 0F86 0C2E 		DW	0x2E0C	;312-1
00735 0F88 	;300 to 312-2
00736 0F88 4200 		DW	d'66'
00737 0F8A 4302 		DW	d'67'+SMOffRouteFlag
00738 0F8C 7800 		DW	d'120'
00739 0F8E FEFE 		DW	None	;Marks end of SMs
00740 0F90 29 		DB	BlkNum300	;Root block
00741 0F91 0C2F 		DW	0x2F0C	;312-2
00742 0F93 	;300 to 313-1
00743 0F93 4200 		DW	d'66'
00744 0F95 4300 		DW	d'67'
00745 0F97 7500 		DW	d'117'
00746 0F99 FEFE 		DW	None	;Marks end of SMs
00747 0F9B 29 		DB	BlkNum300	;Root block
00748 0F9C 0C30 		DW	0x300C	;313-1
00749 0F9E 	;300 to 313-2
00750 0F9E 4200 		DW	d'66'
00751 0FA0 4300 		DW	d'67'
00752 0FA2 7502 		DW	d'117'+SMOffRouteFlag
00753 0FA4 FEFE 		DW	None	;Marks end of SMs
00754 0FA6 29 		DB	BlkNum300	;Root block
00755 0FA7 0C31 		DW	0x310C	;313-2
00756 0FA9 	;
00757 0FA9 	;
00758 0FA9 FF 		DB	EOD
00759 0FAA FF 		DB	EOD	;it reads this one.
00982 0FAB 		include	LowStuff.asm	;starts at 0x0000
00001 0FAB 		subtitle	"LowStuff.asm"

00002 0FAB 		page
00003 0FAB 	;===========================================================================================
00004 0FAB 	;
00005 0FAB 	;  FileName: LowStuff.asm
00006 0FAB 	;  Date: 5/25/09
00007 0FAB 	;  File Version: 1.8.3
CastleGate.asm   "LowStuff.asm"                                          Page: 58
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

00008 0FAB 	;  
00009 0FAB 	;  Author: David M. Flynn
00010 0FAB 	;  Company: Oxford V.U.E., Inc.
00011 0FAB 	;
00012 0FAB 	;============================================================================================
00013 0FAB 	; Notes:
00014 0FAB 	;
00015 0FAB 	;  This file is all general perpose routines.
00016 0FAB 	;  Custom stuff is in Main.asm
00017 0FAB 	;     OnTheTick is called every 1/20th second
00018 0FAB 	;     OnTheHalfSecond is Goto'd every 1/2 second
00019 0FAB 	;
00020 0FAB 	;  I2C EEPROMs
00021 0FAB 	;    The brain has 8 medium width SOIC ICs at U2..U9 with hardware addresses of 0..7.
00022 0FAB 	;    These locations may be populated with 24LC256 I/SM 256Kb (32K x 8) serial EEPROMs
00023 0FAB 	;    with 64 bytes per page or 24LC512 I/SM 512Kb (64K x 8) serial EEPROMs with 128 bytes per page.
00024 0FAB 	;    All the chips installed must be the same.
00025 0FAB 	;    EEPROMs must be installed in 64KB increments.
00026 0FAB 	;    The routines in this file do NOT test for writes across page boundies.
00027 0FAB 	;    Default is to use 15+3 bit addressing for 24LC256s. Set Using64KBEEPROM to 1 by
00028 0FAB 	;    defining the constant Using64KBEEPROM=1 to use 16+3 bit addressing.
00029 0FAB 	;    EndOfEEROM defaults to 0x01 for 64Kbytes of eeprom set to 0x02 for 128BK, 0x03 for 192KB, etc.
00030 0FAB 	;
00031 0FAB 	;  Calls/gotos to routines outside this segment:
00032 0FAB 	;
00033 0FAB 	;	if CodeMemStrings
00034 0FAB 	;	mCall0To2	StringDispatch	;Get the next Char
00035 0FAB 	;	endif
00036 0FAB 	;
00037 0FAB 	;	mCall0To2	OnTheTick	;call every 1/20th sec
00038 0FAB 	;
00039 0FAB 	;	GOTO	Main	; go to beginning of program
00040 0FAB 	;
00041 0FAB 	;	BSF	PCLATH,4
00042 0FAB 	;	GOTO	OnTheHalfSecond
00043 0FAB 	;
00044 0FAB 	;============================================================================================
00045 0FAB 	; Revision History
00046 0FAB 	; 1.8.3     5/25/2009	Added conditional Do_ZeroRAM
00047 0FAB 	; 1.8.2     4/6/2009	Changed conditional UsesLCD>>PrintString
00048 0FAB 	; 1.8.1     12/16/2008	Added support for 24AA02E48 HasMAC_Addr_EEPROM=1
00049 0FAB 	; 1.8       4/5/2008	Added UsesPulseCounter1/2 Pulse counters on CCP1/CCP2
00050 0FAB 	; 1.7.11    5/7/2006	Fixed RS232BufIO.
00051 0FAB 	; 1.7.10    5/6/06	Moved UsesRS232BufIO vars to bank3, made ScanRS232In interupt driven.
00052 0FAB 	; 1.7.9     10/6/05	Added support for ServoControl.asm, UsesServoControl
00053 0FAB 	; 1.7.8     3/29/05	Added UsesPushPopParams,UsesSRamPushPopPrm, minor improvments to Push and Pop.
00054 0FAB 	; 1.7.7     3/13/05	Fixed SRAM_Zero problem with CurrentAddress buffers
00055 0FAB 	; 1.7.6     2/7/05	Changed some mBank0's to CLRF STATUS to save a byte
00056 0FAB 	;	Added some conditionsal's (opt-in type) UsesDelay10uS, UsesDelay40uS,
00057 0FAB 	;	 UsesLCDBlink, UsesLCDClear, UsesLCDCursoBlink, Useslcd_Home, Useslcd_ReadData
00058 0FAB 	;
00059 0FAB 	; 1.7.5     1/27/05	Fixed EraseEEROM:clear ptr to point to last byte in Data, 0x007FFF
00060 0FAB 	; 1.7.4     1/16/05	Added comments.
00061 0FAB 	; 1.7.3     9/21/04	Added some conditionals:UsesByte2Str,UsesDateToBCD,UsesNum2Str,UsesNum3BToStr
00062 0FAB 	; 1.7.2     9/5/04	Moved RTC equ's into this file.
00063 0FAB 	; 1.7.1     8/2/04	Added DispIPLine defaults to 1.
00064 0FAB 	; 1.7       4/28/04	Added AddressEEROMR, CopyEEROMtoSRAM, changed AddressEEROM
00065 0FAB 	;	Added Using64KBEEPROM, EndOfEEROM
00066 0FAB 	;	The maximum EEROM size is now 512KB (8 x 24LC512I/SM)
00067 0FAB 	; 1.6       3/31/04	Added Display_Colon, Display_Dot, DispIP, DispMAC.
00068 0FAB 	; 1.5.18    1/27/04	Added InitLCDAtStartup defalts to 1.
00069 0FAB 	; 1.5.17    1/19/04	Fixed a goto in "if ShowSplashScrn else ... "
00070 0FAB 	;	Changed StandardInits no longer shows the SIGNONStr when ShowSplashScrn=1
00071 0FAB 	; 1.5.16    12/25/03	Changed DispDec2pl, DispDec3pl, BtnDebounce and ClrLine to #Define
00072 0FAB 	; 1.5.15    12/8/03	Changed SendRS232,SendToLCD to #Define
00073 0FAB 	;	Added lcd_SetDDRamAddress, lcd_ReadData
00074 0FAB 	;	Moved write of LDO's before read of LDI's
00075 0FAB 	; 1.5.14    11/30/03	Added Disp_decbyteW3pl and Disp_decbyteW2pl
00076 0FAB 	; 1.5.13    11/24/03	Added Timer Finished routine calls for timers >=2. constant UsesTimerFinished
00077 0FAB 	; 1.5.12    11/15/03	Added ifndef for UsesMAX110, Fixed SRAM test bug.
00078 0FAB 	; 1.5.11    10/12/03	Changed ISR timers so ISR_Timers can be any value
00079 0FAB 	; 1.5.10    9/3/03	Added Disp_NLS to work with Disp_LZO to kill spaces
00080 0FAB 	; 1.5.9     8/29/03	Added Disp_LZO option to Disp_dec3B
00081 0FAB 	; 1.5.8     8/24/03	Moved to MathStuff.asm:Div24x0A,Div16x16
00082 0FAB 	; 1.5.7     8/15/03	Added SRAM_ReadDR.
00083 0FAB 	; 1.5.6     6/23/03	Added Call ScrollStringIdle
00084 0FAB 	; 1.5.5     6/1/03	Added constant EraseROMMsgLine=2, DateToBCD
00085 0FAB 	; 1.5.4     5/14/03    Added SRAM_ReadPD.
00086 0FAB 	; 1.5.3     5/6/03	Extended the use of DisplayOrPut, NumsToNic.
00087 0FAB 	; 1.5.2     4/21/03	Added UsesOscilator1, UsesOscilator2: oscilators on CCP1 and CCP2.
00088 0FAB 	;	PortC bits:CCP1, CCP2, Oscilator1Time, Oscilator2Time.
00089 0FAB 	; 1.5.1     4/18/03	Added new names SelectLDI2, SelectLDI3, SelectLDO2, SelectLDO3, SelMax110
00090 0FAB 	;	Added support for LDO_2 and LDO_3.
00091 0FAB 	; 1.5       4/17/03	Added LCD cursor control routines.
00092 0FAB 	;	Moved LCD equates into LowStuff.asm.
00093 0FAB 	; 1.4.5     4/15/03	Changed Flags26,escaped to escaped.
00094 0FAB 	; 1.4.4     4/10/03	Added UsesISR, TXSTAValue.
00095 0FAB 	; 1.4.3      4/9/03	Added BaudRate, defaults to Baud9600
00096 0FAB 	; 1.4.2      4/8/03	Added port A init value PORTA_Value.
00097 0FAB 	;	Added defaults section.
00098 0FAB 	; 1.4.1      4/5/03	Fixed a initialization problem w/ 74AHC573 latches
00099 0FAB 	; 1.4        4/4/03    Added Modeless Serial IO
00100 0FAB 	;	if UsesRS232BufIO
00101 0FAB 	;  in bank 3
00102 0FAB 	;   rsInBuffCount	RES	1	;0 = No chrs in buffer
00103 0FAB 	;   rsOutBuffCount	RES	1
00104 0FAB 	;   rsInBuffPtr	RES	1	;get byte post inc
00105 0FAB 	;   rsOutBuffPtr	RES	1	;send byte post inc
00106 0FAB 	;   #Define	rsGotChar	Flags27,0	;Set if a byte is in W
00107 0FAB 	;  in SRAM
CastleGate.asm   "LowStuff.asm"                                          Page: 59
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

00108 0FAB 	;   evRS232InBuff	EQU	0x0204	;256 bytes
00109 0FAB 	;   evRS232OutBuff	EQU	0x0205	;256 bytes
00110 0FAB 	;  new routines: ScanRS232In, GetRS232Chr, ScanRS232Out, PutRS232Chr
00111 0FAB 	;	endif
00112 0FAB 	;
00113 0FAB 	; 1.3.4      3/28/03	Added ShowSplashScrn/DispSplashScrn
00114 0FAB 	;	Fixed bug in SetupDataROM
00115 0FAB 	; 1.3.3      3/27/03   Added LCD_ChrsPerLine to PrintString
00116 0FAB 	;	Added lcd_gotoxy_NC
00117 0FAB 	; 1.3.2      3/26/03	Added UsesSRAM,UsesNIC, and expanded UsesI2C
00118 0FAB 	;	Modified ANATest w/ ANATestSpacing,ANATestLine
00119 0FAB 	; 1.3.1      2/26/03   Optimizing and commenting.
00120 0FAB 	; 1.3        2/21/03	Moved Standard initialization routines to LowStuff
00121 0FAB 	; 1.2        2/18/03   Added SetupDataROM
00122 0FAB 	; 1.1.5      2/12/03	Minor bug fixes to Disp_dec3B,read_adcs
00123 0FAB 	; 1.1.4      1/24/03   Modified Disp_decbyteW, Disp_decword, Disp_dec3B to replace
00124 0FAB 	;	their counterparts in NICStuff.
00125 0FAB 	;	Added SRAM_WritePI, SRAM_ReadPI
00126 0FAB 	; 1.1.3      1/17/03	Added conditions UsesLCD and RS232Config
00127 0FAB 	; 1.1.2     12/18/02   Modified SRam test to return if no error and Param70<>0
00128 0FAB 	; 1.1.1     10/25/02   Moved custom routines to main.asm
00129 0FAB 	;	 This file is now all standard routines
00130 0FAB 	;	 Moved serial and other unused routines back into LowStuff.asm
00131 0FAB 	;	 Current size 0x7A9 w/ everything on.
00132 0FAB 	;
00133 0FAB 	; 1.1       10/22/02   Moved unused/old code to OldCode file.
00134 0FAB 	;	Optimized scanio to (1+3) from (1+5)
00135 0FAB 	; 1.0.3     10/16/02   Strings to SRAM
00136 0FAB 	; 1.0.2     10/1/02	Strings moved to main.asm, oldCode moved to end
00137 0FAB 	; 1.0.1     9/17/02	Fisrt rev'd version
00138 0FAB 	;
00139 0FAB 	;============================================================================================
00140 0FAB 	; Default values
00141 0FAB 	;
00142 0FAB 		ifndef HasMAC_Addr_EEPROM
00144 0FAB 		endif
00145 0FAB 	;
00146 0FAB 		ifndef UsesPulseCounter1
00148 0FAB 		endif
00149 0FAB 	;
00150 0FAB 		ifndef UsesPulseCounter2
00152 0FAB 		endif
00153 0FAB 	;
00154 0FAB 		ifndef BaudRate
00156 0FAB 		endif
00157 0FAB 	;
00158 0FAB 		ifndef TXSTAValue
00160 0FAB 		endif
00161 0FAB 	;
00162 0FAB 		ifndef PORTA_Value
00164 0FAB 		endif
00165 0FAB 	;
00166 0FAB 		ifndef ANATestSpacing
00168 0FAB 		endif
00169 0FAB 	;
00170 0FAB 		ifndef ANATestLine
00172 0FAB 		endif
00173 0FAB 	;
00174 0FAB 		ifndef ShowSplashScrn
00176 0FAB 		endif
00177 0FAB 	;
00178 0FAB 		ifndef UsesOscilator1
00180 0FAB 		endif
00181 0FAB 	;
00182 0FAB 		ifndef UsesOscilator2
00184 0FAB 		endif
00185 0FAB 	;
00186 0FAB 		ifndef EraseROMMsgLine
00188 0FAB 		endif
00189 0FAB 	;
00190 0FAB 		ifndef UsesMAX110
00192 0FAB 		endif
00193 0FAB 	;
00194 0FAB 		ifndef UsesTimerFinished
00196 0FAB 		endif
00197 0FAB 	;
00198 0FAB 		ifndef InitLCDAtStartup
00200 0FAB 		endif
00201 0FAB 	; I2C EEPROMs
00202 0FAB 		ifndef EnableEEROMCopy
00204 0FAB 		endif
00205 0FAB 		ifndef Using64KBEEPROM
00207 0FAB 		endif
00208 0FAB 		ifndef EndOfEEROM
00211 0FAB 		endif
00212 0FAB 	;
00213 0FAB 		ifndef DispIPLine
00215 0FAB 		endif
00216 0FAB 	;
00217 0FAB 	; Optional features (You must op-in if you need these)
00218 0FAB 	;
00219 0FAB 		ifndef UsesBootloader
00221 0FAB 		endif
00222 0FAB 	;
00223 0FAB 		ifndef UsesByte2Str
00225 0FAB 		endif
00226 0FAB 	;
00227 0FAB 		ifndef UsesDateToBCD
00229 0FAB 		endif
00230 0FAB 	;
CastleGate.asm   "LowStuff.asm"                                          Page: 60
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

00231 0FAB 		ifndef UsesNum2Str
00233 0FAB 		endif
00234 0FAB 	;
00235 0FAB 		ifndef UsesNum3BToStr
00237 0FAB 		endif
00238 0FAB 	;
00239 0FAB 	; Optional features (You must op-out if you don't need these)
00240 0FAB 	;
00241 0FAB 	;   Fix_dec3B,Num3BToStr,Disp_dec3B
00242 0FAB 		ifndef Uses3BNums
00244 0FAB 		endif
00245 0FAB 	;
00246 0FAB 	;   display_rtc
00247 0FAB 		ifndef Use_display_rtc
00249 0FAB 		endif
00250 0FAB 	;
00251 0FAB 	;   DispMAC,DispMAC_E2
00252 0FAB 		ifndef UsesDispMAC
00254 0FAB 		endif
00255 0FAB 	;
00256 0FAB 		ifndef UsesDelay10uS
00258 0FAB 		endif
00259 0FAB 		ifndef UsesDelay40uS
00261 0FAB 		endif
00262 0FAB 	;
00263 0FAB 		ifndef UsesLCDBlink
00265 0FAB 		endif
00266 0FAB 		ifndef UsesLCDClear
00268 0FAB 		endif
00269 0FAB 		ifndef UsesLCDCursoBlink
00271 0FAB 		endif
00272 0FAB 		ifndef Useslcd_Home
00274 0FAB 		endif
00275 0FAB 		ifndef Useslcd_ReadData
00277 0FAB 		endif
00278 0FAB 		ifndef UsesPushPopParams
00280 0FAB 		endif
00281 0FAB 		ifndef UsesSRamPushPopPrm
00283 0FAB 		endif
00284 0FAB 		ifndef UsesServoControl
00286 0FAB 		endif
00287 0FAB 	;
00288 0FAB 	;============================================================================================
00289 0FAB 	; Conditionals
00290 0FAB 	;
00291 0FAB 	;
00292 0FAB 	; UsesI2C	open_file, close_file, i2c_stop, i2c_start, i2c_writeW,
00293 0FAB 	;	i2c_read1, i2c_read
00294 0FAB 	; ISR_Timers	DoDecTimers
00295 0FAB 	; CodeMemStrings	StringDispatch
00296 0FAB 	; SRAM_Strings	StringDispatch
00297 0FAB 	; UsesPushPop	PushParams, PopParams, Push, Pop
00298 0FAB 	; Do_SRAM_Test	SRAM_Test
00299 0FAB 	; Do_RS232_Test	RS232_Test
00300 0FAB 	; UsesLCD	lcd_nybble, lcd_Home, lcd_Clear, wait_LCD_Ready, lcd_gotoWClr,
00301 0FAB 	;	lcd_GotoLineW,PrintString
00302 0FAB 	; UsesDataLogging	TimeToSRAM
00303 0FAB 	; HasRTC	display_rtc, set_rtc, read_rtc, read_rtc_byte, read_rtc_nibble,
00304 0FAB 	;	write_rtc_nibble, lcd_gotoxy, SendLCD_CmdW, lcd_char, Init_LCD
00305 0FAB 	; Do_LD_Test	LD_Test
00306 0FAB 	; RTCTest	calls display_rtc from ToggleSysLED
00307 0FAB 	; ANATest	displays adcs 0,1, and 3 as X, Y, and Z from ToggleSysLED
00308 0FAB 	; UsesLDI0	calls ReadLDI_0 from scan_io
00309 0FAB 	; UsesLDI1	calls ReadLDI_1 from scan_io
00310 0FAB 	; UsesLDI2	calls ReadLDI_2 from scan_io
00311 0FAB 	; UsesLDI3	calls ReadLDI_3 from scan_io
00312 0FAB 	; UsesLDO0	calls OPT_WriteLDO_0 from scan_io
00313 0FAB 	; UsesLDO1	calls OPT_WriteLDO_1 from scan_io
00314 0FAB 	;
00315 0FAB 	; AnyANAUsed	read_adcs, ReadADC
00316 0FAB 	;
00317 0FAB 	; UsesRS232	init port
00318 0FAB 	; RS232Active	DispSerial, putchar, get_char, getnum, TXString
00319 0FAB 	; RS232Config	user_config, xmodem_recv
00320 0FAB 	; Do_eeROM_Test	eeROM_Test
00321 0FAB 	; UsesMAX110	WaitMAX110NotBusy, CalMAX110, ReadMAX110
00322 0FAB 	; UsesRS232BufIO	ScanRS232In, GetRS232Chr, ScanRS232Out, PutRS232Chr
00323 0FAB 	;
00324 0FAB 	; Uses3BNums	Fix_dec3B,Num3BToStr,Disp_dec3B
00325 0FAB 	; Use_display_rtc	display_rtc
00326 0FAB 	; UsesDispMAC	DispMAC
00327 0FAB 	; UsesByte2Str	Byte2Str
00328 0FAB 	; UsesDateToBCD	DateToBCD
00329 0FAB 	; UsesNum2Str	Num2Str
00330 0FAB 	; UsesNum3BToStr	Num3BToStr
00331 0FAB 	; UsesDelay10uS	Delay10uS
00332 0FAB 	; UsesDelay40uS	Delay40uS
00333 0FAB 	; UsesLCDBlink	lcd_Blink
00334 0FAB 	; UsesLCDClear	lcd_Clear
00335 0FAB 	; UsesLCDCursoBlink	lcd_CursorBlink
00336 0FAB 	; Useslcd_Home	lcd_Home
00337 0FAB 	; Useslcd_ReadData	lcd_SetDDRamAddress,lcd_ReadData
00338 0FAB 	; 
00339 0FAB 	;============================================================================================
00340 0FAB 	;
00341 0FAB 	;Routines in segment 0
00342 0FAB 	; Name	(additional stack words required) Description
00343 0FAB 	;============================================================================================
00344 0FAB 	;
00345 0FAB 	;StandardInits	(1+3) ClearRam, Init ANA I/O, Setup RS232, Setup I2C bus, PortB, PortD, PortA, PortE
CastleGate.asm   "LowStuff.asm"                                          Page: 61
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

00346 0FAB 	;	T1CON, Latched Outputs, T2CON, INTCON, PR2, myeth, Init_LCD, test/zero SRAM, SetupStrings,
00347 0FAB 	;	Display SIGNONStr
00348 0FAB 	; 
00349 0FAB 	;ClearRam	(1+0) Clear all the 'F877's RAM to 0
00350 0FAB 	;
00351 0FAB 	;PrintString	(1+2) Send a string (W) to DisplaysW
00352 0FAB 	;TXString	(1+0) Send a string out the serial port
00353 0FAB 	;
00354 0FAB 	;Fix_decbyte	(0) used in converting base 10 byte values to ascii
00355 0FAB 	;Disp_decbyteW3pl	(1+2) Sets Flags25:DispDec3pl
00356 0FAB 	;Disp_decbyteW2pl	(1+2) Sets Flags25:DispDec2pl
00357 0FAB 	;Disp_decbyteW	(1+2) Display a byte in unsigned decimal format no leading 0's no leading spaces
00358 0FAB 	;Fix_decword	(0) Used to convert a word value to a string
00359 0FAB 	;Num2Str	(1+1) Convert an Int16 (Param77:Param76) to a pStr at txbuff
00360 0FAB 	;Disp_decword	(1+2) 16 bit version of Disp_decbyteW
00361 0FAB 	;Fix_dec3B	(0) Used to convert a 3 byte value to a string
00362 0FAB 	;Num3BToStr	(1+1) Convert an Int24 at Param77:Param76:Param74 to a pStr at txbuff
00363 0FAB 	;Disp_dec3B	(1+2) 24 bit version of Disp_decbyteW
00364 0FAB 	;
00365 0FAB 	;ReadData	(0) Read Data from input device, W = select value (Select0,SelectSRAM, etc.)
00366 0FAB 	;
00367 0FAB 	;Set8bitAddr	(0) Set the low 8 address bits to the value in the W
00368 0FAB 	;SetSRAM_Addr	(0) Put the SRAM address on the address bus
00369 0FAB 	;SRAM_OffsetAddr	(0) Offset the SRAM_Addr by W
00370 0FAB 	;SRAM_NextAddr	(0) Increments the SRAM_Addr
00371 0FAB 	;SRAM_PrevAddr	(0) Decrements the SRAM_Addr
00372 0FAB 	;SRAM_WritePI	(1+0) Write the value in the W to SRAM address SRAM_Addr then increment address
00373 0FAB 	;SRAM_Write	(1+0) Write the value in the W to SRAM address SRAM_Addr
00374 0FAB 	;SRAM_ReadPD	(1+0) Read the value in SRAM address SRAM_Addr into the W then decrement address
00375 0FAB 	;SRAM_ReadDR	(1+0) Set SRAM address to evDataROM+W then SRAM_ReadPI
00376 0FAB 	;SRAM_ReadPI	(1+0) Read the value in SRAM address SRAM_Addr into the W then increment address
00377 0FAB 	;StringDispatch	(1+0) Param7F=String Number (0..n), Param7D=Character Number
00378 0FAB 	;SRAM_Read	(1+0) Read the value in SRAM address SRAM_Addr into the W
00379 0FAB 	;SRAM_Test	(1+3) Test the SRAM (512KB) a successful test displays (SRAM:5A.1.2.3)
00380 0FAB 	;SRAM_Zero	(1+3) Zero the Static RAM
00381 0FAB 	;ZeroSRAM_Addr	(1+0) Setup the SRAM address buffers and variables
00382 0FAB 	;
00383 0FAB 	;Processor RAM version
00384 0FAB 	;PushParams	(0) Push Params76..7D stack++,  STATUS, FSR and W are unchanged
00385 0FAB 	;PopParams	(0) POP Params76..7D --stack,  STATUS, FSR and W are unchanged
00386 0FAB 	;Push	(0) Push the W onto the stack++,  STATUS, FSR and W are unchanged
00387 0FAB 	;Pop	(0) Pop the W from the --stack,  STATUS and FSR are unchanged
00388 0FAB 	;
00389 0FAB 	;SRAM version
00390 0FAB 	;PushParams	(1+1) Push Params76..7D stack++,  STATUS, FSR and W are unchanged
00391 0FAB 	;PopParams	(1+1) POP Params76..7D --stack,  STATUS, FSR and W are unchanged
00392 0FAB 	;Push	(1+1) Push the W onto the stack++,  STATUS, FSR and W are unchanged
00393 0FAB 	;Pop	(1+1) Pop the W from the --stack,  STATUS and FSR are unchanged
00394 0FAB 	;
00395 0FAB 	;Delay1Sec	(1+0) Delay 1 Second (RAM used:Param77,78,79)
00396 0FAB 	;DelayWmS	(0)   Delay (value in W) milliseconds (RAM used:Param77,78,79)
00397 0FAB 	;Delay10uS	(0)   Delay 10us (RAM used:Param77)
00398 0FAB 	;Delay100uS	(0)   Delay 100us (RAM used:Param77)
00399 0FAB 	;Delay40uS	(0)   Delay 40us (RAM used:Param77)
00400 0FAB 	;DelayWuS	(0)   Delay W us (RAM used:Param77)
00401 0FAB 	;
00402 0FAB 	;lcd_nybble	(0)   Send a nybble to the LCD
00403 0FAB 	;lcd_On	(1+0) Send LCD command for Disp On, Cursor Off, Blink Off
00404 0FAB 	;lcd_Blink	(1+0) Send LCD command for Disp On, Cursor Off, Blink On
00405 0FAB 	;lcd_CursorBlink	(1+0) Send LCD command for Disp On, Cursor On, Blink On
00406 0FAB 	;lcd_Cursor	(1+0) Send LCD command for Disp On, Cursor On, Blink Off
00407 0FAB 	;lcd_Home	(1+0) Home the cursor without clearing DDRAM
00408 0FAB 	;lcd_Clear	(1+0) Home the cursor clearing DDRAM
00409 0FAB 	;lcd_SetDDRamAddress	(1+0) Set the DD Ram Address (W)
00410 0FAB 	;lcd_ReadData	(1+0) Read from DD Ram (Data returned in W and Param78)
00411 0FAB 	;wait_LCD_Ready	(0)   Polls the LCDs Busy Flag until clear
00412 0FAB 	;lcd_GotoLineW	(1+0) Goto the beginning of line W, Clears line.
00413 0FAB 	;lcd_gotoxy	(1+0) Go to an X-Y position on the display, top left is 0, 0 (W,Param78)
00414 0FAB 	;lcd_gotoxy_NC	(1+0) No Clear version of lcd_gotoxy
00415 0FAB 	;SendLCD_CmdW	(1+0) Send a command byte in W to the LCD as two nybbles
00416 0FAB 	;SendLCD_Cmd79	(1+0) Send a command byte in Param79 to the LCD as two nybbles
00417 0FAB 	;lcd_char	(1+0) Send a character byte to the LCD as two nybbles
00418 0FAB 	;Init_LCD	(1+1) Initialise the LCD
00419 0FAB 	;
00420 0FAB 	;Byte2Str	(1+1) Convert a Byte (Param77) to a pStr at txbuff
00421 0FAB 	;Disp_Hex_Byte	(1+2) Send a byte, W, to the display as 2 hex digits
00422 0FAB 	;Disp_Hex_Nibble	(1+1) Send a nibble to the display as a hex digit
00423 0FAB 	;
00424 0FAB 	;Display_Colon	(1+1) Load a ':' into the W and goto DisplaysW
00425 0FAB 	;Display_Dot	(1+1) Load a '.' into the W and goto DisplaysW
00426 0FAB 	;DisplaysW	(1+1) Display handler; redirects to LCD and/or serial
00427 0FAB 	;DispSerial	(1+0) Send the Char in Param75
00428 0FAB 	;putchar	(0) Send the byte in the W out the serial port
00429 0FAB 	;DispNIC	(1+1) Send the char to the NIC
00430 0FAB 	;RS232_Test	(1+0) Test the RS232 port by echoing every character
00431 0FAB 	;
00432 0FAB 	;ReadEE79	(0) Read from the CPU's EEPROM using Param79 as Address
00433 0FAB 	;ReadEE79PI	(0) Read from the CPU's EEPROM using Param79++ as Address
00434 0FAB 	;ReadEEwW	(0) Read from the CPU's EEPROM using W as Address
00435 0FAB 	;WriteEEP79WPI	(0) Write CPU's EEPROM using address from Param79++ and Data in W
00436 0FAB 	;WriteEEP79W	(0) Write CPU's EEPROM using address from Param79 and Data in W
00437 0FAB 	;WriteEEwW	(0) Write CPU's EEPROM using current value in EEADR and W as Data
00438 0FAB 	;
00439 0FAB 	;   Reading/Writing 2 LSBs of MAC Address and 4 byte IP address
00440 0FAB 	;csum_nonvol	(1+0) Do a 1's complement checksum of the CPU's non-volatile eeprom
00441 0FAB 	;read_nonvol	(1+1) Read in the nonvolatile parameters to ram, return 0 if error
00442 0FAB 	;write_nonvol	(1+1) Write out the nonvolatile parameters to CPU's eeprom
00443 0FAB 	;
00444 0FAB 	;TimeToSRAM	(1+1) copy the 6 byte time to the SRAM
00445 0FAB 	;display_rtc	(1+3) Display the RTC on the LCD in the from YY:MM:DD:HH:mm:ss
CastleGate.asm   "LowStuff.asm"                                          Page: 62
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

00446 0FAB 	;DateToBCD	(1+0) Convert RTC_Year..RTC_Seconds to BCD for set_rtc
00447 0FAB 	;set_rtc	(1+1) Set the RTC with Data form RTC_Year..RTC_Seconds (BCD format)
00448 0FAB 	;read_rtc	(1+2) Read the Real Time Clock
00449 0FAB 	;read_rtc_byte	(1+1) Read one byte from the Real Time Clock
00450 0FAB 	;read_rtc_nibble	(1+0) Read one nibble from the Real Time Clock
00451 0FAB 	;write_rtc_nibble	(1+0) Writes the low nibble from Param79 to the RTC Address from Param78
00452 0FAB 	;
00453 0FAB 	;WaitMAX110NotBusy	(1+1) Wait for the MAX110 to finish, will loop forever if an error occures
00454 0FAB 	;CalMAX110	(1+2) Calibrate the MAX110 14bit ADC for Channel 0
00455 0FAB 	;ReadMAX110	(0) Read the MAX110 14bit ADC Channel 0
00456 0FAB 	;
00457 0FAB 	;OPT_WriteLDO_0	(0) if CMD_LDO_0<>CurrentLDO_0 then WriteLDO_0
00458 0FAB 	;WriteLDO_0	(0) Write the data in CurrentLDO_0 to the latch
00459 0FAB 	;OPT_WriteLDO_1	(0) if CMD_LDO_1<>CurrentLDO_1 then WriteLDO_1
00460 0FAB 	;WriteLDO_1	(0) Write the data in CurrentLDO_1 to the latch
00461 0FAB 	;OPT_WriteLDO_2	(0) if CMD_LDO_1<>CurrentLDO_2 then WriteLDO_2
00462 0FAB 	;WriteLDO_2	(0) Write the data in CurrentLDO_2 to the latch
00463 0FAB 	;OPT_WriteLDO_3	(0) if CMD_LDO_3<>CurrentLDO_3 then WriteLDO_3
00464 0FAB 	;WriteLDO_3	(0) Write the data in CurrentLDO_3 to the latch
00465 0FAB 	;ReadLDI_0	(1+0) Read the data from the latch and store it at CurrentLDI_0 & W
00466 0FAB 	;ReadLDI_1	(1+0) Read the data from the latch and store it at CurrentLDI_1 & W
00467 0FAB 	;ReadLDI_2	(1+0) Read the data from the latch and store it at CurrentLDI_2 & W
00468 0FAB 	;ReadLDI_3	(1+0) Read the data from the latch and store it at CurrentLDI_3 & W
00469 0FAB 	;LD_Test	    Flash each led for 1 seconds then echo switches to LEDs
00470 0FAB 	;
00471 0FAB 	;geticks	(0) Update the current tick count, return W=1 if changed
00472 0FAB 	;scan_io	(1+3) Check timer, scan ADCs, toggle LED if timeout 
00473 0FAB 	;read_adcs	(0+0) Read ADC values
00474 0FAB 	;ReadADC	(0) returns ADRESH in Param78 and ADRESL in Param78
00475 0FAB 	;
00476 0FAB 	;AddressEEROMR	(1+0) Set the eeprom address from eeROMbuff.Addr and restart for a read
00477 0FAB 	;AddressEEROM	(1+0) Set the eeprom address from eeROMbuff.Addr writing mode
00478 0FAB 	;ReadEEROM	(1+1) Read data (eeROMbuff.len 1..32 bytes) from eeproms (eeROMbuff.Addr) to eeROMbuff.Data
00479 0FAB 	;EraseEEROM	(1+3) Erases the 2nd eeROM chip and clr the ptrs
00480 0FAB 	;WriteEEROM	(1+1) Write eeROMbuff.Data (eeROMbuff.len 1..32 bytes) to the eeproms (eeROMbuff.Addr)
00481 0FAB 	;CopyEEROMtoSRAM	(1+1) Copy the whole data space (EEROM) to SRAM 32KB buffer evBuff32KB (W= 32KB page #)
00482 0FAB 	;SetupDataROM	(1+2) Copy d.d file to SRAM starting at evDataRom*256
00483 0FAB 	;SetupStrings	(1+2) Copy the s.s file to SRAM starting at evStrings*256
00484 0FAB 	;open_file	(1+0) Open the previously-found file for transmission (serial eeprom)
00485 0FAB 	;close_file	(1+0) Close the previously-opened file (serial eeprom)
00486 0FAB 	;i2c_stop	(0) Ends a iic operation
00487 0FAB 	;i2c_start	(0) Start an iic operation
00488 0FAB 	;i2c_writeW	(0) writes a byte to the serial EEPROM, hangs if no ACK
00489 0FAB 	;i2c_read1	(0) Normal iic read with ACK
00490 0FAB 	;i2c_read	(0) if Param77 then ACK else NAK
00491 0FAB 	;
00492 0FAB 	;find_file	(1+0) Find a filename in ROM filesystem
00493 0FAB 	;user_config	(1+2) User initialisation code; get serial number and IP address
00494 0FAB 	;xmodem_recv	(1+2) Handle incoming XMODEM data block
00495 0FAB 	;
00496 0FAB 	;ScanRS232In	(1+1) Get a character from the RS232 port and put it in the buffer
00497 0FAB 	;GetRS232Chr	(0+1) Get a character from the RS232 input buffer
00498 0FAB 	;ScanRS232Out	(0+1) Put a character from the output buffer in the RS232 port
00499 0FAB 	;PutRS232Chr	(0+1) Put a character into the RS232 output buffer
00500 0FAB 	;
00501 0FAB 	;get_char	(0) Get a character from the serial port
00502 0FAB 	;getnum	(1+1) Get a 16-bit decimal number from the console (serial port)
00503 0FAB 	;eeROM_Test	(1+3) Test the eeROM
00504 0FAB 	;
00505 0FAB 	;DispIP	(1+3) Display IP address on 2nd line
00506 0FAB 	;DispMAC	(1+3) Display MAC address on 2nd line
00507 0FAB 	; 
00508 0FAB 	; 
00509 0FAB 	;============================================================================================
00510 0FAB 	;LCD Stuff
00511 0FAB 	; DMC-20434 20Char x 4 line LCD
00512 0FAB 0028 	LCD_MODE	EQU	0x28
00513 0FAB 0002 	LCD_4Bits	EQU	0x02
00514 0FAB 0002 	LCD_Dots1	EQU	0x02	;5x7 dots
00515 0FAB 0008 	LCD_Dots2	EQU	0x08
00516 0FAB 0006 	LCD_EnterMode	EQU	0x06	;Incrementing cursor, not horiz scroll
00517 0FAB 0001 	LCD_Clear	EQU	0x01
00518 0FAB 0002 	LCD_Home	EQU	0x02
00519 0FAB 0040 	LCD_LINE2	EQU	0x40	;20 dec
00520 0FAB 000C 	LCD_ON	EQU	0x0C	;Disp On, Cursor Off, Blink Off
00521 0FAB 000E 	LCD_Cursor	EQU	b'00001110'	;Disp On, Cursor On, Blink Off
00522 0FAB 000F 	LCD_CursorBlink	EQU	b'00001111'	;Disp On, Cursor On, Blink On
00523 0FAB 000D 	LCD_Blink	EQU	b'00001101'	;Disp On, Cursor Off, Blink On
00524 0FAB 	;
00525 0FAB 0080 	LCD_SETPOS	EQU	0x80
00526 0FAB 	;
00527 0FAB 	;============================================================================================
00528 0FAB 	; Real Time Clock Addresses  EPSON RTC-72421
00529 0FAB 0000 	RTC_OneSec	EQU	0x00	; 1-second digit reg.
00530 0FAB 0001 	RTC_TenSec	EQU	0x01	; 10-second digit reg.
00531 0FAB 0002 	RTC_OneMinute	EQU	0x02	; 1-minute digit reg.
00532 0FAB 0003 	RTC_TenMinute	EQU	0x03	; 10-minute digit reg.
00533 0FAB 0004 	RTC_OneHour	EQU	0x04	; 1-hour digit reg.
00534 0FAB 0005 	RTC_TenHourAMPM	EQU	0x05	; 10-hour digit & AM/PM bit reg.
00535 0FAB 0006 	RTC_OneDay	EQU	0x06	; 1-day digit reg.
00536 0FAB 0007 	RTC_TenDay	EQU	0x07	; 10-day digit reg.
00537 0FAB 0008 	RTC_OneMonth	EQU	0x08	; 1-month digit reg.
00538 0FAB 0009 	RTC_TenMonth	EQU	0x09	; 10-month digit reg.
00539 0FAB 000A 	RTC_OneYear	EQU	0x0A	; 1-year digit reg.
00540 0FAB 000B 	RTC_TenYear	EQU	0x0B	; 10-year digit reg.
00541 0FAB 000C 	RTC_Week	EQU	0x0C	; Week 0..6
00542 0FAB 000D 	RTC_CtrlRegD	EQU	0x0D	; Control Reg. D
00543 0FAB 000E 	RTC_CtrlRegE	EQU	0x0E	; Control Reg. E
00544 0FAB 000F 	RTC_CtrlRegF	EQU	0x0F	; Control Reg. F
00545 0FAB 	;
CastleGate.asm   "LowStuff.asm"                                          Page: 63
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

00546 0FAB 0004 	RTC_AMPMmask	EQU	0x04	; mask to extract AM/PM bit
00547 0FAB 0003 	RTC_KillAMPMmask	EQU	0x03	; mask to kill the AM/PM bit
00548 0FAB 	;RTC_CtrlRegF bits
00549 0FAB 0004 	RTC_24Bit	EQU	0x04	; set this bit for 24 hour mode
00550 0FAB 0005 	RTC_ReadBit	EQU	5	; active low  (PORTD)
00551 0FAB 0004 	RTC_WriteBit	EQU	4	; active low  (PORTD)
00552 0FAB 0010 	RTC_ReadMask	EQU	0x10	; set the write bit
00553 0FAB 0020 	RTC_WriteMask	EQU	0x20	; set the read bit
00554 0FAB 0006 	RTC_CSBit	EQU	6	;RTC chip select Active Low (PORTB)
00555 0FAB 	;============================================================================================
00556 0FAB 	; Reset Vector entry point
00557 0FAB 	;
00558 0FAB 		ORG	0x0000	; processor reset vector
00559 0000 	;
00560 0000 3010 		MOVLW	0x10	; ensure page bits are cleared
00561 0001 008A 		MOVWF	PCLATH
00562 0002 28B9 		GOTO	Main	; go to beginning of program
00563 0003 	;
00564 0003 	;============================================================================================
00565 0003 	; Interupt entry point
00566 0003 	;
00567 0003 		ORG	0x0004	; interrupt vector location
00568 0004 		if UsesISR
00771 0004 		endif		; if UsesISR
00772 0004 0009 		RETFIE		; return from interrupt
00773 0005 	;
00774 0005 	;=========================================================================================
00775 0005 	;=========================================================================================
00776 0005 	; Standard Initalization routines
00777 0005 	;
00778 0005 	; ClearRam, Init ANA I/O, Setup RS232, Setup I2C bus, PortB, PortD, PortA, PortE
00779 0005 	; T1CON, Latched Outputs, T2CON, INTCON, PR2, myeth, Init_LCD, test/zero SRAM, SetupStrings,
00780 0005 	; Display SIGNONStr
00781 0005 	;
00782 0005 	; Entry: none
00783 0005 	; Exit: none
00784 0005 	; RAM used: All
00785 0005 	; Calls:(1+3) ClearRam,SetupStrings,lcd_GotoLineW,PrintString,StandardInits_1,DelayWmS,Init_LCD
00786 0005 	;	DisplaysW,SRAM_Test,SRAM_Zero
00787 0005 	;
00788 0005 2085 	StandardInits	CALL	ClearRam
00789 0006 	;
00790 0006 3081 		MOVLW	ADCON0Val	;div32,CH0,ON
00791 0007 009F 		MOVWF	ADCON0
00792 0008 1683 		BSF	STATUS,RP0	;Bank 1
00793 0009 3087 		MOVLW	ADCON1_Value	;may be All_Digital
00794 000A 009F 		MOVWF	ADCON1
00795 000B 1283 		BCF	STATUS,RP0	;Bank 0
00796 000C 	;
00797 000C 		if UsesRS232
00817 000C 		endif
00818 000C 	;
00819 000C 		if UsesI2C
00820 000C 	;===========================================================================================
00821 000C 	; I2C init code
00822 000C 	; configure SSP for hardware I2C
00823 000C 1683 		BSF	STATUS,RP0	; Bank 1
00824 000D 1587 		BSF	TRISC,SCL	; I2C SCL pin is input (will be controlled by SSP)
00825 000E 1607 		BSF	TRISC,SDA	; I2C SDA pin is input (will be controlled by SSP)
00826 000F 1283 		BCF	STATUS,RP0	; Bank 0
00827 0010 1607 		BSF	PORTC,SDA
00828 0011 1587 		BSF	PORTC,SCL
00829 0012 1683 		BSF	STATUS,RP0	; Bank 1
00830 0013 1794 		BSF	SSPSTAT,SMP	; I2C slew rate control disabled
00831 0014 1283 		BCF	STATUS,RP0	; Bank 0
00832 0015 1594 		BSF	SSPCON,SSPM3	; I2C master mode in hardware
00833 0016 1114 		BCF	SSPCON,SSPM2
00834 0017 1094 		BCF	SSPCON,SSPM1
00835 0018 1014 		BCF	SSPCON,SSPM0
00836 0019 1694 		BSF	SSPCON,SSPEN	; enable SSP module
00837 001A 1683 		BSF	STATUS,RP0	; Bank 1
00838 001B 3030 		MOVLW	d'48'	; set I2C clock rate to 100kHz
00839 001C 0093 		MOVWF	SSPADD	; Fosc/(4*(SSPADD+1))=100.310kHz
00840 001D 1283 		BCF	STATUS,RP0	; Bank 0
00841 001E 	;
00842 001E 		endif
00843 001E 	;
00844 001E 	; setup Port B All outputs with SelectEnable=1,IORead=1,IOWrite=1, LCD_E=0
00845 001E 3000 		MOVLW	PORTA_Value
00846 001F 0085 		MOVWF	PORTA
00847 0020 3070 		MOVLW	PORTB_Value
00848 0021 0086 		MOVWF	PORTB
00849 0022 0188 		CLRF	PORTD
00850 0023 1683 		BSF	STATUS,RP0	; Bank 1
00851 0024 3000 		MOVLW	TRISBValue	;All out
00852 0025 0086 		MOVWF	TRISB
00853 0026 1381 		BCF	OPTION_REG,NOT_RBPU	; Use pullups on port B
00854 0027 	;
00855 0027 3000 		MOVLW	All_Out
00856 0028 0088 		MOVWF	TRISD	; set for clearing latched outputs
00857 0029 	;
00858 0029 302F 		MOVLW	TRISAValue
00859 002A 0085 		MOVWF	TRISA
00860 002B 	;
00861 002B 3007 		MOVLW	TRISEValue
00862 002C 0089 		MOVWF	TRISE
00863 002D 	;
00864 002D 1283 		BCF	STATUS,RP0	; Bank 0
00865 002E 	;
00866 002E 3035 		MOVLW	TIMER1_SET	; Init timer 1
CastleGate.asm   "LowStuff.asm"                                          Page: 64
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

00867 002F 0090 		MOVWF	T1CON
00868 0030 	;
00869 0030 	;Set all Latched outputs to 0x00
00870 0030 3000 		MOVLW	Select0	;Select0, A0..A7
00871 0031 206F 		CALL	StandardInits_1
00872 0032 3001 		MOVLW	Select1	;Select1, A8..A15
00873 0033 206F 		CALL	StandardInits_1
00874 0034 3002 		MOVLW	Select2	;Select2, A16..A23
00875 0035 206F 		CALL	StandardInits_1
00876 0036 	;
00877 0036 		if UsesLDO0
00878 0036 	;Set outputs of LDO_0 on so LEDs will be off
00879 0036 307F 		MOVLW	LDO_0_InitVal	;all high except reset
00880 0037 0088 		MOVWF	PORTD
00881 0038 		mBank3
00882 003A 00A6 		MOVWF	CMD_LDO_0
00883 003B 00A3 		MOVWF	CurrentLDO_0
00884 003C 3008 		MOVLW	SelectLDO0
00885 003D 206F 		CALL	StandardInits_1
00886 003E 		endif
00887 003E 	;
00888 003E 		if UsesLDO1
00889 003E 3000 		MOVLW	LDO_1_InitVal
00890 003F 0088 		MOVWF	PORTD
00891 0040 		mBank3
00892 0042 00A7 		MOVWF	CMD_LDO_1
00893 0043 00A4 		MOVWF	CurrentLDO_1
00894 0044 3009 		MOVLW	SelectLDO1
00895 0045 206F 		CALL	StandardInits_1
00896 0046 		endif
00897 0046 	;
00898 0046 		if UsesLDO2
00906 0046 		endif
00907 0046 	;
00908 0046 		if UsesLDO3
00916 0046 		endif
00917 0046 	;
00918 0046 	;
00919 0046 	; Setup TMR2 for 1/256 sec interupts
00920 0046 307E 		MOVLW	T2CON_Value
00921 0047 0092 		MOVWF	T2CON
00922 0048 1683 		BSF	_RP0	; Bank 1
00923 0049 170B 		BSF	INTCON,PEIE
00924 004A 	;
00925 004A 		if ISR_Timers>0
00927 004A 		endif
00928 004A 	;
00929 004A 3000 		MOVLW	HasISR
00930 004B 3980 		ANDLW	0x80	; True?
00931 004C 		SKPZ	
00932 004D 178B 		BSF	INTCON,GIE	;GIE bit
00933 004E 304B 		MOVLW	PR2_Value
00934 004F 0092 		MOVWF	PR2
00935 0050 1283 		BCF	_RP0	; Bank 0
00936 0051 	;
00937 0051 	;
00938 0051 		if UsesNIC
00939 0051 	; Setup MAC address (ethernet hardware addreess)
00940 0051 	; The MAC address is six consecutive bytes for fast access.
00941 0051 3000 		MOVLW	MAC_Addr0
00942 0052 00AA 		MOVWF	myeth0
00943 0053 3004 		MOVLW	MAC_Addr1
00944 0054 00AB 		MOVWF	myeth1
00945 0055 30A3 		MOVLW	MAC_Addr2
00946 0056 00AC 		MOVWF	myeth2
00947 0057 3000 		MOVLW	MAC_Addr3
00948 0058 00AD 		MOVWF	myeth3
00949 0059 01AE 		CLRF	myeth4	;will be loaded from eprom(0)
00950 005A 01AF 		CLRF	myeth5	;will be loaded from eprom(1)
00951 005B 	;
00952 005B 		if HasMAC_Addr_EEPROM
00957 005B 		endif
00958 005B 		endif
00959 005B 	;
00960 005B 1525 		BSF	BtnDebounce
00961 005C 	;Extended powerup delay
00962 005C 30FF 		MOVLW	0xFF
00963 005D 22C8 		CALL	DelayWmS
00964 005E 	;
00965 005E 		if UsesLCD & InitLCDAtStartup
00966 005E 235A 		Call	Init_LCD	; Init LCD 
00967 005F 1626 		BSF	SendToLCD	;disp_lcd:=TRUE; Set display flags 
00968 0060 		endif
00969 0060 	;
00970 0060 		if RS232Active
00972 0060 		endif
00973 0060 	;
00974 0060 	; if activated go to the LED and Switch test from here
00975 0060 		if Do_LD_Test
00977 0060 		endif
00978 0060 	;
00979 0060 		if UsesLCD & InitLCDAtStartup
00980 0060 0103 		CLRW
00981 0061 232F 		CALL	lcd_GotoLineW
00982 0062 		if ShowSplashScrn
00983 0062 30E0 		MOVLW	eSplashText
00984 0063 2079 		CALL	DispSplashScrn_1
00985 0064 3001 		MOVLW	0x01	;2nd line
00986 0065 232F 		CALL	lcd_GotoLineW
00987 0066 30F0 		MOVLW	eSplashText2
CastleGate.asm   "LowStuff.asm"                                          Page: 65
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

00988 0067 2079 		CALL	DispSplashScrn_1
00989 0068 		else
00992 0068 		endif		;if ShowSplashScrn
00993 0068 		endif		;if UsesLCD
00994 0068 	;
00995 0068 		if UsesSRAM
00996 0068 	;========================================
00997 0068 	; zeroing sram, because of multiplexing this is about 2,000,000 bus cycles (about 4 seconds)
00998 0068 	;
00999 0068 	; If SRAM test is activated go to the SRAM test from here
01000 0068 	;
01001 0068 		if Do_SRAM_Test
01004 0068 		else
01005 0068 		if Do_ZeroRAM
01006 0068 2279 		Call	SRAM_Zero	;just zero
01007 0069 		endif
01008 0069 		endif
01009 0069 		endif
01010 0069 	;
01011 0069 	;================================================================
01012 0069 	; Move strings to SRAM
01013 0069 		if SRAM_Strings
01014 0069 249E 		Call	SetupStrings
01015 006A 		endif
01016 006A 	;
01017 006A 	;
01018 006A 		if UsesLCD & InitLCDAtStartup
01019 006A 		if ShowSplashScrn
01020 006A 		else
01025 006A 		endif
01026 006A 		endif
01027 006A 	;
01028 006A 		if UsesPulseCounter1
01036 006A 		endif
01037 006A 	;
01038 006A 		if UsesPulseCounter2
01046 006A 		endif
01047 006A 	;
01048 006A 		if UsesOscilator1
01057 006A 		endif
01058 006A 	;
01059 006A 		if UsesOscilator2
01068 006A 		endif
01069 006A 	;
01070 006A 		if UsesServoControl
01072 006A 		endif
01073 006A 	;
01074 006A 		if UsesBootloader
01075 006A 		mCall0To3	PwrUpTest
01076 006E 		endif
01077 006E 	;
01078 006E 		if UsesRS232BufIO
01083 006E 		endif
01084 006E 	;
01085 006E 0008 		RETURN
01086 006F 	;
01087 006F 0183 	StandardInits_1	CLRF	STATUS	;saves 1 byte over mBank0
01088 0070 00F8 		MOVWF	Param78
01089 0071 0806 		MOVF	PORTB,W
01090 0072 39F0 		ANDLW	AddressMask
01091 0073 0478 		IORWF	Param78,W
01092 0074 0086 		MOVWF	PORTB
01093 0075 1206 		BCF	PORTB,SelectEnable
01094 0076 0000 		NOP
01095 0077 1606 		BSF	PORTB,SelectEnable
01096 0078 0008 		RETURN
01097 0079 	;
01098 0079 00FA 	DispSplashScrn_1	MOVWF	Param7A
01099 007A 	;
01100 007A 		if LCD_ChrsPerLine=d'20'
01101 007A 3020 		MOVLW	' '
01102 007B 2387 		CALL	DisplaysW
01103 007C 3020 		MOVLW	' '
01104 007D 2387 		CALL	DisplaysW
01105 007E 		endif
01106 007E 	;
01107 007E 	DispSplashScrn_L1	MOVFW	Param7A
01108 007F 23A3 		CALL	ReadEEwW
01109 0080 		SKPNZ
01110 0081 0008 		RETURN
01111 0082 2387 		CALL	DisplaysW
01112 0083 0AFA 		INCF	Param7A,F
01113 0084 287E 		GOTO	DispSplashScrn_L1
01114 0085 	;
01115 0085 	;===============================================================================================
01116 0085 	; Clear all RAM
01117 0085 	; Entry: none
01118 0085 	; Exit: none
01119 0085 	; RAM used: All
01120 0085 	; Calls:(1+0) ClearRam_L2
01121 0085 	;
01122 0085 0183 	ClearRam	CLRF	STATUS
01123 0086 305F 		MOVLW	0x5F	;Clear 20h-7Eh, 95 bytes
01124 0087 00FF 		MOVWF	Param7F
01125 0088 3020 		MOVLW	0x20
01126 0089 0084 		MOVWF	FSR
01127 008A 209A 		CALL	ClearRam_L2
01128 008B 	;
01129 008B 3050 		MOVLW	0x50	;Clear A0h-FFh, 80 bytes
01130 008C 00FF 		MOVWF	Param7F
CastleGate.asm   "LowStuff.asm"                                          Page: 66
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

01131 008D 30A0 		MOVLW	0xA0
01132 008E 0084 		MOVWF	FSR
01133 008F 209A 		CALL	ClearRam_L2
01134 0090 	;
01135 0090 1783 		BSF	STATUS,IRP	;Clear 110h-16Fh, 96 bytes
01136 0091 3060 		MOVLW	0x60	;96
01137 0092 00FF 		MOVWF	Param7F
01138 0093 3010 		MOVLW	0x10
01139 0094 0084 		MOVWF	FSR
01140 0095 209A 		CALL	ClearRam_L2
01141 0096 	;	
01142 0096 3060 		MOVLW	0x60	;Clear 190h-1EFh, 96 bytes
01143 0097 00FF 		MOVWF	Param7F
01144 0098 3090 		MOVLW	0x90
01145 0099 0084 		MOVWF	FSR
01146 009A 	;
01147 009A 0180 	ClearRam_L2	CLRF	INDF
01148 009B 0A84 		INCF	FSR,F
01149 009C 0BFF 		DECFSZ	Param7F,F
01150 009D 289A 		GOTO	ClearRam_L2
01151 009E 0008 		RETURN
01152 009F 	;
01153 009F 	;
01154 009F 		if UsesLCD
01155 009F 	;=========================================================================================
01156 009F 	; Send string number (W) to DisplaysW
01157 009F 	; Entry: W = string number
01158 009F 	; RAM used: Param7D=CharCount, Param7F=StringNumber
01159 009F 	; Calls:(1+2) DisplaysW
01160 009F 	;
01161 009F 00FF 	PrintString	MOVWF	Param7F
01162 00A0 01FD 		CLRF	Param7D	;CharCount=0
01163 00A1 	PrintString_L1	
01164 00A1 		if CodeMemStrings
01166 00A1 		endif
01167 00A1 		if SRAM_Strings
01168 00A1 2255 		CALL	StringDispatch	;Get the next Char
01169 00A2 		endif
01170 00A2 0AFD 		INCF	Param7D,F	;CharCount:=CharCount+1
01171 00A3 3800 		IORLW	0x00	;set Z if last char
01172 00A4 1903 		BTFSC	STATUS,Z
01173 00A5 0008 		RETURN		;00 = done
01174 00A6 2387 		CALL	DisplaysW	;Display the Char
01175 00A7 3014 		MOVLW	LCD_ChrsPerLine
01176 00A8 027D 		SUBWF	Param7D,W	;CharCount-LCD_ChrsPerLine
01177 00A9 		SKPZ		;skip if zero
01178 00AA 28A1 		GOTO	PrintString_L1
01179 00AB 0008 		RETURN
01180 00AC 	;
01181 00AC 		endif
01182 00AC 	;
01183 00AC 		if RS232Active
01208 00AC 		endif
01209 00AC 	;
01210 00AC 	;============================================================================================
01211 00AC 	; used in converting base 10 byte values to ascii
01212 00AC 	;
01213 00AC 	; Param78=Param77 div Param79
01214 00AC 	; Param77=Param77 mod Param79
01215 00AC 	;
01216 00AC 	; Entry: Param79=100 or 10, Param77=data
01217 00AC 	; Exit: Param77 remainder, Param78=0..9
01218 00AC 	; RAM used: Param77, Param78, Param79  (verified 6/1/03)
01219 00AC 	; Calls:(0) none
01220 00AC 	;
01221 00AC 01F8 	Fix_decbyte	CLRF	Param78
01222 00AD 0879 		MOVF	Param79,W
01223 00AE 0277 		SUBWF	Param77,W	;data-100
01224 00AF 1C03 		BTFSS	STATUS,C
01225 00B0 0008 		RETURN		;Param77>=100
01226 00B1 	;
01227 00B1 0AF8 	Fix_decbyte_L1	INCF	Param78,F
01228 00B2 00F7 		MOVWF	Param77
01229 00B3 0879 		MOVF	Param79,W
01230 00B4 0277 		SUBWF	Param77,W	;data-100
01231 00B5 1803 		BTFSC	STATUS,C
01232 00B6 28B1 		GOTO	Fix_decbyte_L1	;Param77>=100
01233 00B7 0008 		RETURN
01234 00B8 	;
01235 00B8 	;=====================================================================================
01236 00B8 	; Display a byte in unsigned decimal format no leading 0's no leading spaces
01237 00B8 	; Entry: W=Data, Flags25:DispDec2pl, Flags25:DispDec3pl, Flags25:DispLSpaces
01238 00B8 	;  Setting Flags25:DispDec2pl causes a leading zero in the second place
01239 00B8 	;  Setting Flags25:DispDec3pl causes a leading zero in the third place
01240 00B8 	; Exit:none
01241 00B8 	; RAM used: Param71:0, Param77, Param78, Param79, FSR
01242 00B8 	; Calls:(1+2) Fix_decbyte, DisplaysW
01243 00B8 	;
01244 00B8 0183 	Disp_decbyteW3pl	CLRF	STATUS	;saves 1 byte over mBank0
01245 00B9 14A5 		BSF	DispDec3pl
01246 00BA 0183 	Disp_decbyteW2pl	CLRF	STATUS	;saves 1 byte over mBank0
01247 00BB 1425 		BSF	DispDec2pl
01248 00BC 0183 	Disp_decbyteW	CLRF	STATUS	;saves 1 byte over mBank0
01249 00BD 1071 		BCF	Param71,0	;Zero flag
01250 00BE 00F7 		MOVWF	Param77
01251 00BF 3064 		MOVLW	d'100'
01252 00C0 00F9 		MOVWF	Param79
01253 00C1 20AC 		CALL	Fix_decbyte
01254 00C2 0878 		MOVF	Param78,W
01255 00C3 1D03 		BTFSS	STATUS,Z	; skip if Param78=0
CastleGate.asm   "LowStuff.asm"                                          Page: 67
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

01256 00C4 28CB 		GOTO	Disp_decbyteW_Show3	;first digit is not zero
01257 00C5 18A5 		BTFSC	DispDec3pl	; show 3 places?
01258 00C6 28CB 		GOTO	Disp_decbyteW_Show3	;Display 3rd digit 0..9
01259 00C7 1FA5 		BTFSS	DispLSpaces
01260 00C8 28CE 		GOTO	Disp_decbyteW_1	;no leading space
01261 00C9 3020 		MOVLW	' '
01262 00CA 28CD 		GOTO	Disp_decbyteW_Show3S	;show the leading space
01263 00CB 	;
01264 00CB 1471 	Disp_decbyteW_Show3	BSF	Param71,0	;Show Zero flag
01265 00CC 3E30 		ADDLW	'0'
01266 00CD 2148 	Disp_decbyteW_Show3S	CALL	DisplayOrPut
01267 00CE 	;
01268 00CE 300A 	Disp_decbyteW_1	MOVLW	d'10'
01269 00CF 00F9 		MOVWF	Param79
01270 00D0 20AC 		CALL	Fix_decbyte
01271 00D1 0878 		MOVF	Param78,W
01272 00D2 1D03 		BTFSS	STATUS,Z	;skip if 0
01273 00D3 28DC 		GOTO	Disp_decbyteW_2	;secnd digit not zero
01274 00D4 1871 		BTFSC	Param71,0
01275 00D5 28DC 		GOTO	Disp_decbyteW_2	;prev digit was shown 
01276 00D6 1825 		BTFSC	DispDec2pl	; show 2 places?
01277 00D7 28DC 		GOTO	Disp_decbyteW_2	;Display 2nd digit 0..9
01278 00D8 1FA5 		BTFSS	DispLSpaces
01279 00D9 28DE 		GOTO	Disp_decbyteW_3
01280 00DA 3020 		MOVLW	' '
01281 00DB 28DD 		GOTO	Disp_decbyteW_2S
01282 00DC 	;
01283 00DC 3E30 	Disp_decbyteW_2	ADDLW	'0'
01284 00DD 2148 	Disp_decbyteW_2S	CALL	DisplayOrPut
01285 00DE 	;
01286 00DE 0877 	Disp_decbyteW_3	MOVF	Param77,W
01287 00DF 3E30 		ADDLW	'0'
01288 00E0 10A5 		BCF	DispDec3pl
01289 00E1 1025 		BCF	DispDec2pl
01290 00E2 2948 		GOTO	DisplayOrPut
01291 00E3 	;
01292 00E3 	;==============================================================================
01293 00E3 	; Used to convert a word value to a string
01294 00E3 	; Entry: Param7A:Param79=multiplier (10000,1000,100 or 10), Param77:Param76=data
01295 00E3 	; Exit: Param77:Param76 remainder, Param78=result('0'..'9')
01296 00E3 	; RAM used: Param76, Param77, Param78, Param79, Param7A
01297 00E3 	; Calls:(0) none
01298 00E3 	;
01299 00E3 01F8 	Fix_decword	CLRF	Param78
01300 00E4 	;if multiplier >= data
01301 00E4 087A 	Fix_decword_L1	MOVF	Param7A,W
01302 00E5 0277 		SUBWF	Param77,W	
01303 00E6 1903 		BTFSC	STATUS,Z
01304 00E7 28EB 		GOTO	Fix_decword_1	;high data = high multi
01305 00E8 1C03 		BTFSS	STATUS,C	;skip if not barrowed data>=multi
01306 00E9 28F7 		GOTO	Fix_decword_End	;high data < high multiplier
01307 00EA 28EF 		GOTO	Fix_decword_2	;high data > high multiplier
01308 00EB 0879 	Fix_decword_1	MOVF	Param79,W
01309 00EC 0276 		SUBWF	Param76,W	;low data - low multi
01310 00ED 1C03 		BTFSS	STATUS,C	;skip if not barrowed data>=multi
01311 00EE 28F7 		GOTO	Fix_decword_End	;data < multiplier
01312 00EF 	;result++
01313 00EF 	;data -= multiplier
01314 00EF 0AF8 	Fix_decword_2	INCF	Param78,F
01315 00F0 0879 		MOVF	Param79,W
01316 00F1 02F6 		SUBWF	Param76,F	;low data - low multi
01317 00F2 1C03 		BTFSS	STATUS,C	; skip if not barrowed
01318 00F3 03F7 		DECF	Param77,F
01319 00F4 087A 		MOVF	Param7A,W
01320 00F5 02F7 		SUBWF	Param77,F	;high data - high multi
01321 00F6 28E4 		GOTO	Fix_decword_L1	;Param77>=100
01322 00F7 	; else done
01323 00F7 0008 	Fix_decword_End	RETURN
01324 00F8 	;
01325 00F8 		if UsesNum2Str
01346 00F8 		endif
01347 00F8 	;===============================================================================================
01348 00F8 	; 16 bit version of Disp_decbyteW
01349 00F8 	; if DispDec2pl is cleared
01350 00F8 	;  output to DisplaysW is '00000'..'65535'
01351 00F8 	;  else output to DisplaysW is '##0.00'..'655.35'
01352 00F8 	; Enrty: Param77:Param76  16 bit value
01353 00F8 	; Exit: none
01354 00F8 	; RAM used: Param76, Param77, Param78, Param79, Param7A
01355 00F8 	; Calls: (1+2) Fix_decword, DisplaysW
01356 00F8 	;
01357 00F8 	Disp_decword	mBank0
01358 00FA 1825 		BTFSC	DispDec2pl
01359 00FB 14A7 		BSF	Disp_LZO
01360 00FC 1927 		BTFSC	DispDec1pl
01361 00FD 14A7 		BSF	Disp_LZO
01362 00FE 3010 		MOVLW	low d'10000'
01363 00FF 00F9 		MOVWF	Param79
01364 0100 3027 		MOVLW	high d'10000'
01365 0101 00FA 		MOVWF	Param7A
01366 0102 20E3 		CALL	Fix_decword	;(1+0)
01367 0103 0878 		MOVF	Param78,W
01368 0104 1CA7 		BTFSS	Disp_LZO	;if set ##0.00
01369 0105 2908 		GOTO	Disp_decword_1	; else disp 0
01370 0106 1903 		BTFSC	STATUS,Z	; don't disp 0
01371 0107 290C 		GOTO	Disp_decword_2A	; show a <space> instead
01372 0108 3E30 	Disp_decword_1	ADDLW	'0'
01373 0109 10A7 		BCF	Disp_LZO
01374 010A 2148 	Disp_decword_1sp	CALL	DisplayOrPut	;(1+2)
01375 010B 290F 		GOTO	Disp_decword_2
CastleGate.asm   "LowStuff.asm"                                          Page: 68
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

01376 010C 	;
01377 010C 3020 	Disp_decword_2A	MOVLW	' '
01378 010D 1DA7 		BTFSS	Disp_NLS
01379 010E 290A 		GOTO	Disp_decword_1sp
01380 010F 	;
01381 010F 30E8 	Disp_decword_2	MOVLW	low d'1000'
01382 0110 00F9 		MOVWF	Param79
01383 0111 3003 		MOVLW	high d'1000'
01384 0112 00FA 		MOVWF	Param7A
01385 0113 20E3 		CALL	Fix_decword
01386 0114 0878 		MOVF	Param78,W
01387 0115 1CA7 		BTFSS	Disp_LZO
01388 0116 2919 		GOTO	Disp_decword_3
01389 0117 	;
01390 0117 1903 		BTFSC	STATUS,Z	; don't disp 0
01391 0118 291D 		GOTO	Disp_decword_4A	; show a <space> instead
01392 0119 3E30 	Disp_decword_3	ADDLW	'0'
01393 011A 10A7 		BCF	Disp_LZO
01394 011B 2148 	Disp_decword_3Sp	CALL	DisplayOrPut
01395 011C 2920 		GOTO	Disp_decword_4
01396 011D 	;
01397 011D 3020 	Disp_decword_4A	MOVLW	' '
01398 011E 1DA7 		BTFSS	Disp_NLS
01399 011F 291B 		GOTO	Disp_decword_3Sp
01400 0120 	;
01401 0120 3064 	Disp_decword_4	MOVLW	d'100'
01402 0121 00F9 		MOVWF	Param79
01403 0122 01FA 		CLRF	Param7A
01404 0123 20E3 		CALL	Fix_decword
01405 0124 0878 		MOVF	Param78,W
01406 0125 1CA7 		BTFSS	Disp_LZO
01407 0126 292B 		GOTO	Disp_decword_5LZ
01408 0127 1D27 		BTFSS	DispDec1pl
01409 0128 292B 		GOTO	Disp_decword_5LZ
01410 0129 		SKPNZ		; don't disp 0
01411 012A 292F 		GOTO	Disp_decword_5D	; show a <space> instead
01412 012B 	;
01413 012B 3E30 	Disp_decword_5LZ	ADDLW	'0'
01414 012C 10A7 		BCF	Disp_LZO
01415 012D 2148 	Disp_decword_4sp	CALL	DisplayOrPut
01416 012E 2932 		GOTO	Disp_decword_5B
01417 012F 	;
01418 012F 3020 	Disp_decword_5D	MOVLW	' '
01419 0130 1DA7 		BTFSS	Disp_NLS
01420 0131 292D 		GOTO	Disp_decword_4sp
01421 0132 	;
01422 0132 1C25 	Disp_decword_5B	BTFSS	DispDec2pl
01423 0133 2936 		GOTO	Disp_decword_5
01424 0134 302E 		MOVLW	'.'
01425 0135 2148 		CALL	DisplayOrPut
01426 0136 	;
01427 0136 300A 	Disp_decword_5	MOVLW	d'10'
01428 0137 00F9 		MOVWF	Param79
01429 0138 01FA 		CLRF	Param7A
01430 0139 20E3 		CALL	Fix_decword
01431 013A 0878 		MOVF	Param78,W
01432 013B 3E30 		ADDLW	'0'
01433 013C 2148 		CALL	DisplayOrPut
01434 013D 	;
01435 013D 1D27 		BTFSS	DispDec1pl
01436 013E 2941 		GOTO	Disp_decword_7
01437 013F 302E 		MOVLW	'.'
01438 0140 2148 		CALL	DisplayOrPut
01439 0141 3030 	Disp_decword_7	MOVLW	'0'
01440 0142 0776 		ADDWF	Param76,W
01441 0143 	;reset defaults
01442 0143 10A5 		BCF	DispDec3pl
01443 0144 1025 		BCF	DispDec2pl
01444 0145 1127 		BCF	DispDec1pl
01445 0146 10A7 		BCF	Disp_LZO
01446 0147 11A7 		BCF	Disp_NLS
01447 0148 	;
01448 0148 	;================================================================
01449 0148 	;
01450 0148 	DisplayOrPut	mBank0
01451 014A 1A27 		BTFSC	NumsToNic
01452 014B 294F 		GOTO	DOP_Put
01453 014C 1827 		BTFSC	NumsToRam
01454 014D 2953 		GOTO	DOP_Ram
01455 014E 2B87 		GOTO	DisplaysW
01456 014F 	DOP_Put
01457 014F 		if UsesNIC
01458 014F 		mCall0To1	putnic_checkbyte
01459 0152 		endif
01460 0152 0008 		RETURN
01461 0153 	;
01462 0153 0080 	DOP_Ram	MOVWF	INDF
01463 0154 0A84 		INCF	FSR,F
01464 0155 0008 		RETURN
01465 0156 	;
01466 0156 		if Uses3BNums
01467 0156 	;==============================================================================
01468 0156 	; Used to convert a 3 byte value to a string
01469 0156 	; Entry: Param7B:Param7A:Param79=multiplier (1,000,000, 100,000, 10,000, 1,000, 100 or 10)
01470 0156 	;   , Param77:Param76:Param74=data
01471 0156 	; Exit: Param77:Param76:Param74 remainder, Param78=result(0..9)
01472 0156 	; RAM used: Param74, Param76, Param77, Param78, Param79, Param7A, Param7B
01473 0156 	; Calls:(0) none
01474 0156 	;
01475 0156 01F8 	Fix_dec3B	CLRF	Param78
CastleGate.asm   "LowStuff.asm"                                          Page: 69
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

01476 0157 	;if multiplier >= data
01477 0157 087B 	Fix_dec3B_L1	MOVF	Param7B,W
01478 0158 0277 		SUBWF	Param77,W	
01479 0159 1903 		BTFSC	STATUS,Z
01480 015A 295E 		GOTO	Fix_dec3B_3	;high data = high multi
01481 015B 1C03 		BTFSS	STATUS,C	;skip if not barrowed data>=multi
01482 015C 2975 		GOTO	Fix_dec3B_End	;high data < high multiplier
01483 015D 2969 		GOTO	Fix_dec3B_2	;high data > high multiplier
01484 015E 	;
01485 015E 087A 	Fix_dec3B_3	MOVF	Param7A,W
01486 015F 0276 		SUBWF	Param76,W	
01487 0160 1903 		BTFSC	STATUS,Z
01488 0161 2965 		GOTO	Fix_dec3B_1	;mid data = mid multi
01489 0162 1C03 		BTFSS	STATUS,C	;skip if not barrowed data>=multi
01490 0163 2975 		GOTO	Fix_dec3B_End	;mid data < mid multiplier
01491 0164 2969 		GOTO	Fix_dec3B_2	;mid data > mid multiplier
01492 0165 0879 	Fix_dec3B_1	MOVF	Param79,W
01493 0166 0274 		SUBWF	Param74,W	;low data - low multi
01494 0167 1C03 		BTFSS	STATUS,C	;skip if not barrowed data>=multi
01495 0168 2975 		GOTO	Fix_dec3B_End	;data < multiplier
01496 0169 	;result++
01497 0169 	;data -= multiplier
01498 0169 0AF8 	Fix_dec3B_2	INCF	Param78,F
01499 016A 0879 		MOVF	Param79,W
01500 016B 02F4 		SUBWF	Param74,F	;low data - low multi
01501 016C 1C03 		BTFSS	STATUS,C	; skip if not barrowed
01502 016D 03F6 		DECF	Param76,F
01503 016E 087A 		MOVF	Param7A,W
01504 016F 02F6 		SUBWF	Param76,F	;mid data - mid multi
01505 0170 1C03 		BTFSS	STATUS,C	; skip if not barrowed
01506 0171 03F7 		DECF	Param77,F
01507 0172 087B 		MOVF	Param7B,W
01508 0173 02F7 		SUBWF	Param77,F	;high data - high multi
01509 0174 2957 		GOTO	Fix_dec3B_L1	;Param77>=100
01510 0175 	; else done
01511 0175 3030 	Fix_dec3B_End	MOVLW	'0'	
01512 0176 07F8 		ADDWF	Param78,F
01513 0177 0008 		RETURN
01514 0178 	;
01515 0178 		endif
01516 0178 	;
01517 0178 		if UsesNum3BToStr
01535 0178 		endif
01536 0178 	;
01537 0178 		if UsesNum2Str | UsesNum3BToStr
01546 0178 		endif
01547 0178 	;
01548 0178 		if Uses3BNums
01549 0178 	;===============================================================================================
01550 0178 	; 24 bit version of Disp_decbyteW
01551 0178 	; output to DisplaysW is '00000000'..'16777215'
01552 0178 	; Enrty: Param77:Param76:Param74  24 bit value little endian
01553 0178 	; Options: Set flag Disp_LZO for leading zero omission. This flag gets cleared.
01554 0178 	; Exit: none
01555 0178 	; RAM used: Param74,Param76, Param77, Param78, Param79, Param7A, Param7B, FSR
01556 0178 	; Calls: (1+2) Fix_dec3B, DisplaysW
01557 0178 	;
01558 0178 	Disp_dec3B	mBank0
01559 017A 3080 		MOVLW	0x80	;d'10,000,000'
01560 017B 00F9 		MOVWF	Param79	;=0x989680
01561 017C 3096 		MOVLW	0x96
01562 017D 00FA 		MOVWF	Param7A
01563 017E 3098 		MOVLW	0x98
01564 017F 00FB 		MOVWF	Param7B
01565 0180 21A5 		CALL	Disp_dec3B_1
01566 0181 	;
01567 0181 3040 		MOVLW	0x40	;d'1,000,000'
01568 0182 00F9 		MOVWF	Param79	;=0x0F4240
01569 0183 3042 		MOVLW	0x42
01570 0184 00FA 		MOVWF	Param7A
01571 0185 300F 		MOVLW	0x0F
01572 0186 00FB 		MOVWF	Param7B
01573 0187 21A5 		CALL	Disp_dec3B_1
01574 0188 	;
01575 0188 30A0 		MOVLW	0xA0	;d'100,000'
01576 0189 00F9 		MOVWF	Param79	;=0x0186A0
01577 018A 3086 		MOVLW	0x86
01578 018B 00FA 		MOVWF	Param7A
01579 018C 3001 		MOVLW	0x01
01580 018D 00FB 		MOVWF	Param7B
01581 018E 21A5 		CALL	Disp_dec3B_1
01582 018F 	;
01583 018F 3010 		MOVLW	low d'10000'	;d'10,000'
01584 0190 00F9 		MOVWF	Param79	;=0x002710
01585 0191 3027 		MOVLW	high d'10000'
01586 0192 00FA 		MOVWF	Param7A
01587 0193 01FB 		CLRF	Param7B
01588 0194 21A5 		CALL	Disp_dec3B_1
01589 0195 	;
01590 0195 30E8 		MOVLW	low d'1000'
01591 0196 00F9 		MOVWF	Param79
01592 0197 3003 		MOVLW	high d'1000'
01593 0198 00FA 		MOVWF	Param7A
01594 0199 21A5 		CALL	Disp_dec3B_1
01595 019A 	;
01596 019A 3064 		MOVLW	d'100'
01597 019B 00F9 		MOVWF	Param79
01598 019C 01FA 		CLRF	Param7A
01599 019D 21A5 		CALL	Disp_dec3B_1
01600 019E 	;
CastleGate.asm   "LowStuff.asm"                                          Page: 70
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

01601 019E 300A 		MOVLW	d'10'
01602 019F 00F9 		MOVWF	Param79
01603 01A0 21A5 		CALL	Disp_dec3B_1
01604 01A1 	;
01605 01A1 3030 		MOVLW	'0'
01606 01A2 0774 		ADDWF	Param74,W
01607 01A3 10A7 		BCF	Disp_LZO
01608 01A4 29AF 		GOTO	Disp_dec3B_2
01609 01A5 	;
01610 01A5 2156 	Disp_dec3B_1	CALL	Fix_dec3B
01611 01A6 1CA7 		BTFSS	Disp_LZO
01612 01A7 29AE 		GOTO	Disp_dec3B_3
01613 01A8 3030 		MOVLW	'0'
01614 01A9 0278 		SUBWF	Param78,W
01615 01AA 		SKPNZ
01616 01AB 0008 		RETURN
01617 01AC 	;reset defaults
01618 01AC 10A7 		BCF	Disp_LZO
01619 01AD 11A7 		BCF	Disp_NLS
01620 01AE 0878 	Disp_dec3B_3	MOVF	Param78,W
01621 01AF 2948 	Disp_dec3B_2	GOTO	DisplayOrPut
01622 01B0 	;
01623 01B0 		endif
01624 01B0 	;=================================================================================
01625 01B0 	; Read Data from input device
01626 01B0 	;
01627 01B0 	;  Note: Address Enable ON, IORead ON, Get Data, IORead OFF, Address Enable OFF
01628 01B0 	;
01629 01B0 	; Entry: W=Select Value (Select0,SelectSRAM, etc.)
01630 01B0 	; Exit: W = data from port
01631 01B0 	; Ram used: Param78 (verified 2/26/03)
01632 01B0 	; Calls: (0) none
01633 01B0 	;
01634 01B0 00F8 	ReadData	MOVWF	Param78
01635 01B1 		mBank1
01636 01B3 		if UsesRS232BufIO
01640 01B3 		endif
01641 01B3 30FF 		MOVLW	All_In
01642 01B4 0088 		MOVWF	TRISD
01643 01B5 1283 		BCF	STATUS,RP0	;Bank0
01644 01B6 0806 		MOVF	PORTB,W
01645 01B7 39F0 		ANDLW	AddressMask
01646 01B8 0478 		IORWF	Param78,W
01647 01B9 0086 		MOVWF	PORTB
01648 01BA 1206 		BCF	PORTB,SelectEnable
01649 01BB 1286 		BCF	PORTB,IORead
01650 01BC 0000 		NOP		;wait 200nS
01651 01BD 0808 		MOVF	PORTD,W
01652 01BE 1686 		BSF	PORTB,IORead
01653 01BF 1606 		BSF	PORTB,SelectEnable
01654 01C0 		if UsesRS232BufIO
01656 01C0 		endif
01657 01C0 0008 		RETURN	
01658 01C1 	;
01659 01C1 	;=================================================================================
01660 01C1 	; Set the low 8 address bits to the value in the W
01661 01C1 	;
01662 01C1 	; Entry: W= and 8 bit address
01663 01C1 	; Exit: CurrentAddr0 is changed
01664 01C1 	; RAM used: none (verified 2/26/03)
01665 01C1 	; Calls:(0) none
01666 01C1 	;
01667 01C1 	Set8bitAddr
01668 01C1 		if UsesRS232BufIO
01672 01C1 		endif
01673 01C1 		mSet8bitAddr
01674 01D1 		if UsesRS232BufIO
01676 01D1 		endif
01677 01D1 0008 		RETURN
01678 01D2 	;
01679 01D2 	;
01680 01D2 		if UsesSRAM
01681 01D2 	;=================================================================================
01682 01D2 	; Put the SRAM address on the address bus
01683 01D2 	; Entry:SRAM_Addr
01684 01D2 	; Exit:address bus and CurrentAddr = SRAM_Addr
01685 01D2 	;	PORTD is set for output
01686 01D2 	; RAM used: none (verified 2/26/03)
01687 01D2 	; Calls:(0) none
01688 01D2 	;
01689 01D2 	SetSRAM_Addr	mBank1
01690 01D4 		if UsesRS232BufIO
01694 01D4 		endif
01695 01D4 3000 		MOVLW	All_Out
01696 01D5 0088 		MOVWF	TRISD
01697 01D6 1703 		BSF	STATUS,RP1	;Bank3
01698 01D7 081D 		MOVF	SRAM_Addr0,W
01699 01D8 0220 		SUBWF	CurrentAddr0,W
01700 01D9 1903 		BTFSC	STATUS,Z
01701 01DA 29E8 		GOTO	SetSRAM_Addr_1
01702 01DB 081D 		MOVF	SRAM_Addr0,W
01703 01DC 00A0 		MOVWF	CurrentAddr0
01704 01DD 		mBank0
01705 01DF 0088 		MOVWF	PORTD
01706 01E0 	;
01707 01E0 0806 		MOVF	PORTB,W
01708 01E1 39F0 		ANDLW	AddressMask
01709 01E2 3800 		IORLW	Select0
01710 01E3 0086 		MOVWF	PORTB
01711 01E4 1206 		BCF	PORTB,SelectEnable
CastleGate.asm   "LowStuff.asm"                                          Page: 71
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

01712 01E5 1606 		BSF	PORTB,SelectEnable
01713 01E6 	;
01714 01E6 		mBank3
01715 01E8 081E 	SetSRAM_Addr_1	MOVF	SRAM_Addr1,W
01716 01E9 0221 		SUBWF	CurrentAddr1,W
01717 01EA 1903 		BTFSC	STATUS,Z
01718 01EB 29F9 		GOTO	SetSRAM_Addr_2
01719 01EC 081E 		MOVF	SRAM_Addr1,W
01720 01ED 00A1 		MOVWF	CurrentAddr1
01721 01EE 		mBank0
01722 01F0 0088 		MOVWF	PORTD
01723 01F1 	;
01724 01F1 0806 		MOVF	PORTB,W
01725 01F2 39F0 		ANDLW	AddressMask
01726 01F3 3801 		IORLW	Select1
01727 01F4 0086 		MOVWF	PORTB
01728 01F5 1206 		BCF	PORTB,SelectEnable
01729 01F6 1606 		BSF	PORTB,SelectEnable
01730 01F7 	;
01731 01F7 		mBank3
01732 01F9 081F 	SetSRAM_Addr_2	MOVF	SRAM_Addr2,W
01733 01FA 0222 		SUBWF	CurrentAddr2,W
01734 01FB 1903 		BTFSC	STATUS,Z
01735 01FC 2C2E 		GOTO	Bank0Rtn
01736 01FD 081F 		MOVF	SRAM_Addr2,W
01737 01FE 00A2 		MOVWF	CurrentAddr2
01738 01FF 		mBank0
01739 0201 0088 		MOVWF	PORTD
01740 0202 	;
01741 0202 0806 		MOVF	PORTB,W
01742 0203 39F0 		ANDLW	AddressMask
01743 0204 3802 		IORLW	Select2
01744 0205 0086 		MOVWF	PORTB
01745 0206 1206 		BCF	PORTB,SelectEnable
01746 0207 1606 		BSF	PORTB,SelectEnable
01747 0208 	;
01748 0208 		if UsesRS232BufIO
01750 0208 		endif
01751 0208 2C2E 		GOTO	Bank0Rtn
01752 0209 	;
01753 0209 	;=================================================================================
01754 0209 	; Offset the SRAM_Addr by W
01755 0209 	; Entry:W=Offset
01756 0209 	; Exit: none
01757 0209 	; RAM used: none (verified 2/26/03)
01758 0209 	; Calls:(0) none
01759 0209 	;
01760 0209 	SRAM_OffsetAddr	mBank3
01761 020B 079D 		ADDWF	SRAM_Addr0,F
01762 020C 1803 		BTFSC	STATUS,C
01763 020D 0F9E 		INCFSZ	SRAM_Addr1,F
01764 020E 2C2E 		GOTO	Bank0Rtn
01765 020F 0A9F 		INCF	SRAM_Addr2,F
01766 0210 2C2E 		GOTO	Bank0Rtn
01767 0211 	;
01768 0211 	;=================================================================================
01769 0211 	; Increments the SRAM_Addr, if past end (>=0x080000) roll over to 0x000000
01770 0211 	; Entry:none
01771 0211 	; Exit:W = 0x00, Z=1, if address = 0x000000
01772 0211 	; RAM used: none (verified 2/26/03)
01773 0211 	; Calls:(0) none
01774 0211 	;
01775 0211 	SRAM_NextAddr	mBank3
01776 0213 0F9D 		INCFSZ	SRAM_Addr0,F
01777 0214 2A18 		GOTO	SRAM_NextAddr_1
01778 0215 0F9E 		INCFSZ	SRAM_Addr1,F
01779 0216 2A18 		GOTO	SRAM_NextAddr_1
01780 0217 0A9F 		INCF	SRAM_Addr2,F
01781 0218 30F8 	SRAM_NextAddr_1	MOVLW	0xF8	;SRAM ends at 0x07FFFF
01782 0219 051F 		ANDWF	SRAM_Addr2,W
01783 021A 1903 		BTFSC	STATUS,Z
01784 021B 2A1F 		GOTO	SRAM_NextAddr_2
01785 021C 019D 		CLRF	SRAM_Addr0
01786 021D 019E 		CLRF	SRAM_Addr1
01787 021E 019F 		CLRF	SRAM_Addr2
01788 021F 081D 	SRAM_NextAddr_2	MOVF	SRAM_Addr0,W
01789 0220 041E 		IORWF	SRAM_Addr1,W
01790 0221 041F 		IORWF	SRAM_Addr2,W
01791 0222 2C2E 		GOTO	Bank0Rtn
01792 0223 	;
01793 0223 	;=================================================================================
01794 0223 	; Decrements the SRAM_Addr, if less than 0x000000 then set to 0x07FFFF
01795 0223 	; Entry:none
01796 0223 	; Exit:none
01797 0223 	; RAM used: none (verified 2/26/03)
01798 0223 	; Calls:(0) none
01799 0223 	;
01800 0223 	SRAM_PrevAddr	mBank3
01801 0225 039D 		DECF	SRAM_Addr0,F
01802 0226 0F1D 		INCFSZ	SRAM_Addr0,W
01803 0227 2A2C 		GOTO	SRAM_PrevAddr_1
01804 0228 039E 		DECF	SRAM_Addr1,F
01805 0229 0F1E 		INCFSZ	SRAM_Addr1,W
01806 022A 2A2C 		GOTO	SRAM_PrevAddr_1
01807 022B 039F 		DECF	SRAM_Addr2,F
01808 022C 30FF 	SRAM_PrevAddr_1	MOVLW	0xFF
01809 022D 021F 		SUBWF	SRAM_Addr2,W
01810 022E 1D03 		BTFSS	STATUS,Z
01811 022F 2C2E 		GOTO	Bank0Rtn
01812 0230 3007 		MOVLW	0x07
CastleGate.asm   "LowStuff.asm"                                          Page: 72
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

01813 0231 009F 		MOVWF	SRAM_Addr2
01814 0232 30FF 		MOVLW	0xFF
01815 0233 009E 		MOVWF	SRAM_Addr1
01816 0234 009D 		MOVWF	SRAM_Addr0
01817 0235 2C2E 		GOTO	Bank0Rtn
01818 0236 	;
01819 0236 	;=================================================================================
01820 0236 	; Write the value in the W to SRAM address SRAM_Addr then increment address
01821 0236 	;
01822 0236 	; Entry: W=data to write, SRAM_Addr=SRAM address
01823 0236 	; Exit: none
01824 0236 	; RAM used:Param78 (verified 2/26/03)
01825 0236 	; Calls:(1+0) SetSRAM_Addr, SRAM_NextAddr
01826 0236 	;
01827 0236 00F8 	SRAM_WritePI	MOVWF	Param78
01828 0237 21D2 		CALL	SetSRAM_Addr
01829 0238 2211 		CALL	SRAM_NextAddr
01830 0239 2A3C 		GOTO	SRAM_Write_1
01831 023A 	;
01832 023A 	;=================================================================================
01833 023A 	; Write the value in the W to SRAM address SRAM_Addr
01834 023A 	;
01835 023A 	; Entry: W=data to write, SRAM_Addr=SRAM address
01836 023A 	; Exit: Param78=data
01837 023A 	; RAM used: Param78 (verified 2/26/03)
01838 023A 	; Calls:(1+0) SetSRAM_Addr
01839 023A 	;
01840 023A 00F8 	SRAM_Write	MOVWF	Param78
01841 023B 21D2 		CALL	SetSRAM_Addr
01842 023C 0878 	SRAM_Write_1	MOVF	Param78,W
01843 023D 	;
01844 023D 		if UsesRS232BufIO
01848 023D 		endif
01849 023D 	;
01850 023D 0088 		MOVWF	PORTD
01851 023E 1686 		BSF	PORTB,IORead	;OE* = inactive
01852 023F 1306 		BCF	PORTB,IOWrite
01853 0240 	;
01854 0240 0806 		MOVF	PORTB,W
01855 0241 39F0 		ANDLW	AddressMask
01856 0242 3803 		IORLW	SelectSRAM
01857 0243 0086 		MOVWF	PORTB
01858 0244 1206 		BCF	PORTB,SelectEnable
01859 0245 1606 		BSF	PORTB,SelectEnable
01860 0246 	;
01861 0246 1706 		BSF	PORTB,IOWrite	
01862 0247 		if UsesRS232BufIO
01864 0247 		endif
01865 0247 0008 		RETURN
01866 0248 	;
01867 0248 	;
01868 0248 	;=================================================================================
01869 0248 	; Read the value in SRAM address SRAM_Addr into the W then decrement address
01870 0248 	;
01871 0248 	; Entry: SRAM_Addr=SRAM address
01872 0248 	; Exit: W = value from SRAM
01873 0248 	; RAM used: none (verified 2/26/03)
01874 0248 	; Calls:(1+0) SetSRAM_Addr, SRAM_NextAddr
01875 0248 	;
01876 0248 21D2 	SRAM_ReadPD	CALL	SetSRAM_Addr
01877 0249 2223 		CALL	SRAM_PrevAddr
01878 024A 2A69 		GOTO	SRAM_Read_1
01879 024B 	;
01880 024B 		endif
01881 024B 	;
01882 024B 		if UsesDataROM
01883 024B 	;=================================================================================
01884 024B 	; Set SRAM address to evDataROM+W then SRAM_ReadPI
01885 024B 	;
01886 024B 	; Entry: W=DataRom offset
01887 024B 	; Exit: W = value from SRAM, SRAM_Addr=evDataROM+W+1
01888 024B 	; RAM used: none (verified 8/15/03)
01889 024B 	; Calls:(1+0) SetSRAM_Addr, SRAM_NextAddr
01890 024B 	;
01891 024B 	SRAM_ReadDR	mBank3
01892 024D 009D 		MOVWF	SRAM_Addr0
01893 024E 3010 		MOVLW	low evDataROM
01894 024F 009E 		MOVWF	SRAM_Addr1
01895 0250 3000 		MOVLW	high evDataROM
01896 0251 009F 		MOVWF	SRAM_Addr2
01897 0252 	;
01898 0252 	; fall through to SRAM_ReadPI
01899 0252 	;
01900 0252 		endif
01901 0252 	;
01902 0252 		if UsesSRAM
01903 0252 	;=================================================================================
01904 0252 	; Read the value in SRAM address SRAM_Addr into the W then increment address
01905 0252 	;
01906 0252 	; Entry: SRAM_Addr=SRAM address
01907 0252 	; Exit: W = value from SRAM
01908 0252 	; RAM used: none (verified 2/26/03)
01909 0252 	; Calls:(1+0) SetSRAM_Addr, SRAM_NextAddr
01910 0252 	;
01911 0252 21D2 	SRAM_ReadPI	CALL	SetSRAM_Addr
01912 0253 2211 		CALL	SRAM_NextAddr
01913 0254 2A69 		GOTO	SRAM_Read_1
01914 0255 	;
01915 0255 		endif
01916 0255 	;
CastleGate.asm   "LowStuff.asm"                                          Page: 73
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

01917 0255 		if SRAM_Strings
01918 0255 	;=============================================================================================
01919 0255 	; Entry: Param7F=String Number (0..n), Param7D=Character Number
01920 0255 	; Exit: W=Character
01921 0255 	; RAM used: Param7D, Param7F  (verified 10/2/02)
01922 0255 	; Calls:(1+0) SetSRAM_Addr
01923 0255 	; 
01924 0255 	; Strings were stored in SRAM at power up
01925 0255 	; String Zero is at (evStrings x 256) + (String Number x 8) + Character Number
01926 0255 	;
01927 0255 	StringDispatch	mBank3
01928 0257 3000 		MOVLW	high evStrings
01929 0258 009F 		MOVWF	SRAM_Addr2	;0x01
01930 0259 019E 		CLRF	SRAM_Addr1
01931 025A 1003 		BCF	STATUS,C
01932 025B 0D7F 		RLF	Param7F,W	;x2
01933 025C 009D 		MOVWF	SRAM_Addr0
01934 025D 0D9E 		RLF	SRAM_Addr1,F
01935 025E 0D9D 		RLF	SRAM_Addr0,F	;x4
01936 025F 0D9E 		RLF	SRAM_Addr1,F
01937 0260 0D9D 		RLF	SRAM_Addr0,F	;x8
01938 0261 0D9E 		RLF	SRAM_Addr1,F
01939 0262 	;
01940 0262 30F2 		MOVLW	low evStrings	;0x02
01941 0263 079E 		ADDWF	SRAM_Addr1,F	;0x02..0x08
01942 0264 087D 		MOVF	Param7D,W
01943 0265 079D 		ADDWF	SRAM_Addr0,F
01944 0266 1803 		BTFSC	STATUS,C
01945 0267 0A9E 		INCF	SRAM_Addr1,F
01946 0268 	;
01947 0268 	; Fall through to SRAM_Read
01948 0268 		endif
01949 0268 	;
01950 0268 		if UsesSRAM
01951 0268 	;=================================================================================
01952 0268 	; Read the value in SRAM address SRAM_Addr into the W
01953 0268 	; Entry: SRAM_Addr=SRAM address
01954 0268 	; Exit: W = value from SRAM
01955 0268 	; RAM used: none (verified 2/26/03)
01956 0268 	; Calls:(1+0) SetSRAM_Addr
01957 0268 	;
01958 0268 21D2 	SRAM_Read	CALL	SetSRAM_Addr
01959 0269 1683 	SRAM_Read_1	BSF	STATUS,RP0	;Bank1
01960 026A 		if UsesRS232BufIO
01964 026A 		endif
01965 026A 30FF 		MOVLW	All_In
01966 026B 0088 		MOVWF	TRISD
01967 026C 1283 		BCF	STATUS,RP0	;Bank0
01968 026D 1706 		BSF	PORTB,IOWrite	;R/W* = R
01969 026E 1286 		BCF	PORTB,IORead	;OE* = active
01970 026F 	;
01971 026F 0806 		MOVF	PORTB,W
01972 0270 39F0 		ANDLW	AddressMask
01973 0271 3803 		IORLW	SelectSRAM
01974 0272 0086 		MOVWF	PORTB
01975 0273 1206 		BCF	PORTB,SelectEnable
01976 0274 0000 		NOP
01977 0275 0808 		MOVF	PORTD,W
01978 0276 1606 		BSF	PORTB,SelectEnable
01979 0277 	;
01980 0277 1686 		BSF	PORTB,IORead	
01981 0278 		if UsesRS232BufIO
01983 0278 		endif
01984 0278 0008 		RETURN
01985 0279 	;
01986 0279 	;
01987 0279 		if Do_SRAM_Test
02101 0279 		endif		; Do_SRAM_Test
02102 0279 		if Do_ZeroRAM
02103 0279 	;=================================================================================
02104 0279 	; Zero the Static RAM 
02105 0279 	; Put 0x00 in every location read back and display error if cannot zero
02106 0279 	;
02107 0279 	; Entry: none
02108 0279 	; Exit: none, if error then doesn't exit
02109 0279 	; RAM used: Param70, Param71, Param72, Param78 (verified 2/26/03)
02110 0279 	; Calls:(1+0) SetSRAM_Addr, SRAM_Write_1, SRAM_Read_1,
02111 0279 	;  if error calls:(1+3) lcd_GotoLineW, DisplaysW, SRAM_Read, Disp_Hex_Byte
02112 0279 	;
02113 0279 01F0 	SRAM_Zero	CLRF	Param70	; aka SRAM_Addr0
02114 027A 01F1 		CLRF	Param71	; aka SRAM_Addr1
02115 027B 01F2 		CLRF	Param72	; aka SRAM_Addr2
02116 027C 22A3 		CALL	ZeroSRAM_Addr
02117 027D 01F8 		CLRF	Param78
02118 027E 	;
02119 027E 223C 	SRAM_Zero_L1	CALL	SRAM_Write_1
02120 027F 2269 		CALL	SRAM_Read_1
02121 0280 1D03 		BTFSS	STATUS,Z	; skip if good
02122 0281 2ABD 		GOTO	SRAM_Zero_Err
02123 0282 	; next address 0
02124 0282 1683 		BSF	STATUS,RP0	;Bank1
02125 0283 3000 		MOVLW	All_Out
02126 0284 0088 		MOVWF	TRISD
02127 0285 1283 		BCF	STATUS,RP0	;Bank0
02128 0286 0AF0 		INCF	Param70,F	;aka SRAMAddr0
02129 0287 0870 		MOVF	Param70,W
02130 0288 0088 		MOVWF	PORTD
02131 0289 	;
02132 0289 0806 		MOVF	PORTB,W
02133 028A 39F0 		ANDLW	AddressMask
CastleGate.asm   "LowStuff.asm"                                          Page: 74
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

02134 028B 3800 		IORLW	Select0
02135 028C 0086 		MOVWF	PORTB
02136 028D 1206 		BCF	PORTB,SelectEnable
02137 028E 1606 		BSF	PORTB,SelectEnable
02138 028F 0870 		MOVF	Param70,W
02139 0290 1D03 		BTFSS	STATUS,Z
02140 0291 2A7E 		GOTO	SRAM_Zero_L1
02141 0292 	; next address 1
02142 0292 0AF1 		INCF	Param71,F	;aka SRAMAddr0
02143 0293 0871 		MOVF	Param71,W
02144 0294 0088 		MOVWF	PORTD
02145 0295 	;
02146 0295 0806 		MOVF	PORTB,W
02147 0296 39F0 		ANDLW	AddressMask
02148 0297 3801 		IORLW	Select1
02149 0298 0086 		MOVWF	PORTB
02150 0299 1206 		BCF	PORTB,SelectEnable
02151 029A 1606 		BSF	PORTB,SelectEnable
02152 029B 	;
02153 029B 		ifdef evEndOfSRAM
02154 029B 3006 		MOVLW	low evEndOfSRAM
02155 029C 0271 		SUBWF	Param71,W
02156 029D 1D03 		BTFSS	STATUS,Z
02157 029E 2AAC 		GOTO	SRAM_Zero_NotDone
02158 029F 3002 		MOVLW	high evEndOfSRAM
02159 02A0 0272 		SUBWF	Param72,W
02160 02A1 1D03 		BTFSS	STATUS,Z
02161 02A2 		endif
02162 02A2 2AAC 		GOTO	SRAM_Zero_NotDone
02163 02A3 	;
02164 02A3 	; fall through to ZeroSRAM_Addr
02165 02A3 	;=======================================================================================
02166 02A3 	; Setup the SRAM address buffers and variables
02167 02A3 	;
02168 02A3 	ZeroSRAM_Addr	mBank3
02169 02A5 30FF 		MOVLW	0xFF
02170 02A6 009D 		MOVWF	SRAM_Addr0
02171 02A7 009E 		MOVWF	SRAM_Addr1
02172 02A8 009F 		MOVWF	SRAM_Addr2
02173 02A9 21D2 		CALL	SetSRAM_Addr
02174 02AA 2211 		CALL	SRAM_NextAddr
02175 02AB 29D2 		GOTO	SetSRAM_Addr
02176 02AC 	;
02177 02AC 	;=======================================================================================
02178 02AC 	;
02179 02AC 	SRAM_Zero_NotDone
02180 02AC 	;
02181 02AC 0871 		MOVF	Param71,W
02182 02AD 1D03 		BTFSS	STATUS,Z
02183 02AE 2A7E 		GOTO	SRAM_Zero_L1
02184 02AF 	; next address 2
02185 02AF 0AF2 		INCF	Param72,F
02186 02B0 0872 		MOVF	Param72,W
02187 02B1 0088 		MOVWF	PORTD
02188 02B2 	;
02189 02B2 0806 		MOVF	PORTB,W
02190 02B3 39F0 		ANDLW	AddressMask
02191 02B4 3802 		IORLW	Select2
02192 02B5 0086 		MOVWF	PORTB
02193 02B6 1206 		BCF	PORTB,SelectEnable
02194 02B7 1606 		BSF	PORTB,SelectEnable
02195 02B8 0872 		MOVF	Param72,W
02196 02B9 	;
02197 02B9 39F8 		ANDLW	0xF8
02198 02BA 		SKPNZ
02199 02BB 2A7E 		GOTO	SRAM_Zero_L1
02200 02BC 2AA3 		GOTO	ZeroSRAM_Addr
02201 02BD 	;
02202 02BD 	;
02203 02BD 	SRAM_Test_E2
02204 02BD 	SRAM_Test_E1
02205 02BD 	SRAM_Zero_Err	
02206 02BD 		if UsesLCD
02207 02BD 3002 		MOVLW	0x02
02208 02BE 232F 		CALL	lcd_GotoLineW	;goto begining of 3rd line
02209 02BF 		ifdef eSRAMErrStr
02210 02BF 30D8 		MOVLW	eSRAMErrStr
02211 02C0 2079 		CALL	DispSplashScrn_1
02212 02C1 		else
02215 02C1 		endif
02216 02C1 		endif
02217 02C1 	;
02218 02C1 2268 		CALL	SRAM_Read
02219 02C2 2376 		CALL	Disp_Hex_Byte
02220 02C3 2AC3 	SRAM_Zero_Stop	GOTO	SRAM_Zero_Stop	; loop until reset
02221 02C4 	;
02222 02C4 		endif
02223 02C4 		endif
02224 02C4 	;
02225 02C4 		if UsesPushPopParams
02318 02C4 		endif
02319 02C4 		if UsesPushPop
02392 02C4 		endif		; UsesPushPop
02393 02C4 	;
02394 02C4 		if UsesSRamPushPopPrm
02490 02C4 		endif
02491 02C4 		if UsesSRamPushPop
02552 02C4 		endif		; UsesSRamPushPop
02553 02C4 	;
02554 02C4 	;==================================================================================
CastleGate.asm   "LowStuff.asm"                                          Page: 75
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

02555 02C4 	; Delay 1 Second
02556 02C4 	;
02557 02C4 	; Entry: none
02558 02C4 	; Exit: none
02559 02C4 	; RAM used: Param77, Param78, Param79 (verified 2/26/03)
02560 02C4 	; Calls:(1+0) DelayWmS
02561 02C4 	;
02562 02C4 30FA 	Delay1Sec	MOVLW	d'250'
02563 02C5 22C8 		CALL	DelayWmS
02564 02C6 22C8 		CALL	DelayWmS
02565 02C7 22C8 		CALL	DelayWmS
02566 02C8 	;
02567 02C8 	;==================================================================================
02568 02C8 	; Delay (value in W) milliseconds  (999978ns/loop + overhead) (Fosc = 19.6608MHz)
02569 02C8 	;
02570 02C8 	; Entry: W = mS to delay
02571 02C8 	; Exit: none
02572 02C8 	; RAM used: Param77, Param78, Param79 (verified 2/26/03)
02573 02C8 	; Calls:(0) none
02574 02C8 	;
02575 02C8 	;   CLOCK=19660800/4 = 203ns/cycle
02576 02C8 	;
02577 02C8 00F9 	DelayWmS	MOVWF	Param79	;W*4926+5
02578 02C9 08F9 		MOVF	Param79,F
02579 02CA 1903 		BTFSC	STATUS,Z
02580 02CB 2AD9 		GOTO	DelayWmS_end
02581 02CC 3006 	DelayWmS_L1	MOVLW	0x06	;3+4632+3+285+3=4926
02582 02CD 00F8 		MOVWF	Param78
02583 02CE 01F7 	DelayWmS_L2	CLRF	Param77	;6*(4+768)=4632
02584 02CF 0BF7 	DelayWmS_L3	DECFSZ	Param77,F	;3*256=768
02585 02D0 2ACF 		GOTO	DelayWmS_L3
02586 02D1 0BF8 		DECFSZ	Param78,F
02587 02D2 2ACE 		GOTO	DelayWmS_L2
02588 02D3 305F 		MOVLW	0x5F
02589 02D4 00F7 		MOVWF	Param77
02590 02D5 0BF7 	DelayWmS_L4	DECFSZ	Param77,F	;3*95=285
02591 02D6 2AD5 		GOTO	DelayWmS_L4
02592 02D7 0BF9 		DECFSZ	Param79,F
02593 02D8 2ACC 		GOTO	DelayWmS_L1
02594 02D9 34FA 	DelayWmS_end	RETLW	d'250'
02595 02DA 	;
02596 02DA 	;======================================================================================
02597 02DA 	; Delay uS    1 cycle = .203uS (Fosc = 19.6608MHz)
02598 02DA 	;
02599 02DA 	; 0x1F	;(31*3+5)*0.203=19.894uS
02600 02DA 	;
02601 02DA 	; Entry: none
02602 02DA 	; Exit: none
02603 02DA 	; RAM used: Param77 (verified 2/26/03)
02604 02DA 	; Calls:(0) none
02605 02DA 	;
02606 02DA 		if UsesDelay10uS
02609 02DA 		endif
02610 02DA 30A3 	Delay100uS	MOVLW	0xA3	;(163*3+5)*0.203=100.282
02611 02DB 		if UsesDelay40uS
02614 02DB 		endif
02615 02DB 00F7 	DelayWuS	MOVWF	Param77
02616 02DC 0BF7 	DelayWuS_Loop	DECFSZ	Param77,F
02617 02DD 2ADC 		GOTO	DelayWuS_Loop
02618 02DE 0008 		RETURN
02619 02DF 	;
02620 02DF 		if UsesLCD
02621 02DF 	;======================================================================================
02622 02DF 	;======================================================================================	
02623 02DF 	; Send a nybble to the LCD
02624 02DF 	;	
02625 02DF 	; Entry: W:0..3 = Nibble to send
02626 02DF 	; Exit: Param78 has the Nibble
02627 02DF 	; RAM used: Param78 (verified 2/26/03)
02628 02DF 	; Calls:(0) none
02629 02DF 	;
02630 02DF 00F8 	lcd_nybble	MOVWF	Param78
02631 02E0 1786 		BSF	PORTB,LCD_E	;LCD_E = 1
02632 02E1 300F 		MOVLW	0x0F
02633 02E2 05F8 		ANDWF	Param78,F	;only the low nibble
02634 02E3 30F0 		MOVLW	0xF0
02635 02E4 0508 		ANDWF	PORTD,W	;kill the low nibble
02636 02E5 0478 		IORWF	Param78,W	; and replace with bByte's low nibble
02637 02E6 0088 		MOVWF	PORTD
02638 02E7 0000 		NOP		;delay 400nS
02639 02E8 0000 		NOP
02640 02E9 1386 		BCF	PORTB,LCD_E	;LCD_E = 0
02641 02EA 0008 		RETURN
02642 02EB 	;
02643 02EB 	;===================================================================================
02644 02EB 	; Send LCD command for Disp On, Cursor Off, Blink Off
02645 02EB 	;
02646 02EB 	; Entry: none
02647 02EB 	; Exit: none
02648 02EB 	; RAM Used: Param78, Param79 (verified 4/17/03)
02649 02EB 	; Calls:(1+0) wait_LCD_Ready, SendLCD_CmdW
02650 02EB 	;
02651 02EB 300C 	lcd_On	MOVLW	LCD_ON
02652 02EC 2AEF 		GOTO	lcd_RdyAndCmd
02653 02ED 	;
02654 02ED 		if UsesLCDBlink
02666 02ED 		endif
02667 02ED 		if UsesLCDCursoBlink
02679 02ED 		endif
02680 02ED 	;===================================================================================
CastleGate.asm   "LowStuff.asm"                                          Page: 76
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

02681 02ED 	; Send LCD command for Disp On, Cursor On, Blink Off
02682 02ED 	;
02683 02ED 	; Entry: none
02684 02ED 	; Exit: none
02685 02ED 	; RAM Used: Param78, Param79 (verified 4/17/03)
02686 02ED 	; Calls:(1+0) wait_LCD_Ready, SendLCD_CmdW
02687 02ED 	;
02688 02ED 300E 	lcd_Cursor	MOVLW	LCD_Cursor
02689 02EE 2AEF 		GOTO	lcd_RdyAndCmd
02690 02EF 	;
02691 02EF 		if Useslcd_Home
02703 02EF 		endif
02704 02EF 	;=========================================================================
02705 02EF 	; Home the cursor clearing DDRAM
02706 02EF 	;
02707 02EF 	; Entry: none
02708 02EF 	; Exit: none
02709 02EF 	; RAM used: Param78, Param79 (verified 2/26/03)
02710 02EF 	; Calls:(1+0) wait_LCD_Ready, SendLCD_CmdW
02711 02EF 	;
02712 02EF 		if UsesLCDClear
02714 02EF 		endif
02715 02EF 00F9 	lcd_RdyAndCmd	MOVWF	Param79
02716 02F0 230A 		CALL	wait_LCD_Ready
02717 02F1 2B42 		GOTO	SendLCD_Cmd79
02718 02F2 	;
02719 02F2 		if Useslcd_ReadData
02720 02F2 	;=========================================================================
02721 02F2 	; Set the DD Ram Address
02722 02F2 	; First line starts at 0x00..0x13, 2nd at 0x40..0x53, 3rd at 0x14..0x27, 4th at 0x54..0x67
02723 02F2 	;
02724 02F2 	; Entry: W=DD Ram Address (7 bits)
02725 02F2 	; Exit: none
02726 02F2 	; RAM Used: Param78, Param79 (verified 12/8/03)
02727 02F2 	; Calls:(1+0) wait_LCD_Ready, SendLCD_CmdW
02728 02F2 	;
02729 02F2 3880 	lcd_SetDDRamAddress	IORLW	0x80
02730 02F3 2AEF 		GOTO	lcd_RdyAndCmd
02731 02F4 	;
02732 02F4 	;=========================================================================
02733 02F4 	; Read from DD Ram
02734 02F4 	;
02735 02F4 	; Entry: none
02736 02F4 	; Exit: Byte in W and Param78
02737 02F4 	; RAM used: Param78 (verified 12/8/03)
02738 02F4 	; Calls:(1+0) wait_LCD_Ready
02739 02F4 	;
02740 02F4 230A 	lcd_ReadData	CALL	wait_LCD_Ready
02741 02F5 1688 		BSF	PORTD,LCD_RW	; LCD_RD = 1; Read
02742 02F6 1608 		BSF	PORTD,LCD_AS	; LCD_RS = 1; Data
02743 02F7 1786 		BSF	PORTB,LCD_E	;LCD_E = 1
02744 02F8 0000 		NOP
02745 02F9 0000 		NOP
02746 02FA 0808 		MOVF	PORTD,W	;get high nibble
02747 02FB 390F 		ANDLW	0x0F
02748 02FC 00F8 		MOVWF	Param78
02749 02FD 0EF8 		SWAPF	Param78,F
02750 02FE 1386 		BCF	PORTB,LCD_E	;LCD_E = 0
02751 02FF 0000 		NOP
02752 0300 0000 		NOP
02753 0301 1786 		BSF	PORTB,LCD_E	;LCD_E = 1
02754 0302 0000 		NOP		
02755 0303 0000 		NOP
02756 0304 0808 		MOVF	PORTD,W	;get low nibble
02757 0305 390F 		ANDLW	0x0F
02758 0306 04F8 		IORWF	Param78,F
02759 0307 1386 		BCF	PORTB,LCD_E	;LCD_E = 0
02760 0308 0878 		MOVF	Param78,W
02761 0309 0008 		RETURN
02762 030A 	;	
02763 030A 		endif
02764 030A 	;=========================================================================
02765 030A 	; Polls the LCDs Busy Flag until clear
02766 030A 	;
02767 030A 	; Entry: none
02768 030A 	; Exit: none
02769 030A 	; RAM used: none (verified 2/26/03)
02770 030A 	; Calls:(0) none
02771 030A 	;
02772 030A 	wait_LCD_Ready	mBank1
02773 030C 		if UsesRS232BufIO
02777 030C 		endif
02778 030C 300F 		MOVLW	0x0F	;Data In
02779 030D 0088 		MOVWF	TRISD
02780 030E 1283 		BCF	STATUS,RP0	;Bank0
02781 030F 1688 		BSF	PORTD,LCD_RW	; LCD_RD = 1; Read
02782 0310 1208 		BCF	PORTD,LCD_AS	; LCD_RS = 0; command
02783 0311 1786 		BSF	PORTB,LCD_E	;LCD_E = 1
02784 0312 0000 		NOP
02785 0313 0000 		NOP
02786 0314 0808 		MOVF	PORTD,W	;get high nibble
02787 0315 1386 		BCF	PORTB,LCD_E	;LCD_E = 0
02788 0316 0000 		NOP
02789 0317 0000 		NOP
02790 0318 1786 		BSF	PORTB,LCD_E	;LCD_E = 1
02791 0319 0000 		NOP		;loose the low nibble
02792 031A 0000 		NOP
02793 031B 1386 		BCF	PORTB,LCD_E	;LCD_E = 0
02794 031C 		if UsesRS232BufIO
02796 031C 		endif
CastleGate.asm   "LowStuff.asm"                                          Page: 77
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

02797 031C 3908 		ANDLW	0x08	;Busy Flag
02798 031D 1D03 		BTFSS	STATUS,Z
02799 031E 2B0A 		GOTO	wait_LCD_Ready
02800 031F 0008 		RETURN
02801 0320 	;
02802 0320 	;===================================================================================
02803 0320 	; No Clear version of lcd_gotoxy
02804 0320 	;
02805 0320 	; Entry: W='X' value, Param78='Y' value
02806 0320 	; Exit: none
02807 0320 	; RAM used: Param78, Param79 (verified 4/18/03)
02808 0320 	; Calls: (1+0) wait_LCD_Ready, lcd_nybble
02809 0320 	;
02810 0320 	lcd_gotoxy_NC	mBank0
02811 0322 1225 		BCF	ClrLine
02812 0323 2B37 		GOTO	lcd_gotoxy_NC_1
02813 0324 	;
02814 0324 	;===================================================================================
02815 0324 	; part of lcd_gotoxy (do not call)
02816 0324 	;
02817 0324 00FA 	lcd_gotoWClr	MOVWF	Param7A
02818 0325 2341 		CALL	SendLCD_CmdW
02819 0326 3014 		MOVLW	d'20'
02820 0327 00FB 		MOVWF	Param7B
02821 0328 3020 	lcd_gotoWClr_L1	MOVLW	' '
02822 0329 234D 		CALL	lcd_char
02823 032A 0BFB 		DECFSZ	Param7B,F
02824 032B 2B28 		GOTO	lcd_gotoWClr_L1
02825 032C 230A 		CALL	wait_LCD_Ready	
02826 032D 087A 		MOVF	Param7A,W
02827 032E 2B41 		GOTO	SendLCD_CmdW
02828 032F 	;
02829 032F 	;===================================================================================
02830 032F 	; Goto the beginning of line W
02831 032F 	; 
02832 032F 	; Entry: W='X' value, Param78='Y' value
02833 032F 	; Exit: none
02834 032F 	; RAM used: Param78, Param79, Param7A, Param7B (verified 2/26/03)
02835 032F 	; Calls:(1+1) wait_LCD_Ready, SendLCD_CmdW
02836 032F 	;
02837 032F 00F8 	lcd_GotoLineW	MOVWF	Param78
02838 0330 0103 		CLRW
02839 0331 	;
02840 0331 	; fall through to lcd_gotoxy
02841 0331 	;===================================================================================
02842 0331 	;  Go to an X-Y position on the display, top left is 0, 0
02843 0331 	; if W(X)=0 then clear line
02844 0331 	;
02845 0331 	; Entry: W='X' value, Param78='Y' value
02846 0331 	; Exit: none
02847 0331 	; RAM used: Param78, Param79, Param7A, Param7B (verified 2/26/03)
02848 0331 	; Calls:(1+1) wait_LCD_Ready, SendLCD_CmdW
02849 0331 	;						
02850 0331 	; W=W+LCD_SETPOS
02851 0331 	; if (y=1) or (y=3)
02852 0331 	;  W=W+LCD_LINE2
02853 0331 	; if (y=2) or (y=3)
02854 0331 	;  W=W+20
02855 0331 	lcd_gotoxy	mBank0
02856 0333 1225 		BCF	ClrLine
02857 0334 391F 		ANDLW	0x1F	;limit to low 5 bits
02858 0335 1903 		BTFSC	STATUS,Z
02859 0336 1625 		BSF	ClrLine
02860 0337 1878 	lcd_gotoxy_NC_1	BTFSC	Param78,0	;inc DDRAM pos by 20
02861 0338 3E40 		ADDLW	LCD_LINE2
02862 0339 18F8 		BTFSC	Param78,1
02863 033A 3E14 		ADDLW	d'20'
02864 033B 3880 		IORLW	LCD_SETPOS
02865 033C 00F8 		MOVWF	Param78
02866 033D 230A 		CALL	wait_LCD_Ready
02867 033E 0878 		MOVF	Param78,W
02868 033F 1A25 		BTFSC	ClrLine
02869 0340 2B24 		GOTO	lcd_gotoWClr
02870 0341 	;
02871 0341 	; fall through to SendLCD_CmdW
02872 0341 	;===========================================================================================
02873 0341 	; Send a command byte to the LCD as two nybbles
02874 0341 	;		
02875 0341 	; Entry: W=Byte to send
02876 0341 	; Exit: none
02877 0341 	; RAM used: Param78, Param79 (verified 2/26/03)
02878 0341 	; Calls:(1+0) lcd_nybble
02879 0341 	;
02880 0341 00F9 	SendLCD_CmdW	MOVWF	Param79
02881 0342 	SendLCD_Cmd79	mBank1
02882 0344 3000 		MOVLW	All_Out
02883 0345 0088 		MOVWF	TRISD
02884 0346 1283 		BCF	STATUS,RP0
02885 0347 1288 		BCF	PORTD,LCD_RW	; LCD_RD = 0; write
02886 0348 1208 		BCF	PORTD,LCD_AS	; LCD_RS = 0; command
02887 0349 0E79 		SWAPF	Param79,W	; Send high nibble to LCD
02888 034A 22DF 		CALL	lcd_nybble
02889 034B 0879 		MOVF	Param79,W	; Send low nibble to LCD
02890 034C 	;
02891 034C 2ADF 		GOTO	lcd_nybble
02892 034D 	;
02893 034D 	;======================================================================================
02894 034D 	; Send a character byte to the LCD as two nybbles
02895 034D 	;		
02896 034D 	; Entry: W
CastleGate.asm   "LowStuff.asm"                                          Page: 78
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

02897 034D 	; Exit: Param79 will contain the value from W
02898 034D 	; RAM used: Param78, Param79 (verified 2/26/03)
02899 034D 	; Calls:(1+0) wait_LCD_Ready, lcd_nybble
02900 034D 	;
02901 034D 00F9 	lcd_char	MOVWF	Param79
02902 034E 230A 		CALL	wait_LCD_Ready
02903 034F 		mBank1
02904 0351 3000 		MOVLW	All_Out
02905 0352 0088 		MOVWF	TRISD
02906 0353 1283 		BCF	STATUS,RP0
02907 0354 	;
02908 0354 1288 		BCF	PORTD,LCD_RW	; LCD_RD = 0; write
02909 0355 1608 		BSF	PORTD,LCD_AS	; LCD_RS = 1; data
02910 0356 0E79 		SWAPF	Param79,W	; Send high nibble to LCD
02911 0357 22DF 		CALL	lcd_nybble
02912 0358 	;
02913 0358 0879 		MOVF	Param79,W	; Send low nibble to LCD
02914 0359 2ADF 		GOTO	lcd_nybble
02915 035A 	;
02916 035A 	;======================================================================================
02917 035A 	; Initialise the LCD
02918 035A 	; Entry: none
02919 035A 	; Exit: none
02920 035A 	; RAM used: Param78, Param79
02921 035A 	; Calls:(1+1) DelayWmS, SendLCD_CmdW, Delay100uS, LCD_Clear
02922 035A 	;
02923 035A 1683 	Init_LCD	BSF	STATUS,RP0
02924 035B 3000 		MOVLW	All_Out	; Ensure RS and R/W lines are O/Ps
02925 035C 0088 		MOVWF	TRISD
02926 035D 1283 		BCF	STATUS,RP0
02927 035E 	;
02928 035E 1208 		BCF	PORTD,LCD_AS	; LCD_RS = 0; command
02929 035F 1288 		BCF	PORTD,LCD_RW	; LCD_RD = 0; write
02930 0360 	;
02931 0360 3014 		MOVLW	d'20'
02932 0361 22C8 		CALL	DelayWmS	; Ensure LCD is stable after power-up
02933 0362 	;Optrex Display
02934 0362 3028 		MOVLW	LCD_MODE
02935 0363 2341 		CALL	SendLCD_CmdW
02936 0364 3006 		MOVLW	0x06
02937 0365 22C8 		CALL	DelayWmS
02938 0366 	;
02939 0366 3028 		MOVLW	LCD_MODE
02940 0367 2341 		CALL	SendLCD_CmdW
02941 0368 3006 		MOVLW	0x06
02942 0369 22C8 		CALL	DelayWmS
02943 036A 	;
02944 036A 3028 		MOVLW	LCD_MODE
02945 036B 2341 		CALL	SendLCD_CmdW
02946 036C 3006 		MOVLW	0x06
02947 036D 22C8 		CALL	DelayWmS
02948 036E 	;
02949 036E 300C 		MOVLW	LCD_ON
02950 036F 2341 		CALL	SendLCD_CmdW
02951 0370 22DA 		CALL	Delay100uS
02952 0371 	;
02953 0371 3006 		MOVLW	LCD_EnterMode
02954 0372 2341 		CALL	SendLCD_CmdW
02955 0373 22DA 		CALL	Delay100uS
02956 0374 	;
02957 0374 3001 		MOVLW	LCD_Clear
02958 0375 2B41 		GOTO	SendLCD_CmdW
02959 0376 	;
02960 0376 		endif
02961 0376 	;=========================================================================================
02962 0376 		if UsesByte2Str
02985 0376 		endif
02986 0376 	;
02987 0376 	;=========================================================================================
02988 0376 	; Disp_Hex_Byte send a byte to the display as 2 hex digits
02989 0376 	; entry: W=value
02990 0376 	; exit: none
02991 0376 	; RAM used:Param75, Param76, Param79
02992 0376 	; Calls:(1+2) Disp_Hex_Nibble, DisplaysW
02993 0376 	;
02994 0376 00F6 	Disp_Hex_Byte	MOVWF	Param76	;save the data
02995 0377 0E76 	Disp_Hex_Byte_E2	SWAPF	Param76,W	;get hi nibble in low nibble of W
02996 0378 237A 		CALL	Disp_Hex_Nibble	;output the high nibble
02997 0379 0876 		MOVF	Param76,W	; now the low nibble
02998 037A 	;
02999 037A 	;fall through to Disp_Hex_Nibble
03000 037A 	;
03001 037A 	;===============================================================
03002 037A 	; Send a nibble to the display as a hex digit
03003 037A 	; Entry: W:0..3 = Nibble to display
03004 037A 	; RAM used: Param75, Param78, Param79
03005 037A 	; Calls:(1+1) DisplaysW
03006 037A 	;
03007 037A 390F 	Disp_Hex_Nibble	ANDLW	0x0F	;kill the other nibble
03008 037B 3E30 		ADDLW	'0'	; add offset
03009 037C 00F9 		MOVWF	Param79
03010 037D 303A 		MOVLW	0x3A	;'9'+1 should barrow if 0..9
03011 037E 0279 		SUBWF	Param79,W	
03012 037F 0103 		CLRW
03013 0380 1803 		BTFSC	STATUS,C	;skip if barrowed
03014 0381 3007 		MOVLW	0x07
03015 0382 0779 		ADDWF	Param79,W
03016 0383 	;
03017 0383 2948 		GOTO	DisplayOrPut
03018 0384 	;
CastleGate.asm   "LowStuff.asm"                                          Page: 79
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

03019 0384 	;=========================================================================================
03020 0384 	; Load a ':' into the W and goto DisplaysW
03021 0384 	;
03022 0384 303A 	Display_Colon	MOVLW	':'
03023 0385 2B87 		GOTO	DisplaysW
03024 0386 	;
03025 0386 	;=========================================================================================
03026 0386 	; Load a '.' into the W and goto DisplaysW
03027 0386 	;
03028 0386 302E 	Display_Dot	MOVLW	'.'
03029 0387 	;
03030 0387 	; fall through to DisplaysW
03031 0387 	;=========================================================================================
03032 0387 	; Display handler; redirects to LCD and/or serial
03033 0387 	; 					 
03034 0387 	; RAM used: Param75=CharTemp,Param78, Param79
03035 0387 	; Calls:(1+1) wait_LCD_Ready, SendLCD_CmdW, lcd_char, putchar
03036 0387 	;
03037 0387 00F5 	DisplaysW	MOVWF	Param75	;CharTemp=W
03038 0388 		mBank0
03039 038A 1E26 		BTFSS	SendToLCD	; if (disp_lcd)
03040 038B 2B9E 		GOTO	DispSerial	;not LCD try Serial
03041 038C 	;
03042 038C 300D 		MOVLW	0x0D	; if (b == '\r') 
03043 038D 0275 		SUBWF	Param75,W
03044 038E 1D03 		BTFSS	STATUS,Z
03045 038F 2B94 		GOTO	DisplaysW_1
03046 0390 	;
03047 0390 	;Carrage Return (0D)
03048 0390 		if UsesLCD
03049 0390 	;
03050 0390 230A 		CALL	wait_LCD_Ready
03051 0391 3080 		MOVLW	LCD_SETPOS	; lcd_cmd(LCD_SETPOS); 
03052 0392 2341 		CALL	SendLCD_CmdW
03053 0393 	;
03054 0393 		endif
03055 0393 	;
03056 0393 2B9E 		GOTO	DispSerial
03057 0394 	;
03058 0394 	; else if (b == '\n') 
03059 0394 300A 	DisplaysW_1	MOVLW	0x0A
03060 0395 0275 		SUBWF	Param75,W
03061 0396 1D03 		BTFSS	STATUS,Z
03062 0397 2B9C 		GOTO	DisplaysW_2
03063 0398 	;
03064 0398 	;Line Feed (0A)
03065 0398 		if UsesLCD
03066 0398 	;
03067 0398 230A 		CALL	wait_LCD_Ready
03068 0399 30C0 		MOVLW	LCD_SETPOS+LCD_LINE2	; lcd_cmd(LCD_SETPOS + LCD_LINE2); 
03069 039A 2341 		CALL	SendLCD_CmdW
03070 039B 		endif
03071 039B 	;
03072 039B 2B9E 		GOTO	DispSerial
03073 039C 	;
03074 039C 	DisplaysW_2	
03075 039C 		if UsesLCD
03076 039C 	;
03077 039C 0875 		MOVF	Param75,W	; lcd_char(b); 
03078 039D 234D 		CALL	lcd_char
03079 039E 		endif
03080 039E 	;
03081 039E 	;  fall through to  DispSerial
03082 039E 	;====================================================================================
03083 039E 	;     DispSerial
03084 039E 	; Entry: Param75 char to send
03085 039E 	; Exit: none
03086 039E 	; RAM used: Param75=CharToSend
03087 039E 	; Calls:(1+0) putchar
03088 039E 	;
03089 039E 	DispSerial	
03090 039E 		if RS232Active
03126 039E 		endif
03127 039E 0008 		RETURN
03128 039F 	;
03129 039F 	;
03130 039F 		if Do_RS232_Test
03144 039F 		endif
03145 039F 	;
03146 039F 	;========================================================================================
03147 039F 	;========================================================================================
03148 039F 	; Read from the CPU's EEPROM using Param79 as Address
03149 039F 	;
03150 039F 	; Entry: Param79=address to read
03151 039F 	; Exit: W=data from eeprom, Param79
03152 039F 	; RAM used: Param79 (verified 2/26/03)
03153 039F 	; Calls:(0) none
03154 039F 	;
03155 039F 0879 	ReadEE79	MOVF	Param79,W
03156 03A0 2BA3 		GOTO	ReadEEwW
03157 03A1 	;
03158 03A1 	; fall through to ReadEEwW
03159 03A1 	;
03160 03A1 	;========================================================================================
03161 03A1 	; Read from the CPU's EEPROM using Param79++ as Address
03162 03A1 	;
03163 03A1 	; Entry: Param79=address to read
03164 03A1 	; Exit: W=data from eeprom, Param79++
03165 03A1 	; RAM used: Param79 (verified 2/26/03)
03166 03A1 	; Calls:(0) none
CastleGate.asm   "LowStuff.asm"                                          Page: 80
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

03167 03A1 	;
03168 03A1 0879 	ReadEE79PI	MOVF	Param79,W
03169 03A2 0AF9 		INCF	Param79,F
03170 03A3 	;
03171 03A3 	; fall through to ReadEEwW
03172 03A3 	;
03173 03A3 	;========================================================================================
03174 03A3 	; Read from the CPU's EEPROM using W as Address
03175 03A3 	; Entry: W=address to read
03176 03A3 	; Exit: W=data from eeprom
03177 03A3 	; RAM used: none (verified 2/26/03)
03178 03A3 	; Calls:(0) none
03179 03A3 	;
03180 03A3 	ReadEEwW	mBank2
03181 03A5 008D 		MOVWF	EEADR
03182 03A6 018F 		CLRF	EEADRH
03183 03A7 1683 		BSF	STATUS,RP0	;bank3
03184 03A8 138C 		BCF	EECON1,EEPGD
03185 03A9 140C 		BSF	EECON1,RD
03186 03AA 1283 		BCF	STATUS,RP0	;bank2
03187 03AB 080C 		MOVF	EEDATA,W
03188 03AC 1303 		BCF	STATUS,RP1	;bank0
03189 03AD 0008 		RETURN
03190 03AE 	;
03191 03AE 	;=========================================================================================
03192 03AE 	; Write CPU's EEPROM using address from Param79++ and Data in W
03193 03AE 	; Entry: Param79=address, W=data
03194 03AE 	; Exit: EEADR=address, W=data, Param79++
03195 03AE 	; RAM used: Param78, Param79 (verified 2/26/03)
03196 03AE 	; Calls:(0) WriteEEwW
03197 03AE 	;
03198 03AE 00F8 	WriteEEP79WPI	MOVWF	Param78
03199 03AF 0879 		MOVF	Param79,W
03200 03B0 0AF9 		INCF	Param79,F
03201 03B1 2BB4 		GOTO	WriteEEP79W_1
03202 03B2 	;
03203 03B2 	;=========================================================================================
03204 03B2 	; Write CPU's EEPROM using address from Param79 and Data in W
03205 03B2 	; Entry: Param79=address, W=data
03206 03B2 	; Exit: EEADR=address, W=data
03207 03B2 	; RAM used: Param78, Param79 (verified 2/26/03)
03208 03B2 	; Calls:(0) WriteEEwW
03209 03B2 	;
03210 03B2 00F8 	WriteEEP79W	MOVWF	Param78
03211 03B3 0879 		MOVF	Param79,W
03212 03B4 	WriteEEP79W_1	mBank2
03213 03B6 008D 		MOVWF	EEADR
03214 03B7 1303 		BCF	STATUS,RP1
03215 03B8 0878 		MOVF	Param78,W
03216 03B9 	;
03217 03B9 	; fall through to WriteEEwW
03218 03B9 	;
03219 03B9 	;=========================================================================================
03220 03B9 	; Write CPU's EEPROM using current value in EEADR and W as Data
03221 03B9 	; Entry: EEADR=address, W=data
03222 03B9 	; Exit: none
03223 03B9 	; RAM used: none (verified 2/26/03)
03224 03B9 	; Calls:(0) none
03225 03B9 	;
03226 03B9 	WriteEEwW	mBank2
03227 03BB 018F 		CLRF	EEADRH
03228 03BC 008C 		MOVWF	EEDATA
03229 03BD 1683 		BSF	STATUS,RP0	;Bank3
03230 03BE 		if UsesISR
03234 03BE 		endif
03235 03BE 138C 		BCF	EECON1,EEPGD
03236 03BF 150C 		BSF	EECON1,WREN
03237 03C0 3055 		MOVLW	0x55	;load
03238 03C1 008D 		MOVWF	EECON2
03239 03C2 30AA 		MOVLW	0xAA
03240 03C3 008D 		MOVWF	EECON2
03241 03C4 148C 		BSF	EECON1,WR	;fire!
03242 03C5 188C 		BTFSC	EECON1,WR	;wait for write to finish
03243 03C6 2BC5 		GOTO	$-1	; test again
03244 03C7 110C 		BCF	EECON1,WREN
03245 03C8 		if UsesISR
03250 03C8 		endif
03251 03C8 2C2E 		GOTO	Bank0Rtn
03252 03C9 	;
03253 03C9 		if UsesNIC
03254 03C9 	;===========================================================================================
03255 03C9 	; Do a 1's complement checksum of the CPU's non-volatile eeprom
03256 03C9 	; (6 bytes tested, 2 lsB of MAC Address, and 4 byte IP Address)
03257 03C9 	; Entry: none
03258 03C9 	; Exit: Param78=Checksum
03259 03C9 	; RAM used:Param78, Param79 (verified 2/26/03)
03260 03C9 	; Calls:(1+0) ReadEEwW
03261 03C9 	;
03262 03C9 01F8 	csum_nonvol	CLRF	Param78	;csum
03263 03CA 01F9 		CLRF	Param79	;count
03264 03CB 3006 	csum_nonvol_L1	MOVLW	0x06
03265 03CC 0279 		SUBWF	Param79,W
03266 03CD 1803 		BTFSC	STATUS,C
03267 03CE 2BD2 		GOTO	csum_nonvol_End
03268 03CF 23A1 		CALL	ReadEE79PI	;sum += read_eeprom(i++);
03269 03D0 07F8 		ADDWF	Param78,F
03270 03D1 2BCB 		GOTO	csum_nonvol_L1
03271 03D2 30FF 	csum_nonvol_End	MOVLW	0xFF
03272 03D3 06F8 		XORWF	Param78,F
03273 03D4 3400 		RETLW	00
CastleGate.asm   "LowStuff.asm"                                          Page: 81
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

03274 03D5 	;
03275 03D5 	;=====================================================================================
03276 03D5 	; Read in the nonvolatile parameters, return 0 if error
03277 03D5 	;  This routine is called one time only at power up.
03278 03D5 	;  It reads:
03279 03D5 	;    2 lsB of MAC Address, and 4 byte IP Address
03280 03D5 	;
03281 03D5 	; Entry:none
03282 03D5 	; Exit: if csum error then Param78=0 else 1
03283 03D5 	; RAM used: Param78, Param79, FSR (verified 2/26/03)
03284 03D5 	; Calls:(1+1) ReadEEwW, csum_nonvol
03285 03D5 	;
03286 03D5 01F9 	read_nonvol	CLRF	Param79
03287 03D6 	;
03288 03D6 		if HasMAC_Addr_EEPROM=0
03289 03D6 23A1 		CALL	ReadEE79PI
03290 03D7 00AE 		MOVWF	myeth4
03291 03D8 		endif
03292 03D8 	;
03293 03D8 		if HasMAC_Addr_EEPROM=0
03294 03D8 23A1 		CALL	ReadEE79PI
03295 03D9 00AF 		MOVWF	myeth5
03296 03DA 		endif
03297 03DA 	;
03298 03DA 23A1 		CALL	ReadEE79PI
03299 03DB 00B0 		MOVWF	myip_b3
03300 03DC 23A1 		CALL	ReadEE79PI
03301 03DD 00B1 		MOVWF	myip_b2
03302 03DE 23A1 		CALL	ReadEE79PI
03303 03DF 00B2 		MOVWF	myip_b1
03304 03E0 23A1 		CALL	ReadEE79PI
03305 03E1 00B3 		MOVWF	myip_b0
03306 03E2 	;
03307 03E2 		if HasMAC_Addr_EEPROM=0
03308 03E2 23C9 		CALL	csum_nonvol	; return (csum_nonvol() == read_eeprom(6)); 
03309 03E3 3006 		MOVLW	0x06
03310 03E4 23A3 		CALL	ReadEEwW
03311 03E5 0278 		SUBWF	Param78,W	;calc'd csum = csum?
03312 03E6 3001 		MOVLW	0x01	;ok
03313 03E7 1D03 		BTFSS	STATUS,Z	;skip if same
03314 03E8 0103 		CLRW		;Error!
03315 03E9 00F8 		MOVWF	Param78
03316 03EA 0008 		RETURN
03317 03EB 		else
03319 03EB 		endif
03320 03EB 	;
03321 03EB 	;========================================================================================================
03322 03EB 	; Write out the nonvolatile parameters to CPU's eeprom
03323 03EB 	; Entry: myeth4, myeth5, myip
03324 03EB 	; Exit: none
03325 03EB 	; RAM used: Param78, Param79, myeth4, myeth5, myip (verified 2/26/03)
03326 03EB 	; Calls:(1+1) WriteEEP79W, csum_nonvol
03327 03EB 	; 
03328 03EB 01F9 	write_nonvol	CLRF	Param79
03329 03EC 	;
03330 03EC 		if HasMAC_Addr_EEPROM=0
03331 03EC 082E 		MOVF	myeth4,W
03332 03ED 23AE 		CALL	WriteEEP79WPI	; write_eeprom(0, myeth[4]);
03333 03EE 082F 		MOVF	myeth5,W
03334 03EF 23AE 		CALL	WriteEEP79WPI	; write_eeprom(1, myeth[5]);
03335 03F0 		endif
03336 03F0 	;
03337 03F0 0830 		MOVF	myip_b3,W
03338 03F1 23AE 		CALL	WriteEEP79WPI	; write_eeprom(2, myip.b[3]);
03339 03F2 0831 		MOVF	myip_b2,W
03340 03F3 23AE 		CALL	WriteEEP79WPI	; write_eeprom(3, myip.b[2]);
03341 03F4 0832 		MOVF	myip_b1,W
03342 03F5 23AE 		CALL	WriteEEP79WPI	; write_eeprom(4, myip.b[1]);
03343 03F6 0833 		MOVF	myip_b0,W
03344 03F7 23AE 		CALL	WriteEEP79WPI	; write_eeprom(5, myip.b[0]);
03345 03F8 		if HasMAC_Addr_EEPROM=0
03346 03F8 23C9 		CALL	csum_nonvol	; write_eeprom(6, csum_nonvol());
03347 03F9 3006 		MOVLW	0x06
03348 03FA 00F9 		MOVWF	Param79
03349 03FB 0878 		MOVF	Param78,W
03350 03FC 2BB2 		GOTO	WriteEEP79W
03351 03FD 		else
03353 03FD 		endif
03354 03FD 	;
03355 03FD 		endif
03356 03FD 	;===========================================================================================================
03357 03FD 	;===========================================================================================================
03358 03FD 		if UsesDataLogging & HasRTC
03378 03FD 		endif
03379 03FD 	;
03380 03FD 		if HasRTC & UsesLCD & Use_display_rtc
03411 03FD 		endif
03412 03FD 	;
03413 03FD 		if HasRTC & UsesDateToBCD
03439 03FD 		endif
03440 03FD 	;
03441 03FD 		if HasRTC
03480 03FD 		endif
03481 03FD 	;
03482 03FD 		if HasRTC
03616 03FD 		endif
03617 03FD 	;
03618 03FD 	;=========================================================================================================
03619 03FD 	;=========================================================================================================
03620 03FD 		if UsesMAX110
CastleGate.asm   "LowStuff.asm"                                          Page: 82
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

03746 03FD 		endif
03747 03FD 	;
03748 03FD 	;========================================================================================================
03749 03FD 		if UsesLDO0
03750 03FD 	;========================================================================================================
03751 03FD 	; if CMD_LDO_0<>CurrentLDO_0 then WriteLDO_0
03752 03FD 	; Entry: CMD_LDO_0, CurrentLDO_0
03753 03FD 	; Exit: none
03754 03FD 	; RAM used: none (verified 2/26/03)
03755 03FD 	; Calls:(0) none
03756 03FD 	;
03757 03FD 	OPT_WriteLDO_0	mBank3
03758 03FF 0826 		MOVF	CMD_LDO_0,W
03759 0400 0223 		SUBWF	CurrentLDO_0,W
03760 0401 		SKPNZ
03761 0402 2C2E 		GOTO	Bank0Rtn
03762 0403 	;
03763 0403 	;=================================================================================
03764 0403 	; Write the data in CMD_LDO_0 to the latch
03765 0403 	; Entry: CurrentLDO_0
03766 0403 	; Exit: none
03767 0403 	; RAM used: none (verified 2/26/03)
03768 0403 	; Calls:(0) none
03769 0403 	;
03770 0403 	WriteLDO_0	mBank1
03771 0405 3000 		MOVLW	All_Out
03772 0406 		if UsesRS232BufIO
03776 0406 		endif
03777 0406 0088 		MOVWF	TRISD
03778 0407 1703 		BSF	_RP1	;Bank3
03779 0408 0826 		MOVF	CMD_LDO_0,W
03780 0409 00A3 		MOVWF	CurrentLDO_0
03781 040A 		mBank0
03782 040C 0088 		MOVWF	PORTD
03783 040D 0806 		MOVF	PORTB,W
03784 040E 39F0 		ANDLW	AddressMask
03785 040F 3808 		IORLW	SelectLDO0
03786 0410 0086 	WriteLDO_X	MOVWF	PORTB
03787 0411 1206 		BCF	PORTB,SelectEnable
03788 0412 0000 		NOP
03789 0413 1606 		BSF	PORTB,SelectEnable
03790 0414 		if UsesRS232BufIO
03792 0414 		endif
03793 0414 0008 		RETURN
03794 0415 	;
03795 0415 		endif	UsesLDO0
03796 0415 	;
03797 0415 		if UsesLDO1
03798 0415 	;=================================================================================
03799 0415 	; if CMD_LDO_1<>CurrentLDO_1 then WriteLDO_1
03800 0415 	; Entry: CMD_LDO_1, CurrentLDO_1
03801 0415 	; Exit: none
03802 0415 	; RAM used: none (verified 2/26/03)
03803 0415 	; Calls:(0) none
03804 0415 	;
03805 0415 	OPT_WriteLDO_1	mBank3
03806 0417 0827 		MOVF	CMD_LDO_1,W
03807 0418 0224 		SUBWF	CurrentLDO_1,W
03808 0419 		SKPNZ
03809 041A 2C2E 		GOTO	Bank0Rtn
03810 041B 	;
03811 041B 	;=================================================================================
03812 041B 	; Write the data in CMD_LDO_1 to the latch
03813 041B 	; Entry: CMD_LDO_1
03814 041B 	; Exit: CurrentLDO_1 = CMD_LDO_1
03815 041B 	; RAM used: none (verified 2/26/03)
03816 041B 	; Calls:(0) none
03817 041B 	;
03818 041B 	WriteLDO_1	mBank1
03819 041D 3000 		MOVLW	All_Out
03820 041E 		if UsesRS232BufIO
03824 041E 		endif
03825 041E 0088 		MOVWF	TRISD
03826 041F 1703 		BSF	STATUS,RP1	;Bank 3
03827 0420 0827 		MOVF	CMD_LDO_1,W
03828 0421 00A4 		MOVWF	CurrentLDO_1
03829 0422 		mBank0
03830 0424 0088 		MOVWF	PORTD
03831 0425 0806 		MOVF	PORTB,W
03832 0426 39F0 		ANDLW	AddressMask
03833 0427 3809 		IORLW	SelectLDO1
03834 0428 2C10 		GOTO	WriteLDO_X
03835 0429 	;
03836 0429 		endif		;UsesLDO1
03837 0429 	;
03838 0429 		if UsesLDO2
03877 0429 		endif		;UsesLDO1
03878 0429 	;
03879 0429 		if UsesLDO3
03918 0429 		endif		;UsesLDO1
03919 0429 	;
03920 0429 		if UsesLDI0
03921 0429 	;=================================================================================
03922 0429 	; Read the data from the latch and store it at CurrentLDI_0
03923 0429 	; Entry:none
03924 0429 	; Exit:CurrentLDI_0 and W contain the Data
03925 0429 	; RAM used: Param78 (verified 2/26/03)
03926 0429 	; Calls:(1+0) ReadData
03927 0429 	;
03928 0429 300A 	ReadLDI_0	MOVLW	SelectLDI0
CastleGate.asm   "LowStuff.asm"                                          Page: 83
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

03929 042A 21B0 		CALL	ReadData
03930 042B 	;
03931 042B 		mBank3
03932 042D 00A5 		MOVWF	CurrentLDI_0
03933 042E 		endif
03934 042E 	Bank0Rtn
03935 042E 	ReadLDI_end	mBank0
03936 0430 0008 		RETURN
03937 0431 	;
03938 0431 		if UsesLDI1
03952 0431 		endif
03953 0431 	;
03954 0431 		if UsesLDI2
03969 0431 		endif
03970 0431 	;
03971 0431 		if UsesLDI3
03986 0431 		endif
03987 0431 	;
03988 0431 	;===============================================================================================
03989 0431 		if Do_LD_Test
04024 0431 		endif		;Do_LD_Test
04025 0431 	;
04026 0431 	;
04027 0431 	;=====================================
04028 0431 	; geticks
04029 0431 	; Update the current tick count, return W=1 if changed
04030 0431 	; TIMER1_DIV=120, Fosc/4/8/(120*256)=20
04031 0431 	; RAM used:tickcount, lastc, Param78 (verified 1/30/03)
04032 0431 	; Calls:(0) none
04033 0431 	;
04034 0431 0064 	geticks	CLRWDT		;Kick watchdog
04035 0432 080F 		MOVF	TMR1H,W
04036 0433 00F8 		MOVWF	Param78	;store it temp
04037 0434 0820 		MOVF	lastc,W
04038 0435 02F8 		SUBWF	Param78,F	; tc = TMR1H - lastc; 
04039 0436 3078 		MOVLW	TIMER1_DIV	; if (tc >= TIMER1_DIV)
04040 0437 0278 		SUBWF	Param78,W
04041 0438 1C03 		BTFSS	_C
04042 0439 3400 		RETLW	0x00
04043 043A 0AA1 		INCF	tickcount,F	; tickcount++; 
04044 043B 3078 		MOVLW	TIMER1_DIV	; lastc = lastc+TIMER1_DIV;
04045 043C 07A0 		ADDWF	lastc,F
04046 043D 3401 		RETLW	0x01
04047 043E 	;	
04048 043E 	;=====================================================================================
04049 043E 	; Check timer, scan ADCs, toggle LED if timeout 
04050 043E 	; RAM used: Param78, Param79
04051 043E 	; Calls:(1+0) geticks, OnTheTick, ToggleSysLED, ReadLDI_N(1+0), OPT_WriteLDO_N(0)
04052 043E 	;
04053 043E 	scan_io	mBank0
04054 0440 		if UsesRS232BufIO
04056 0440 		endif
04057 0440 	;
04058 0440 2431 		CALL	geticks
04059 0441 3901 		ANDLW	0x01
04060 0442 		SKPNZ
04061 0443 2C47 		GOTO	scan_io_1
04062 0444 	;
04063 0444 		if UsesScrollMenu
04066 0444 		endif
04067 0444 	;
04068 0444 		mCall0To2	OnTheTick	;call every 1/20th sec
04069 0447 	;
04070 0447 	scan_io_1	
04071 0447 		if AnyANAUsed
04073 0447 		endif
04074 0447 	;
04075 0447 		if UsesLDO0
04076 0447 23FD 		CALL	OPT_WriteLDO_0
04077 0448 		endif
04078 0448 	;
04079 0448 		if UsesLDO1
04080 0448 2415 		CALL	OPT_WriteLDO_1
04081 0449 		endif
04082 0449 	;
04083 0449 		if UsesLDO2
04085 0449 		endif
04086 0449 	;
04087 0449 		if UsesLDO3
04089 0449 		endif
04090 0449 	;
04091 0449 	;
04092 0449 		if UsesLDI0
04093 0449 2429 		CALL	ReadLDI_0
04094 044A 		endif
04095 044A 	;
04096 044A 		if UsesLDI1
04098 044A 		endif
04099 044A 	;
04100 044A 		if UsesLDI2
04102 044A 		endif
04103 044A 	;
04104 044A 		if UsesLDI3
04106 044A 		endif
04107 044A 	;
04108 044A 	;=====================================================================================
04109 044A 	;Toggle the system LED
04110 044A 	; if tickcount-ledticks >= LEDTIME then toggle the LED and fall throug to OnTheHalfSecond
04111 044A 	; Entry:ledticks,tickcount
04112 044A 	; Exit:tickcount-ledticks
CastleGate.asm   "LowStuff.asm"                                          Page: 84
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

04113 044A 	; RAM used:ledticks, tickcount, Param78
04114 044A 	; Calls:(1+3) OnTheHalfSecond, lcd_GotoLineW,PrintString,Disp_decword,Disp_decbyteW
04115 044A 	;	
04116 044A 	;ToggleSysLED
04117 044A 		mBank0
04118 044C 	; Check for timeout using the tick counter
04119 044C 	; if tickcount-ledticks >= LEDTIME then ledticks=tickcount
04120 044C 300A 		MOVLW	LEDTIME	;10
04121 044D 00F8 		MOVWF	Param78
04122 044E 0822 		MOVF	ledticks,W	;22
04123 044F 0221 		SUBWF	tickcount,W	;W:=tickcount-W, W=55-22=33
04124 0450 0278 		SUBWF	Param78,W	;W:=LEDTIME-W, W=10-33=-23
04125 0451 1903 		BTFSC	STATUS,Z
04126 0452 2C55 		GOTO	ToggleSysLED_1
04127 0453 1803 		BTFSC	STATUS,C	;skip if borrow
04128 0454 0008 		RETURN
04129 0455 	;
04130 0455 	; below here are routines that run every 0.5 seconds
04131 0455 	;
04132 0455 0821 	ToggleSysLED_1	MOVF	tickcount,W
04133 0456 00A2 		MOVWF	ledticks
04134 0457 3010 		MOVLW	SystemLEDMask	; Toggle system LED 
04135 0458 0685 		XORWF	PORTA,F
04136 0459 	;
04137 0459 	; fall through to ShowAnXYZ
04138 0459 	;
04139 0459 		if ANATest
04184 0459 		endif		;ANATest
04185 0459 	;
04186 0459 	;==============================================================================
04187 0459 	; Goto the custom routines in Main.asm
04188 0459 	;
04189 0459 160A 		BSF	PCLATH,4
04190 045A 2903 		GOTO	OnTheHalfSecond
04191 045B 	;
04192 045B 	;=========================================================================================
04193 045B 	; Read ADC values. A new adc value is read each call
04194 045B 	;
04195 045B 	; CurADC bits:
04196 045B 	; 7 Channel is set
04197 045B 	; 6 Conversion is started
04198 045B 	; 5..3 ADC Channel number 0..7
04199 045B 	; 2..0 not used
04200 045B 	;
04201 045B 	; Entry: none
04202 045B 	; Exit: none
04203 045B 	; RAM used: Param78,Param79, adc0LSB..adc7MSB, FSR (verified 2/7/05)
04204 045B 	; Calls: (0+0) ReadADC
04205 045B 	;
04206 045B 	read_adcs
04207 045B 	;
04208 045B 		if AnyANAUsed
04278 045B 		endif
04279 045B 0008 		RETURN
04280 045C 	;
04281 045C 	;========================================================================================================
04282 045C 		if UsesI2C
04283 045C 	;===============================================================================================
04284 045C 	; Set the eeprom address
04285 045C 	;  Can address all 8 32K eerom chips.
04286 045C 	;
04287 045C 	; Entry:eeROMbuff.Addr
04288 045C 	; Exit:eeprom is ready for data to write
04289 045C 	;      Param78 has EEROM_ADDR (aka chip select)
04290 045C 	; RAM used: Param78, FSR (verified 2/26/03)
04291 045C 	; Calls:(1+0) i2c_start, i2c_writeW, i2c_stop
04292 045C 	;
04293 045C 1079 	AddressEEROMR	BCF	Param79,0	;Write flag Reading
04294 045D 2C5F 		GOTO	AddressEEROM_E2
04295 045E 1479 	AddressEEROM	BSF	Param79,0	;Write flag to Writing
04296 045F 24EB 	AddressEEROM_E2	CALL	i2c_start
04297 0460 1783 		BSF	STATUS,IRP
04298 0461 3025 		MOVLW	low eeROMbuff.Addr+1
04299 0462 0084 		MOVWF	FSR	; middle byte of address
04300 0463 	;
04301 0463 		if Using64KBEEPROM
04304 0463 		else
04305 0463 0D00 		RLF	INDF,W	; A15 >> C
04306 0464 0384 		DECF	FSR,F	; MSB of address
04307 0465 0D00 		RLF	INDF,W	; 2:1:0 A17:A16:A15
04308 0466 		endif
04309 0466 	;
04310 0466 00F8 		MOVWF	Param78
04311 0467 0D78 		RLF	Param78,W
04312 0468 	;
04313 0468 390E 		ANDLW	0x0E	; keep only address bits
04314 0469 38A0 		IORLW	EEROM_ADDR	; eerom 0 =0xA0
04315 046A 00F8 		MOVWF	Param78	; save the eerom command for later
04316 046B 				;  used by ReadEEROM
04317 046B 24F2 		CALL	i2c_writeW	; Command includes chip select
04318 046C 0A84 		INCF	FSR,F	; middle byte
04319 046D 0800 		MOVF	INDF,W
04320 046E 	;
04321 046E 		if Using64KBEEPROM
04322 046E 		else
04323 046E 397F 		ANDLW	0x7F	; A15 was included in the cmd
04324 046F 		endif
04325 046F 	;
04326 046F 24F2 		CALL	i2c_writeW	; hi byte
04327 0470 0A84 		INCF	FSR,F	; LSB of address
CastleGate.asm   "LowStuff.asm"                                          Page: 85
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

04328 0471 0800 		MOVF	INDF,W
04329 0472 24F2 		CALL	i2c_writeW	; lo byte
04330 0473 1879 		BTFSC	Param79,0	;Setup for writing?
04331 0474 0008 		RETURN		; Yes
04332 0475 	;
04333 0475 24E4 		CALL	i2c_stop	; stop this write
04334 0476 24EB 		CALL	i2c_start
04335 0477 0878 		MOVF	Param78,W
04336 0478 3801 		IORLW	0x01	; restart at the same address as read
04337 0479 24F2 		CALL	i2c_writeW
04338 047A 0008 		RETURN
04339 047B 	;
04340 047B 	;===============================================================================================
04341 047B 	; Read data (eeROMbuff.len 1..32 bytes) from eeproms (eeROMbuff.Addr) to eeROMbuff.Data
04342 047B 	; Entry:eeROMbuff.len, eeROMbuff.Addr
04343 047B 	; Exit:eeROMbuff.Data
04344 047B 	; RAM used: Param78, Param79, FSR (verified 2/26/03)
04345 047B 	; Calls:(1+1) AddressEEROMR, i2c_start, i2c_writeW, i2c_stop, i2c_read1, close_file
04346 047B 	;
04347 047B 245C 	ReadEEROM	CALL	AddressEEROMR
04348 047C 	;
04349 047C 3023 		MOVLW	low eeROMbuff.len
04350 047D 0084 		MOVWF	FSR
04351 047E 	;	BSF	STATUS,IRP	;done by AddressEEROM
04352 047E 0800 		MOVF	INDF,W
04353 047F 00F9 		MOVWF	Param79	;store len for easy access
04354 0480 3027 		MOVLW	low eeROMbuff.Data
04355 0481 0084 		MOVWF	FSR
04356 0482 24FD 	ReadEEROM_L1	CALL	i2c_read1
04357 0483 2153 		CALL	DOP_Ram
04358 0484 0BF9 		DECFSZ	Param79,F
04359 0485 2C82 		GOTO	ReadEEROM_L1
04360 0486 2CE2 		GOTO	close_file
04361 0487 	;
04362 0487 		endif		;UsesI2C
04363 0487 	;
04364 0487 		if UsesDataLogging
04468 0487 		endif		;UsesDataLogging
04469 0487 	;
04470 0487 		if UsesI2C
04471 0487 	;===============================================================================================
04472 0487 	; Write eeROMbuff.Data (eeROMbuff.len 1..32 bytes) to the eeproms (eeROMbuff.Addr)
04473 0487 	;  After calling WriteEEROM allow 5ms for write operation to complete before calling any i2c routines.
04474 0487 	;
04475 0487 	; Entry:eeROMbuff.len, eeROMbuff.Addr, eeROMbuff.Data
04476 0487 	; Exit:none
04477 0487 	; RAM used: Param78, FSR (verified 2/26/03)
04478 0487 	; Calls:(1+1) AddressEEROM, i2c_start, i2c_writeW, i2c_stop
04479 0487 	;
04480 0487 245E 	WriteEEROM	CALL	AddressEEROM
04481 0488 3023 		MOVLW	low eeROMbuff.len
04482 0489 0084 		MOVWF	FSR
04483 048A 	;	BSF	STATUS,IRP	;done by AddressEEROM
04484 048A 0800 		MOVF	INDF,W
04485 048B 00F8 		MOVWF	Param78	;store len for easy access
04486 048C 3027 		MOVLW	low eeROMbuff.Data
04487 048D 0084 		MOVWF	FSR
04488 048E 0800 	WriteEEROM_L1	MOVF	INDF,W
04489 048F 24F2 		CALL	i2c_writeW
04490 0490 0A84 		INCF	FSR,F
04491 0491 0BF8 		DECFSZ	Param78,F
04492 0492 2C8E 		GOTO	WriteEEROM_L1
04493 0493 2CE4 		GOTO	i2c_stop
04494 0494 	;
04495 0494 		endif
04496 0494 	;
04497 0494 		if EnableEEROMCopy
04534 0494 		endif
04535 0494 	;
04536 0494 		if UsesDataROM
04537 0494 	;===============================================================================================
04538 0494 	; DataROM  Copy d.d file to SRAM
04539 0494 	;
04540 0494 	; Entry: None
04541 0494 	; Exit: d.d >> SRAM starting at evDataROM*256
04542 0494 	; RAM used:
04543 0494 	;
04544 0494 2514 	SetupDataROM	CALL	ZeroFName
04545 0495 	;
04546 0495 		mBank3
04547 0497 3000 		MOVLW	high evDataROM
04548 0498 009F 		MOVWF	SRAM_Addr2
04549 0499 3010 		MOVLW	low evDataROM
04550 049A 009E 		MOVWF	SRAM_Addr1
04551 049B 019D 		CLRF	SRAM_Addr0
04552 049C 	;
04553 049C 3064 		MOVLW	'd'
04554 049D 	;
04555 049D 2CA7 		GOTO	SS_1
04556 049E 	;
04557 049E 		endif
04558 049E 	;
04559 049E 		if SRAM_Strings
04560 049E 	;===============================================================================================
04561 049E 	; Strings  Copy the s.s file to SRAM
04562 049E 	; Entry:None
04563 049E 	; Exit: s.s >> SRAM starting at evStrings*256
04564 049E 	; RAM used:
04565 049E 	; Calls: (1+2) find_file,open_file,SS_file_byte,SRAM_Write,SRAM_NextAddr,sfb_ReadNextB,i2c_read1
04566 049E 	;
CastleGate.asm   "LowStuff.asm"                                          Page: 86
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

04567 049E 2514 	SetupStrings	CALL	ZeroFName
04568 049F 	;
04569 049F 		mBank3
04570 04A1 3000 		MOVLW	high evStrings
04571 04A2 009F 		MOVWF	SRAM_Addr2	;0x01
04572 04A3 30F2 		MOVLW	low evStrings
04573 04A4 009E 		MOVWF	SRAM_Addr1	;0x02
04574 04A5 019D 		CLRF	SRAM_Addr0
04575 04A6 	;
04576 04A6 3073 		MOVLW	's'	;Set filename = "s.s"
04577 04A7 2153 	SS_1	CALL	DOP_Ram
04578 04A8 0A84 		INCF	FSR,F
04579 04A9 0080 		MOVWF	INDF
04580 04AA 0384 		DECF	FSR,F
04581 04AB 302E 		MOVLW	'.'
04582 04AC 0080 		MOVWF	INDF
04583 04AD 	;
04584 04AD 		mBank3
04585 04AF 	;
04586 04AF 2520 		CALL	find_file
04587 04B0 1C78 		BTFSS	Param78,0
04588 04B1 2CB9 		GOTO	SS_NotFound	;file not found
04589 04B2 24D5 		CALL	open_file
04590 04B3 	;
04591 04B3 24C3 	SS_L2	CALL	SS_file_byte
04592 04B4 		mBank2
04593 04B6 1F96 		BTFSS	End_Of_File
04594 04B7 2CB3 		GOTO	SS_L2
04595 04B8 	;	
04596 04B8 2CE2 		GOTO	close_file
04597 04B9 	;
04598 04B9 01F9 	SS_NotFound	CLRF	Param79	;fill with zeros
04599 04BA 0103 	SS_L3	CLRW
04600 04BB 2236 		CALL	SRAM_WritePI
04601 04BC 0103 		CLRW
04602 04BD 2236 		CALL	SRAM_WritePI
04603 04BE 0103 		CLRW
04604 04BF 2236 		CALL	SRAM_WritePI
04605 04C0 0BF9 		DECFSZ	Param79,F
04606 04C1 2CBA 		GOTO	SS_L3
04607 04C2 0008 		RETURN
04608 04C3 	;
04609 04C3 	;=======================================
04610 04C3 	; Calls: (1+1) sfb_ReadNextB,SRAM_Write,SRAM_NextAddr
04611 04C3 	;
04612 04C3 24C8 	SS_file_byte	CALL	sfb_ReadNextB
04613 04C4 1B96 		BTFSC	End_Of_File	;we're done with this file?
04614 04C5 0008 		RETURN		;yes
04615 04C6 0878 		MOVF	Param78,W
04616 04C7 2A36 		GOTO	SRAM_WritePI
04617 04C8 	;
04618 04C8 	;=======================================
04619 04C8 	; CAUTION  Returns with Bank 2 selected
04620 04C8 	;
04621 04C8 	; Calls: (1+0) i2c_read1
04622 04C8 	;
04623 04C8 24FD 	sfb_ReadNextB	CALL	i2c_read1	;next file byte >> Param78
04624 04C9 1703 		BSF	STATUS,RP1	; Bank 2
04625 04CA 0810 		MOVF	romdir.f.len,W
04626 04CB 0411 		IORWF	romdir.f.len+1,W
04627 04CC 1D03 		BTFSS	STATUS,Z
04628 04CD 2CD0 		GOTO	sfb_ReadNextB_1
04629 04CE 1796 		BSF	End_Of_File	;read past end return 0
04630 04CF 0008 		RETURN
04631 04D0 0810 	sfb_ReadNextB_1	MOVF	romdir.f.len,W	; romdir.f.len--; Decrement length
04632 04D1 1903 		BTFSC	STATUS,Z
04633 04D2 0391 		DECF	romdir.f.len+1,F
04634 04D3 0390 		DECF	romdir.f.len,F
04635 04D4 0008 		RETURN
04636 04D5 	;
04637 04D5 		endif		;SRAM_Strings
04638 04D5 	;
04639 04D5 		if UsesI2C
04640 04D5 	;===============================================================================================
04641 04D5 	; Open the previously-found file for transmission
04642 04D5 	; sends start bit, slave address (aka chip # 0..7)
04643 04D5 	;
04644 04D5 	; RAM used: romdir.f.start (verified 2/26/03)
04645 04D5 	; Calls:(1+0) i2c_start, i2c_writeW, i2c_stop
04646 04D5 	;
04647 04D5 	; Note: the files must be in EEROM 0
04648 04D5 	;
04649 04D5 24EB 	open_file	CALL	i2c_start
04650 04D6 30A0 		MOVLW	EEROM_ADDR	; i2c_write(EEROM_ADDR) Write start pointer to eerom 
04651 04D7 24F2 		CALL	i2c_writeW
04652 04D8 1703 		BSF	STATUS,RP1	; i2c_write(high romdir.f.start); hi byte
04653 04D9 0813 		MOVF	romdir.f.start+1,W
04654 04DA 24F2 		CALL	i2c_writeW
04655 04DB 1703 		BSF	STATUS,RP1	; i2c_write(low romdir.f.start); low byte
04656 04DC 0812 		MOVF	romdir.f.start,W
04657 04DD 24F2 		CALL	i2c_writeW
04658 04DE 24E4 		CALL	i2c_stop
04659 04DF 24EB 		CALL	i2c_start
04660 04E0 30A1 		MOVLW	EEROM_ADDR|1	; i2c_write(EEROM_ADDR | 1) Restart ROM access as read cycle 
04661 04E1 2CF2 		GOTO	i2c_writeW
04662 04E2 	;
04663 04E2 	;=======================================================================
04664 04E2 	; Close the previously-opened file (aka stop read operation)
04665 04E2 	; Dummy read cycle w/ NAK instead of ACK
04666 04E2 	;
CastleGate.asm   "LowStuff.asm"                                          Page: 87
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

04667 04E2 	; RAM used: Param78 (verified 2/26/03)
04668 04E2 	; Calls:(1+0) i2c_read, i2c_stop
04669 04E2 	;
04670 04E2 01F8 	close_file	CLRF	Param78
04671 04E3 24FE 		CALL	i2c_read
04672 04E4 	;
04673 04E4 	; fall through to i2c_stop
04674 04E4 	;
04675 04E4 	;=====================================================================================================
04676 04E4 	; Ends a iic operation
04677 04E4 	; use I2C(MASTER, SDA=PIN_C4, SCL=PIN_C3, RESTART_WDT, FAST) 
04678 04E4 	; Entry: none
04679 04E4 	; Exit: none
04680 04E4 	; RAM used: none (verified 2/26/03)
04681 04E4 	; Calls:(0) none
04682 04E4 	i2c_stop	mBank1
04683 04E6 1511 		BSF	SSPCON2,PEN	; send stop bit
04684 04E7 1911 		BTFSC	SSPCON2,PEN	; has stop bit been sent?
04685 04E8 2CE7 		GOTO	$-1	; no, loop back to test
04686 04E9 1283 		BCF	_RP0	; Bank 0
04687 04EA 0008 		RETURN
04688 04EB 	;
04689 04EB 	;=================================================================================================
04690 04EB 	; Start an iic operation
04691 04EB 	; RAM used: none (verified 2/26/03)
04692 04EB 	; Calls: (0) none
04693 04EB 	;
04694 04EB 	i2c_start	mBank1
04695 04ED 1411 		BSF	SSPCON2,SEN	; send start bit
04696 04EE 1811 		BTFSC	SSPCON2,SEN	; has SEN cleared yet
04697 04EF 2CEE 		GOTO	$-1	; no, loop back to test
04698 04F0 1283 		BCF	_RP0	; Bank 0
04699 04F1 0008 		RETURN
04700 04F2 	;
04701 04F2 	;================================================================================================
04702 04F2 	; writes a byte to the serial EEPROM, hangs if no ACK
04703 04F2 	; entry: W byte to send
04704 04F2 	; exit: none
04705 04F2 	; RAM used: none (verified 2/26/03)
04706 04F2 	; Calls:(0) none
04707 04F2 	;
04708 04F2 	i2c_writeW	mBank0
04709 04F4 118C 		BCF	PIR1,SSPIF	; clear interrupt flag
04710 04F5 0093 		MOVWF	SSPBUF	; move data to SSPBUF
04711 04F6 1D8C 		BTFSS	PIR1,SSPIF	; has SSP completed sending?
04712 04F7 2CF6 		GOTO	$-1	; no, loop back to test
04713 04F8 1683 		BSF	STATUS,RP0
04714 04F9 1B11 		BTFSC	SSPCON2,ACKSTAT	; has slave sent ACK?
04715 04FA 2CF9 		GOTO	$-1	; no, try again
04716 04FB 1283 		BCF	_RP0	; Bank 0
04717 04FC 0008 		RETURN
04718 04FD 	;
04719 04FD 	;=========================================================================================
04720 04FD 	; Read next byte
04721 04FD 	; RAM used: Param78 (verified 2/26/03)
04722 04FD 	; Calls:(0) i2c_read
04723 04FD 	;
04724 04FD 1478 	i2c_read1	BSF	Param78,0
04725 04FE 	;
04726 04FE 	; fall through to i2c_read
04727 04FE 	;
04728 04FE 	;=========================================================================================
04729 04FE 	; Read from external serial eeprom(s)
04730 04FE 	; Entry: Param78 = 1 Read next byte send ACK, 0 = Dummy Read w/NAK
04731 04FE 	; Exit: Param78 and W = Return Value
04732 04FE 	; RAM used: Param78 (verified 2/26/03)
04733 04FE 	; Calls:(0) none
04734 04FE 	;
04735 04FE 	i2c_read	mBank0
04736 0500 118C 		BCF	PIR1,SSPIF	; clear interrupt flag
04737 0501 1683 		BSF	STATUS,RP0
04738 0502 1591 		BSF	SSPCON2,RCEN	; enable receive mode
04739 0503 1283 		BCF	STATUS,RP0
04740 0504 1D8C 		BTFSS	PIR1,SSPIF	; has SSP received a data byte?
04741 0505 2D04 		GOTO	$-1	; no, loop back to test
04742 0506 1683 		BSF	STATUS,RP0
04743 0507 1691 		BSF	SSPCON2,ACKDT	; NAK
04744 0508 1878 		BTFSC	Param78,0
04745 0509 1291 		BCF	SSPCON2,ACKDT	; ACK
04746 050A 1611 		BSF	SSPCON2,ACKEN	; send ACKDT bit
04747 050B 	;
04748 050B 1A11 		BTFSC	SSPCON2,ACKEN	; has ACKDT bit been sent yet?
04749 050C 2D0B 		GOTO	$-1	; no, loop back to test
04750 050D 1283 		BCF	STATUS,RP0
04751 050E 	;
04752 050E 0813 		MOVF	SSPBUF,W	; save data to RAM
04753 050F 00F8 		MOVWF	Param78
04754 0510 1683 		BSF	STATUS,RP0
04755 0511 1191 		BCF	SSPCON2,RCEN	; disable receive mode
04756 0512 1283 		BCF	STATUS,RP0
04757 0513 0008 		RETURN
04758 0514 		endif		;UsesI2C
04759 0514 	;
04760 0514 		if UsesEEROMFiles
04761 0514 	;=======================================
04762 0514 	;
04763 0514 300C 	ZeroFName	MOVLW	ROM_FNAMELEN	;zero filename
04764 0515 00F8 		MOVWF	Param78
04765 0516 3017 		MOVLW	low romdir.f.name
04766 0517 0084 		MOVWF	FSR
CastleGate.asm   "LowStuff.asm"                                          Page: 88
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

04767 0518 1783 		BSF	STATUS,IRP
04768 0519 0180 	ZeroFName_L1	CLRF	INDF	;117..117+B
04769 051A 0A84 		INCF	FSR,F
04770 051B 0BF8 		DECFSZ	Param78,F
04771 051C 2D19 		GOTO	ZeroFName_L1
04772 051D 3017 		MOVLW	low romdir.f.name
04773 051E 0084 		MOVWF	FSR
04774 051F 0008 		RETURN
04775 0520 	;
04776 0520 	;=================================================================================================
04777 0520 	; Definitions for filesystem
04778 0520 	; 
04779 0520 	; The filesystem is in 1 or 2 ROMs (32k bytes each). At the start of the first ROM is a 
04780 0520 	; directory of 1 or more filename blocks, each of which have pointers to 
04781 0520 	; data blocks. The end of the directory is marked by a dummy length of FFFFh 
04782 0520 	; 
04783 0520 	; All the HTTP files include the appropriate HTTP headers. 
04784 0520 	; 
04785 0520 	; There may be 2 special files in the file list:
04786 0520 	;  "s.s" is the strings file for SRAM based strings.
04787 0520 	;  "d.d" is the SRAM data image
04788 0520 	; 
04789 0520 	; Filename block structure
04790 0520 	; WORD len;	Length of file in bytes
04791 0520 	; WORD start;	Start address of file data in ROM
04792 0520 	; WORD check;	TCP checksum of file
04793 0520 	; BYTE flags;	Embedded Gateway Interface (EGI) flags
04794 0520 	; char name[ROM_FNAMELEN]; Lower-case filename with extension
04795 0520 	; 	
04796 0520 	;
04797 0520 	;===============================================================================================
04798 0520 	;===============================================================================================
04799 0520 	; Find a filename in ROM filesystem. Return false if not found 
04800 0520 	; ** Sets fileidx(Param72) to 0 if ROM error, 1 if file is first in ROM, 2 if 2nd.. 
04801 0520 	; ** and leaves directory info in 'romdir' 
04802 0520 	; ** If the first byte of name is zero, match first directory entry
04803 0520 	;
04804 0520 	; Entry: romdir.f.name
04805 0520 	; Exit: Param78:0 1=found
04806 0520 	; RAM used: Param77, Param78, Param79, Param7A, romdir(19 bytes) (verified 2/26/03)
04807 0520 	; Calls:(1+0) i2c_start, i2c_writeW, i2c_stop, i2c_read, i2c_read1
04808 0520 	;
04809 0520 	; BOOL mismatch=1, end=0;   Param79:0, Param79:1
04810 0520 	; int i; Param7A
04811 0520 	; BYTE b; Param7B
04812 0520 	;
04813 0520 1479 	find_file	BSF	Param79,0	; mismatch=1
04814 0521 10F9 		BCF	Param79,1	; end=0
04815 0522 01F7 		CLRF	Param77	; fileidx = 0; Set ROM address pointer to 0 
04816 0523 24EB 		CALL	i2c_start
04817 0524 30A0 		MOVLW	EEROM_ADDR
04818 0525 24F2 		CALL	i2c_writeW	; i2c_write(EEROM_ADDR); 
04819 0526 0103 		CLRW
04820 0527 24F2 		CALL	i2c_writeW	; i2c_write(0) Address=0x0000
04821 0528 0103 		CLRW	
04822 0529 24F2 		CALL	i2c_writeW	; i2c_write(0)
04823 052A 24E4 		CALL	i2c_stop
04824 052B 24EB 		CALL	i2c_start	;Read next directory entry
04825 052C 30A1 		MOVLW	EEROM_ADDR|1	; i2c_write(EEROM_ADDR | 1);
04826 052D 24F2 		CALL	i2c_writeW	; continue read at current address
04827 052E 	;  
04828 052E 	; Get file len, ptr, csum and flags     romdir.f.len..romdir.f.flags  7 bytes
04829 052E 	; for i=7 downto 1
04830 052E 3007 	find_file_L1	MOVLW	0x07
04831 052F 00FA 		MOVWF	Param7A
04832 0530 3010 		MOVLW	low romdir.f.len	; romdir.b[i] = i2c_read(1); 
04833 0531 0084 		MOVWF	FSR
04834 0532 1783 		BSF	STATUS,IRP
04835 0533 	;
04836 0533 24FD 	find_file_L2	CALL	i2c_read1
04837 0534 2153 		CALL	DOP_Ram	;110+Param7A
04838 0535 0BFA 		DECFSZ	Param7A,F
04839 0536 2D33 		GOTO	find_file_L2
04840 0537 	;
04841 0537 1703 		BSF	STATUS,RP1
04842 0538 0A11 		INCF	romdir.f.len+1,W	;if high byte = FF that's the end
04843 0539 1D03 		BTFSS	STATUS,Z
04844 053A 2D3D 		GOTO	find_file_1
04845 053B 14F9 		BSF	Param79,1	; end = 1
04846 053C 2D4B 		GOTO	find_file_4	; Abandon if no entry 
04847 053D 	;
04848 053D 1079 	find_file_1	BCF	Param79,0	; mismatch = 0;  Try matching name 
04849 053E 	; for i=ROM_FNAMELEN downto 0
04850 053E 300C 		MOVLW	ROM_FNAMELEN
04851 053F 00FA 		MOVWF	Param7A
04852 0540 24FD 	find_file_L3	CALL	i2c_read1
04853 0541 0200 		SUBWF	INDF,W
04854 0542 1D03 		BTFSS	STATUS,Z
04855 0543 1479 		BSF	Param79,0	; mismatch = 1;
04856 0544 0A84 		INCF	FSR,F
04857 0545 0BFA 		DECFSZ	Param7A,F
04858 0546 2D40 		GOTO	find_file_L3	; test all 12 bytes
04859 0547 	; if (!romdir.f.name[0])   If null name, match anything 
04860 0547 1703 		BSF	STATUS,RP1
04861 0548 0897 		MOVF	romdir.f.name,F
04862 0549 1903 		BTFSC	STATUS,Z
04863 054A 1079 		BCF	Param79,0	; mismatch = 0; 
04864 054B 	; 
04865 054B 	; Loop until matched 	
04866 054B 	; while (!end && fileidx++<>MAXFILES && mismatch); 
CastleGate.asm   "LowStuff.asm"                                          Page: 89
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

04867 054B 18F9 	find_file_4	BTFSC	Param79,1	; skip if not end
04868 054C 2D54 		GOTO	find_file_5	; end of dir
04869 054D 0877 		MOVF	Param77,W	;fileidx
04870 054E 0AF7 		INCF	Param77,F
04871 054F 3C64 		SUBLW	MAXFILES	; MAXFILES-fileidx
04872 0550 1903 		BTFSC	STATUS,Z
04873 0551 2D54 		GOTO	find_file_5	; no more files
04874 0552 1879 		BTFSC	Param79,0	; skip if not mismatch
04875 0553 2D2E 		GOTO	find_file_L1	; mismatch
04876 0554 	; if (mismatch) 
04877 0554 1C79 	find_file_5	BTFSS	Param79,0	; skip if mismatch
04878 0555 2D5A 		GOTO	find_file_End	; not mismatch
04879 0556 	; romdir.f.len = 0; 
04880 0556 1703 		BSF	STATUS,RP1
04881 0557 0190 		CLRF	romdir.f.len
04882 0558 0191 		CLRF	romdir.f.len+1
04883 0559 1303 		BCF	STATUS,RP1
04884 055A 	; return(!mismatch); 
04885 055A 24E2 	find_file_End	CALL	close_file	; i2c_read(0); NAK
04886 055B 01F8 		CLRF	Param78
04887 055C 1C79 		BTFSS	Param79,0	; skip if mismatch
04888 055D 1478 		BSF	Param78,0	; return found=true
04889 055E 3400 		RETLW	00
04890 055F 	;
04891 055F 		endif
04892 055F 	;
04893 055F 		if RS232Config
04956 055F 		endif
04957 055F 	; fall through to xmodem_recv
04958 055F 	;
04959 055F 		if xmodemEEROM
05129 055F 		endif
05130 055F 	;
05131 055F 		if UsesRS232BufIO
05240 055F 		endif
05241 055F 	;
05242 055F 	;
05243 055F 		if UsesRS232BufIO
05323 055F 		endif
05324 055F 	;
05325 055F 		if RS232Active
05347 055F 		endif
05348 055F 	;
05349 055F 		if RS232Config
05474 055F 		endif
05475 055F 	;
05476 055F 		if Do_eeROM_Test
05516 055F 		endif
05517 055F 	;
05518 055F 		if UsesNIC & UsesLCD
05519 055F 	;=====================================
05520 055F 	; Display IP address on 2nd line
05521 055F 	;
05522 055F 	; Entry: none
05523 055F 	; Exit: none
05524 055F 	; RAM used: Param71:0, Param77,Param78, Param79, Param7A, Param7B
05525 055F 	; Calls:(1+3) lcd_GotoLineW, Disp_decbyteW, Display_Dot
05526 055F 	;
05527 055F 3001 	DispIP	MOVLW	DispIPLine
05528 0560 232F 		CALL	lcd_GotoLineW
05529 0561 	;
05530 0561 	;  Bank0 must be selected before calling this entry point
05531 0561 13A5 	DispIP_E2	BCF	DispLSpaces
05532 0562 0830 		MOVF	myip_b3,W	; MSB
05533 0563 20BC 		CALL	Disp_decbyteW
05534 0564 2386 		CALL	Display_Dot
05535 0565 0831 		MOVF	myip_b2,W
05536 0566 20BC 		CALL	Disp_decbyteW
05537 0567 2386 		CALL	Display_Dot
05538 0568 0832 		MOVF	myip_b1,W 
05539 0569 20BC 		CALL	Disp_decbyteW
05540 056A 2386 		CALL	Display_Dot
05541 056B 0833 		MOVF	myip_b0,W	; LSB
05542 056C 28BC 		GOTO	Disp_decbyteW
05543 056D 	;
05544 056D 		if UsesDispMAC
05545 056D 	;=====================================
05546 056D 	; Display MAC address on 2nd line
05547 056D 	;
05548 056D 	; Entry: none
05549 056D 	; Exit: none
05550 056D 	; RAM used: Param71:0, Param76, Param77,Param78, Param79, Param7A, Param7B
05551 056D 	; Calls:(1+3) lcd_GotoLineW, Disp_Hex_Byte, Display_Colon
05552 056D 	;
05553 056D 3001 	DispMAC	MOVLW	0x01
05554 056E 232F 		CALL	lcd_GotoLineW
05555 056F 	;
05556 056F 	;  Bank0 must be selected before calling this entry point
05557 056F 082A 	DispMAC_E2	MOVF	myeth0,W	; MSB
05558 0570 2376 		CALL	Disp_Hex_Byte
05559 0571 2384 		CALL	Display_Colon
05560 0572 082B 		MOVF	myeth1,W
05561 0573 2376 		CALL	Disp_Hex_Byte
05562 0574 2384 		CALL	Display_Colon
05563 0575 082C 		MOVF	myeth2,W 
05564 0576 2376 		CALL	Disp_Hex_Byte
05565 0577 2384 		CALL	Display_Colon
05566 0578 082D 		MOVF	myeth3,W	; LSB
05567 0579 2376 		CALL	Disp_Hex_Byte
05568 057A 2384 		CALL	Display_Colon
CastleGate.asm   "LowStuff.asm"                                          Page: 90
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

05569 057B 082E 		MOVF	myeth4,W	; LSB
05570 057C 2376 		CALL	Disp_Hex_Byte
05571 057D 2384 		CALL	Display_Colon
05572 057E 082F 		MOVF	myeth5,W	; LSB
05573 057F 2B76 		GOTO	Disp_Hex_Byte
05574 0580 	;
05575 0580 		endif
05576 0580 		endif
05577 0580 	; 
05578 0580 	;================================================================================================
05579 0580 	; end of segment 0  (0000-07FF)
05580 0580 	;================================================================================================
05581 0580 	;
05582 0580 	;
05583 0580 	 
05584 0580 	 
05585 0580 	 
05586 0580 	 
05587 0580 	 
05588 0580 	 
05589 0580 	 
05590 0580 	 
05591 0580 	 
05592 0580 	 
00983 0580 		include	DataAccessSeg0.asm
00001 0580 		subtitle	"DataAccess.asm"

00002 0580 		page
00003 0580 	;============================================================================================
00004 0580 	;
00005 0580 	;  FileName: DataAccess.asm
00006 0580 	;  Date: 2/11/2012
00007 0580 	;  File Version: 1.2.2
00008 0580 	;  
00009 0580 	;  Author: David M. Flynn
00010 0580 	;  Company: HPRR
00011 0580 	;  Project: TCC
00012 0580 	;
00013 0580 	;============================================================================================
00014 0580 	;============================================================================================
00015 0580 	; Revision History
00016 0580 	;
00017 0580 	; 1.2.2 2/11/2012	Added SMLocMask, Do not overwrite SM data if set. CopyUDPSMTable,CopyUDPSMTableHigh
00018 0580 	;	DoXPageMove was changed to DoSMPageMove
00019 0580 	; 1.2.1 4/29/2009	Added Comments.
00020 0580 	; 1.2   6/29/2005	Added SyncBlkPwr.
00021 0580 	; 1.1   5/1/2005	Removed Panel Specific routines,
00022 0580 	;	Added GetBlockCmdTable2X,SetBlockCmdTable2X,GetBlockPwrTable2X,SetBlockPwrTable2X
00023 0580 	; 1.0   9/6/2004	First Reved version.
00024 0580 	;
00025 0580 	;============================================================================================
00026 0580 	; Conditional Assmbly
00027 0580 		ifndef UsesSyncBP
00029 0580 		endif
00030 0580 	;
00031 0580 	;============================================================================================
00032 0580 	; Notes:
00033 0580 	;
00034 0580 	;Caution most routines called within this include file
00035 0580 	;  leave Bank3 selected.
00036 0580 	;
00037 0580 	;Main.asm should call SetupDMFEIO once then
00038 0580 	; call DoDMFEIO each pass through the main loop
00039 0580 	;
00040 0580 	;6502 Registers
00041 0580 0072 	XReg	EQU	Param72
00042 0580 0073 	YReg	EQU	Param73
00043 0580 	;
00044 0580 	;in SMTable each Byte represents one Switch Machine
00045 0580 	; bit0 = Valid bit set by sending cpu to say "Use this data."
00046 0580 	; bit1 = Private Valid (Ownership) bit set when Valid and Command bits are set.
00047 0580 	; bit2 = 
00048 0580 	; bit3 = 
00049 0580 	; bit4 = 
00050 0580 	; bit5 = Feed Back
00051 0580 	; bit6 = Command if 1 then bit 7 will also be 1
00052 0580 	; bit7 = Control
00053 0580 	;
00054 0580 	;in BlockPwrTable each byte represents one block
00055 0580 	; bit0 = Cab5
00056 0580 	; bit1 = Cab4
00057 0580 	; bit2 = Cab3
00058 0580 	; bit3 = Cab2
00059 0580 	; bit4 = Cab1
00060 0580 	; bit5 = Detect West
00061 0580 	; bit6 = Detect East
00062 0580 	; bit7 = Set if any cab is powerd
00063 0580 	;  if bit 7 is set but bits 0..4 are cleared then look at BlockPwrTable2
00064 0580 	;  for additional cab bits
00065 0580 	;
00066 0580 	;in BlockPwrTable2 each byte represents one block
00067 0580 	; bit0 = Cab9
00068 0580 	; bit1 = Cab8
00069 0580 	; bit2 = Cab7
00070 0580 	; bit3 = Cab6
00071 0580 	; bit4 = not used
00072 0580 	; bit5 = not used
00073 0580 	; bit6 = not used
00074 0580 	; bit7 = not used
00075 0580 	;
CastleGate.asm   "DataAccess.asm"                                        Page: 91
/HPRR Electrical Dept/HPRR.ASM/MasterFiles/

00076 0580 007F 	SMControlMask	EQU	0x7F
00077 0580 00DF 	SMFBMask	EQU	0xDF
00078 0580 00A0 	SMCnFMask	EQU	0xA0	;Control and Feedback bits
00079 0580 0040 	SMCMDMask	EQU	0x40	;Command Bit
00080 0580 0001 	SMVDMask	EQU	0x01	;Valid Data bit for TX
00081 0580 0001 	SMLocBit	EQU	0x01	;Data is local flag
00082 0580 00BF 	SMCMDInvMask	EQU	0xBF
00083 0580 00C0 	SMCTRLnCMDMask	EQU	0xC0
00084 0580 004C 	BlockCount	EQU	kMaxBlockNum+1	;Last block number+1
00085 0580 	;=========================================================================================
00086 0580 	; Name	(additional stack words required) Description
00087 0580 	;=========================================================================================
00088 0580 	;GetBlkOwnerX	(1+1) Get the block owner flags byte from data ram
00089 0580 	;GetCabNumX	(1+2) Get the cab number powering this block 0..9
00090 0580 	;GetSMTableHighX	(1+1) Get SM data from SMTableHigh,X
00091 0580 	;GetGet_1X	(1+1) Read SRAM at W*256+XReg return in W and Param78
00092 0580 	;GetGet_Read	(1+1) Read SRAM at 0x00:SRAM_Addr1:SRAM_Addr0 return in W and Param78
00093 0580 	;SetSMTableHighX	(1+1) Store the W at SMTableHigh,X
00094 0580 	;GetCurBlkY	(1+1) Get data from SRAM (CurBlk),Y
00095 0580 	;GetSMDispPtrY	(1+1) Get data from SRAM (SMDispPtr),Y
00096 0580 	;GetBlockCmdTableX	(1+1) Get the Block Power Command data at BlockCmdTable,X
00097 0580 	;SetBlockCmdTableX	(1+1) Store the W in Block Power Command data at BlockCmdTable,X
00098 0580 	;GetBlockCmdTable2X	(1+1) Get the Block Power Command data at BlockCmdTable2,X
00099 0580 	;SetBlockCmdTable2X	(1+1) Store the W in Block Power Command data at BlockCmdTable2,X
00100 0580 	;GetBlockPwrTableX	(1+1) Get the Block Power data at BlockPwrTable,X
00101 0580 	;SetBlockPwrTableX	(1+1) Store the W in Block Power data at BlockPwrTable,X
00102 0580 	;SetSet_1X	(1+1) Store Param78 in SRAM at W*256+XReg
00103 0580 	;GetBlockPwrTable2X	(1+1) Get the Block Power data at BlockPwrTable2,X
00104 0580 	;SetBlockPwrTable2X	(1+1) Store the W in Block Power data at BlockPwrTable2,X
00105 0580 	;GetSMTableX	(1+1) Get SM data from SMTable,X
00106 0580 	;SetSMTableX	(1+1) Store the W at SMTable,X
00107 0580 	;SyncBlkPwr	(1+2) If Block Cmd = 0 and Block Pwr = 0 then clear valid bit
00108 0580 	;SyncSMs	(1+2) kill Valid bits if Cmd = Ctrl
00109 0580 	;CopyUDPBlockPwrTable	(1+2) Copy the block pwr Data from evUDP_BlockPwrTable(0x0204) to BlockPwrTable(0x0004)
00110 0580 	;CopyUDPBlockPwrTable2	(1+2) Copy the block pwr Data from evUDP_BlockPwrTable2(0x0206) to BlockPwrTable(0x0006)
00111 0580 	;CopyUDPSMTable	(1+1) Copy the low SM Data from evUDP_SMTable(0x0202) to SMTable(0x0002)
00112 0580 	;CopyUDPSMTableHigh	(1+1) Copy the high SM Data from evUDP_SMTableHigh(0x0203) to SMTableHigh(0x0003)
00113 0580 	;=========================================================================================
00114 0580 	; Get the block owner flags byte from data ram
00115 0580 	; Param78=(BlockOwner,X)
00116 0580 	;
00117 0580 	; Entry: XReg
00118 0580 	; Exit: W & Param78
00119 0580 	; RAM used: Param78, XReg
00120 0580 	; Calls: GetGet_Read
00121 0580 	;
00122 0580 3000 	GetBlkOwnerX	MOVLW	high BlockOwner
00123 0581 3E10 		ADDLW	low evDataROM
00124 0582 009E 		MOVWF	SRAM_Addr1
00125 0583 30CC 		MOVLW	low BlockOwner
00126 0584 0772 		ADDWF	XReg,W
00127 0585 009D 		MOVWF	SRAM_Addr0
00128 0586 		ADDCF	SRAM_Addr1,F
00129 0588 2DC1 		GOTO	GetGet_Read
00130 0589 	;
00131 0589 		if UsesGetCabNumX
00132 0589 	;=========================================================================================
00133 0589 	; Get the cab number powering this block
00134 0589 	;
00135 0589 	; Entry: XReg=BlkNum, bank3
00136 0589 	; Exit: Param78 & W = Cab# 0..9, Bank3
00137 0589 	; RAM Used: XReg, Param78, Param79
00138 0589 	; Calls: (1+2) GetBlockPwrTableX,GetBlockPwrTable2X
00139 0589 	;
00140 0589 25E4 	GetCabNumX	CALL	GetBlockPwrTableX
00141 058A 1FF8 		BTFSS	Param78,7	;Anycab
00142 058B 2D97 		GOTO	GetCabNumX_NoCab	; No
00143 058C 	;
00144 058C 00F9 		MOVWF	Param79
00145 058D 391F 		ANDLW	0x1F	;1..5?
00146 058E 		SKPNZ
00147 058F 2D9A 		GOTO	GetCabNumX_1
00148 0590 	;
00149 0590 3005 		MOVLW	0x05
00150 0591 00F8 		MOVWF	Param78
00151 0592 1879 	GetCabNumX_L1	BTFSC	Param79,0
00152 0593 2DA3 		GOTO	GetCabNumX_Found
00153 0594 0CF9 		RRF	Param79,F
00154 0595 0BF8 		DECFSZ	Param78,F
00155 0596 2D92 		GOTO	GetCabNumX_L1
00156 0597 	;
00157 0597 01F8 	GetCabNumX_NoCab	CLRF	Param78
00158 0598 0878 	GetCabNumX_Found_End	MOVF	Param78,W
00159 0599 0008 		RETURN
00160 059A 	;
00161 059A 25F0 	GetCabNumX_1	CALL	GetBlockPwrTable2X
00162 059B 00F9 		MOVWF	Param79
00163 059C 3009 		MOVLW	0x09
00164 059D 00F8 		MOVWF	Param78
00165 059E 1879 	GetCabNumX_L2	BTFSC	Param79,0
00166 059F 2DA3 		GOTO	GetCabNumX_Found
00167 05A0 0CF9 		RRF	Param79,F
00168 05A1 0BF8 		DECFSZ	Param78,F
00169 05A2 2D9E 		GOTO	GetCabNumX_L2
00170 05A3 	;
00171 05A3 	; We have a throttle number, it must be translated into a Cab number.
00172 05A3 3006 	GetCabNumX_Found	MOVLW	0x06
00173 05A4 0278 		SUBWF	Param78,W
00174 05A5 		SKPNB		;<=5?
00175 05A6 2D98 		GOTO	GetCabNumX_Found_End	; Yes
CastleGate.asm   "DataAccess.asm"                                        Page: 92
/HPRR Electrical Dept/HPRR.ASM/MasterFiles/

00176 05A7 	;6..9 need translating
00177 05A7 	;
00178 05A7 3008 		MOVLW	0x08
00179 05A8 0278 		SUBWF	Param78,W
00180 05A9 		SKPB		;Thr 8 or 9?
00181 05AA 2D97 		GOTO	GetCabNumX_NoCab	; Yes, they don't route return 0x00
00182 05AB 	;
00183 05AB 3006 		MOVLW	0x06
00184 05AC 0278 		SUBWF	Param78,W
00185 05AD 		SKPZ		;Thr 6?
00186 05AE 2DB3 		GOTO	Throttle7ToCab	; No
00187 05AF 	;			  No, must be 7
00188 05AF 300A 	Throttle6ToCab	MOVLW	High BlkThr6ToCab
00189 05B0 009E 		MOVWF	SRAM_Addr1
00190 05B1 300A 		MOVLW	low BlkThr6ToCab
00191 05B2 2DB6 		GOTO	ThrottleToCab
00192 05B3 	;
00193 05B3 300A 	Throttle7ToCab	MOVLW	High BlkThr7ToCab
00194 05B4 009E 		MOVWF	SRAM_Addr1
00195 05B5 3059 		MOVLW	low BlkThr7ToCab
00196 05B6 	;
00197 05B6 	;
00198 05B6 0772 	ThrottleToCab	ADDWF	XReg,W	;BlkNum
00199 05B7 009D 		MOVWF	SRAM_Addr0
00200 05B8 		ADDCF	SRAM_Addr1,F
00201 05BA 3010 		MOVLW	low evDataROM
00202 05BB 079E 		ADDWF	SRAM_Addr1,F
00203 05BC 2DC1 		GOTO	GetGet_Read
00204 05BD 	;
00205 05BD 	;
00206 05BD 		endif
00207 05BD 	;
00208 05BD 	;=========================================================================================
00209 05BD 	; Get SM data from SMTableHigh,X
00210 05BD 	;
00211 05BD 	; Entry: XReg, bank3
00212 05BD 	; Exit: Param78 & W = SMData, Bank3
00213 05BD 	; RAM Used: XReg, Param78
00214 05BD 	; Calls: (1+1) SRAM_Read
00215 05BD 	;
00216 05BD 	;6502:	LDA	SMTableHigh,X
00217 05BD 	;PIC16:	CALL	GetSMTableHighX
00218 05BD 	;
00219 05BD 3003 	GetSMTableHighX	MOVLW	low SMTableHigh
00220 05BE 009E 	GetGet_1X	MOVWF	SRAM_Addr1
00221 05BF 0872 		MOVF	XReg,W
00222 05C0 009D 		MOVWF	SRAM_Addr0
00223 05C1 019F 	GetGet_Read	CLRF	SRAM_Addr2	;MSB is 0x00 on all
00224 05C2 2268 		CALL	SRAM_Read
00225 05C3 00F8 		MOVWF	Param78
00226 05C4 	B3_Return	mBank3
00227 05C6 0008 		RETURN
00228 05C7 	;
00229 05C7 	;
00230 05C7 	;=========================================================================================
00231 05C7 	; Store the W at SMTableHigh,X
00232 05C7 	;
00233 05C7 	; Entry: W, XReg, bank3
00234 05C7 	; Exit: Param78 & W = SMData, Bank3
00235 05C7 	; RAM Used: XReg, Param78
00236 05C7 	; Calls: (1+1) SRAM_Write
00237 05C7 	;
00238 05C7 	;6502:	STA	SMTableHigh,X
00239 05C7 	;PIC16:	CALL	SetSMTableHighX
00240 05C7 	;
00241 05C7 00F8 	SetSMTableHighX	MOVWF	Param78
00242 05C8 3003 		MOVLW	low SMTableHigh
00243 05C9 2DE8 		GOTO	SetSet_1X
00244 05CA 	;
00245 05CA 	;=========================================================================================
00246 05CA 	; Get data from SRAM (CurBlk),Y
00247 05CA 	;
00248 05CA 	; Entry: YReg, bank3
00249 05CA 	; Exit: Param78 & W = Data, Bank3
00250 05CA 	; RAM Used: YReg, Param78
00251 05CA 	; Calls: (1+1) SRAM_Read
00252 05CA 	;
00253 05CA 	;6502:	LDA	(CurBlk),Y
00254 05CA 	;PIC16:	CALL	GetCurBlkY
00255 05CA 	;
00256 05CA 0834 	GetCurBlkY	MOVF	CurBlk+1,W
00257 05CB 009E 		MOVWF	SRAM_Addr1
00258 05CC 0833 		MOVF	CurBlk,W
00259 05CD 0773 		ADDWF	YReg,W
00260 05CE 009D 		MOVWF	SRAM_Addr0
00261 05CF 		ADDCF	SRAM_Addr1,F
00262 05D1 2DC1 		GOTO	GetGet_Read
00263 05D2 	;
00264 05D2 	;=========================================================================================
00265 05D2 	; Get data from SRAM (SMDispPtr),Y
00266 05D2 	;
00267 05D2 	; Entry: YReg, bank3
00268 05D2 	; Exit: Param78 & W = SMData, Bank3
00269 05D2 	; RAM Used: YReg, Param78
00270 05D2 	; Calls: (1+1) SRAM_Read
00271 05D2 	;
00272 05D2 	;6502:	LDA	(SMDispPtr),Y
00273 05D2 	;PIC16:	CALL	GetSMDispPtrY
00274 05D2 	;
00275 05D2 	GetSMDispPtrY	MOVFW	SMDispPtr+1
CastleGate.asm   "DataAccess.asm"                                        Page: 93
/HPRR Electrical Dept/HPRR.ASM/MasterFiles/

00276 05D3 009E 		MOVWF	SRAM_Addr1
00277 05D4 		MOVFW	SMDispPtr
00278 05D5 0773 		ADDWF	YReg,W
00279 05D6 009D 		MOVWF	SRAM_Addr0
00280 05D7 		ADDCF	SRAM_Addr1,F
00281 05D9 2DC1 		GOTO	GetGet_Read
00282 05DA 	;
00283 05DA 	;=========================================================================================
00284 05DA 		if UsesBlockCmdTable
00285 05DA 	;=========================================================================================
00286 05DA 	; Get the Block Power Command data at BlockCmdTable,X
00287 05DA 	;
00288 05DA 	; Entry: XReg, bank3
00289 05DA 	; Exit: Param78 & W = BlockCmdTable, Bank3
00290 05DA 	; RAM Used: XReg, Param78
00291 05DA 	; Calls: (1+1) SRAM_Write
00292 05DA 	;
00293 05DA 	;6502:	LDA	BlockCmdTable,X
00294 05DA 	;PIC16:	CALL	GetBlockCmdTableX
00295 05DA 	;
00296 05DA 3005 	GetBlockCmdTableX	MOVLW	low BlockCmdTable
00297 05DB 2DBE 		GOTO	GetGet_1X
00298 05DC 	;
00299 05DC 	;=========================================================================================
00300 05DC 	; Store the W in Block Power Command data at BlockCmdTable,X
00301 05DC 	;
00302 05DC 	; Entry: W, XReg, bank3
00303 05DC 	; Exit: Param78 & W = BlockCmdTable, Bank3
00304 05DC 	; RAM Used: XReg, Param78
00305 05DC 	; Calls: (1+1) SRAM_Write
00306 05DC 	;
00307 05DC 	;6502:	STA	BlockCmdTable,X
00308 05DC 	;PIC16:	CALL	SetBlockCmdTableX
00309 05DC 	;
00310 05DC 00F8 	SetBlockCmdTableX	MOVWF	Param78
00311 05DD 3005 		MOVLW	low BlockCmdTable
00312 05DE 2DE8 		GOTO	SetSet_1X
00313 05DF 	;
00314 05DF 	;=========================================================================================
00315 05DF 	; Get the Block Power Command data at BlockCmdTable2,X
00316 05DF 	;
00317 05DF 	; Entry: XReg, bank3
00318 05DF 	; Exit: Param78 & W = BlockCmdTable, Bank3
00319 05DF 	; RAM Used: XReg, Param78
00320 05DF 	; Calls: (1+1) SRAM_Write
00321 05DF 	;
00322 05DF 3007 	GetBlockCmdTable2X	MOVLW	low BlockCmdTable2
00323 05E0 2DBE 		GOTO	GetGet_1X
00324 05E1 	;
00325 05E1 	;=========================================================================================
00326 05E1 	; Store the W in Block Power Command data at BlockCmdTable2,X
00327 05E1 	;
00328 05E1 	; Entry: W=BlockCmd, XReg, bank3
00329 05E1 	; Exit: Param78 & W = BlockCmd, Bank3
00330 05E1 	; RAM Used: XReg, Param78
00331 05E1 	; Calls: (1+1) SRAM_Write
00332 05E1 	;
00333 05E1 00F8 	SetBlockCmdTable2X	MOVWF	Param78
00334 05E2 3007 		MOVLW	low BlockCmdTable2
00335 05E3 2DE8 		GOTO	SetSet_1X
00336 05E4 	;
00337 05E4 		endif
00338 05E4 	;=========================================================================================
00339 05E4 	; Get the Block Power data at BlockPwrTable,X
00340 05E4 	;
00341 05E4 	; Entry: XReg, bank3
00342 05E4 	; Exit: Param78 & W = BlockPwrTable, Bank3
00343 05E4 	; RAM Used: XReg, Param78
00344 05E4 	; Calls: (1+1) SRAM_Write
00345 05E4 	;
00346 05E4 	;6502:	LDA	BlockPwrTable,X
00347 05E4 	;PIC16:	CALL	GetBlockPwrTableX
00348 05E4 	;
00349 05E4 3004 	GetBlockPwrTableX	MOVLW	low BlockPwrTable
00350 05E5 2DBE 		GOTO	GetGet_1X
00351 05E6 	;
00352 05E6 	;=========================================================================================
00353 05E6 	; Store the W in Block Power data at BlockPwrTable,X
00354 05E6 	;
00355 05E6 	; Entry: W, XReg, bank3
00356 05E6 	; Exit: Param78 & W = BlockPwrTable, Bank3
00357 05E6 	; RAM Used: XReg, Param78
00358 05E6 	; Calls: (1+1) SRAM_Write
00359 05E6 	;
00360 05E6 	;6502:	STA	BlockPwrTable,X
00361 05E6 	;PIC16:	CALL	SetBlockPwrTableX
00362 05E6 	;
00363 05E6 00F8 	SetBlockPwrTableX	MOVWF	Param78
00364 05E7 3004 		MOVLW	low BlockPwrTable
00365 05E8 	;
00366 05E8 009E 	SetSet_1X	MOVWF	SRAM_Addr1
00367 05E9 019F 		CLRF	SRAM_Addr2
00368 05EA 0872 		MOVF	XReg,W
00369 05EB 009D 		MOVWF	SRAM_Addr0
00370 05EC 0878 		MOVF	Param78,W
00371 05ED 223A 		CALL	SRAM_Write
00372 05EE 0878 		MOVF	Param78,W
00373 05EF 2DC4 		GOTO	B3_Return
00374 05F0 	;
00375 05F0 	;=========================================================================================
CastleGate.asm   "DataAccess.asm"                                        Page: 94
/HPRR Electrical Dept/HPRR.ASM/MasterFiles/

00376 05F0 	; Get the Block Power data at BlockPwrTable2,X
00377 05F0 	;
00378 05F0 	; Entry: XReg, bank3
00379 05F0 	; Exit: Param78 & W = BlockPwrTable, Bank3
00380 05F0 	; RAM Used: XReg, Param78
00381 05F0 	; Calls: (1+1) SRAM_Write
00382 05F0 	;
00383 05F0 3006 	GetBlockPwrTable2X	MOVLW	low BlockPwrTable2
00384 05F1 2DBE 		GOTO	GetGet_1X
00385 05F2 	;
00386 05F2 	;=========================================================================================
00387 05F2 	; Store the W in Block Power data at BlockPwrTable2,X
00388 05F2 	;
00389 05F2 	; Entry: W, XReg, bank3
00390 05F2 	; Exit: Param78 & W = BlockPwrTable, Bank3
00391 05F2 	; RAM Used: XReg, Param78
00392 05F2 	; Calls: (1+1) SRAM_Write
00393 05F2 	;
00394 05F2 00F8 	SetBlockPwrTable2X	MOVWF	Param78
00395 05F3 3006 		MOVLW	low BlockPwrTable2
00396 05F4 2DE8 		GOTO	SetSet_1X
00397 05F5 	;
00398 05F5 	;
00399 05F5 	;=========================================================================================
00400 05F5 	; Get SM data from SMTable,X
00401 05F5 	;
00402 05F5 	; Entry: XReg, bank3
00403 05F5 	; Exit: Param78 & W = SMData, Bank3
00404 05F5 	; RAM Used: XReg, Param78
00405 05F5 	; Calls: (1+1) SRAM_Read
00406 05F5 	;
00407 05F5 	;6502:	LDA	SMTable,X
00408 05F5 	;PIC16:	CALL	GetSMTableX
00409 05F5 	;
00410 05F5 3002 	GetSMTableX	MOVLW	low SMTable
00411 05F6 2DBE 		GOTO	GetGet_1X
00412 05F7 	;
00413 05F7 	;=========================================================================================
00414 05F7 	; Store the W at SMTable,X
00415 05F7 	;
00416 05F7 	; Entry: W, XReg, bank3
00417 05F7 	; Exit: Param78 & W = SMData, Bank3
00418 05F7 	; RAM Used: XReg, Param78
00419 05F7 	; Calls: (1+1) SRAM_Write
00420 05F7 	;
00421 05F7 	;6502:	STA	SMTable,X
00422 05F7 	;PIC16:	CALL	SetSMTableX
00423 05F7 	;
00424 05F7 00F8 	SetSMTableX	MOVWF	Param78
00425 05F8 3002 		MOVLW	low SMTable
00426 05F9 2DE8 		GOTO	SetSet_1X
00427 05FA 	;
00428 05FA 		if UsesSyncBP
00429 05FA 	;=========================================================================================
00430 05FA 	; If Block Cmd = 0 and Block Pwr = 0 then clear valid bit.
00431 05FA 	; Call this low level maintenence routine once each time through the main loop 
00432 05FA 	;
00433 05FA 	; Entry: SyncBlkNum, bank3
00434 05FA 	; Exit: SyncBlkNum++, Bank3
00435 05FA 	; RAM Used: XReg, Param78, Param79
00436 05FA 	; Calls: (1+2) GetBlockCmdTableX,SetBlockCmdTableX,GetBlockCmdTable2X,SetBlockCmdTable2X,
00437 05FA 	;	GetBlockPwrTableX,GetBlockPwrTable2X
00438 05FA 	;
00439 05FA 0862 	SyncBlkPwr	MOVF	SyncBlkNum,W
00440 05FB 00F2 		MOVWF	XReg
00441 05FC 25DA 		CALL	GetBlockCmdTableX
00442 05FD 00F9 		MOVWF	Param79
00443 05FE 1FF8 		BTFSS	Param78,7	;valid bit
00444 05FF 2E0A 		GOTO	SyncBlkPwr_1
00445 0600 391F 		ANDLW	0x1F
00446 0601 		SKPZ		;Any cab bit set?
00447 0602 2E0A 		GOTO	SyncBlkPwr_1	; Yes
00448 0603 25E4 		CALL	GetBlockPwrTableX
00449 0604 391F 		ANDLW	0x1F
00450 0605 		SKPZ		;Any cab bit set?
00451 0606 2E0A 		GOTO	SyncBlkPwr_1	; Yes
00452 0607 13F9 		BCF	Param79,7
00453 0608 0879 		MOVF	Param79,W
00454 0609 25DC 		CALL	SetBlockCmdTableX
00455 060A 	;
00456 060A 25DF 	SyncBlkPwr_1	CALL	GetBlockCmdTable2X
00457 060B 00F9 		MOVWF	Param79
00458 060C 1FF8 		BTFSS	Param78,7	;valid bit
00459 060D 2E18 		GOTO	SyncBlkPwr_End
00460 060E 390F 		ANDLW	0x0F
00461 060F 		SKPZ		;Any cab bit set?
00462 0610 2E18 		GOTO	SyncBlkPwr_End	; Yes
00463 0611 25F0 		CALL	GetBlockPwrTable2X
00464 0612 390F 		ANDLW	0x0F
00465 0613 		SKPZ		;Any cab bit set?
00466 0614 2E18 		GOTO	SyncBlkPwr_End	; Yes
00467 0615 13F9 		BCF	Param79,7
00468 0616 0879 		MOVF	Param79,W
00469 0617 25E1 		CALL	SetBlockCmdTable2X
00470 0618 	;
00471 0618 0AE2 	SyncBlkPwr_End	INCF	SyncBlkNum,F
00472 0619 0862 		MOVF	SyncBlkNum,W
00473 061A 3C4C 		SUBLW	BlockCount
00474 061B 		SKPNZ
00475 061C 01E2 		CLRF	SyncBlkNum
CastleGate.asm   "DataAccess.asm"                                        Page: 95
/HPRR Electrical Dept/HPRR.ASM/MasterFiles/

00476 061D 0008 		RETURN
00477 061E 	;
00478 061E 		endif
00479 061E 	;===================================================================================================
00480 061E 	;
00481 061E 		if UsesAutoSMCtrl
00482 061E 	;===================================================================================================
00483 061E 	;kill Valid bits if Cmd = Ctrl
00484 061E 	;
00485 061E 	; Entry: SyncSMNum, bank3
00486 061E 	; Exit: SyncSMNum++, Bank3
00487 061E 	; RAM Used: XReg, Param78
00488 061E 	; Calls: (1+2) GetSMTableX,SetSMTableX,GetSMTableHighX,SetSMTableHighX
00489 061E 	;
00490 061E 0863 	SyncSMs	MOVF	SyncSMNum,W
00491 061F 00F2 		MOVWF	XReg
00492 0620 25F5 		CALL	GetSMTableX
00493 0621 1C78 		BTFSS	Param78,0	;valid bit
00494 0622 2E2C 		GOTO	SyncSMs_1
00495 0623 1078 		BCF	Param78,0
00496 0624 39C0 		ANDLW	0xC0	;Ctrl and Cmd
00497 0625 		SKPNZ
00498 0626 2E2A 		GOTO	SyncSMs_SetLow	;Both are clear so clr valid bit
00499 0627 3AC0 		XORLW	0xC0	;Ctrl and Cmd
00500 0628 		SKPZ
00501 0629 2E2C 		GOTO	SyncSMs_1	;not the same
00502 062A 	;
00503 062A 0878 	SyncSMs_SetLow	MOVF	Param78,W
00504 062B 25F7 		CALL	SetSMTableX
00505 062C 	;
00506 062C 25BD 	SyncSMs_1	CALL	GetSMTableHighX
00507 062D 1C78 		BTFSS	Param78,0	Valid bit
00508 062E 2E38 		GOTO	SyncSMs_2
00509 062F 1078 		BCF	Param78,0
00510 0630 39C0 		ANDLW	0xC0	;Ctrl and Cmd
00511 0631 		SKPNZ
00512 0632 2E36 		GOTO	SyncSMs_SetHi	;Both are clear so clr valid bit
00513 0633 3AC0 		XORLW	0xC0	;Ctrl and Cmd
00514 0634 		SKPZ
00515 0635 2E38 		GOTO	SyncSMs_2
00516 0636 	;
00517 0636 0878 	SyncSMs_SetHi	MOVF	Param78,W
00518 0637 25C7 		CALL	SetSMTableHighX
00519 0638 	;
00520 0638 0AE3 	SyncSMs_2	INCF	SyncSMNum,F
00521 0639 0008 		RETURN
00522 063A 		endif
00523 063A 	;
00524 063A 	;===========================================================================================
00525 063A 	; Copy the block pwr Data from evUDP_BlockPwrTable(0x0204) to BlockPwrTable(0x0004)
00526 063A 	; Preserve the occupancy bits
00527 063A 	;
00528 063A 	; Entry: Bank3
00529 063A 	; Exit: Bank3
00530 063A 	; RAM Used: XReg, Param78
00531 063A 	; Calls: (1+2) GetBlkOwnerX,SRAM_Read,SRAM_Write
00532 063A 	;
00533 063A 01F2 	CopyUDPBlockPwrTable	CLRF	XReg	;Block Zero
00534 063B 	;
00535 063B 2580 	Receive_BlockPwr_L1	CALL	GetBlkOwnerX
00536 063C 1BF8 		BTFSC	Param78,7	;This is one of mine?
00537 063D 2E4B 		GOTO	Receive_BlockPwr_Nxt	; Yes, Ignore this data
00538 063E 	;
00539 063E 3002 		MOVLW	kUDP_SRAM_Page
00540 063F 009F 		MOVWF	SRAM_Addr2
00541 0640 3004 		MOVLW	low BlockPwrTable
00542 0641 009E 		MOVWF	SRAM_Addr1
00543 0642 0872 		MOVF	XReg,W
00544 0643 009D 		MOVWF	SRAM_Addr0
00545 0644 2268 		CALL	SRAM_Read
00546 0645 		mBank3
00547 0647 019F 		CLRF	SRAM_Addr2
00548 0648 223A 		CALL	SRAM_Write
00549 0649 		mBank3
00550 064B 	;
00551 064B 304B 	Receive_BlockPwr_Nxt	MOVLW	kMaxBlockNum
00552 064C 0272 		SUBWF	XReg,W
00553 064D 		SKPNZ
00554 064E 0008 		RETURN
00555 064F 0AF2 		INCF	XReg,F
00556 0650 2E3B 		GOTO	Receive_BlockPwr_L1
00557 0651 	;
00558 0651 	;===============================================================================================
00559 0651 	; Copy the block pwr Data from evUDP_BlockPwrTable2(0x0206) to BlockPwrTable(0x0006)
00560 0651 	; Preserve the occupancy bits
00561 0651 	;
00562 0651 	; Entry: Bank3
00563 0651 	; Exit: Bank3
00564 0651 	; RAM Used: XReg, Param78
00565 0651 	; Calls: (1+2) GetBlkOwnerX,SRAM_Read,SRAM_Write
00566 0651 	;
00567 0651 01F2 	CopyUDPBlockPwrTable2	CLRF	XReg	;Block Zero
00568 0652 	;
00569 0652 2580 	Receive_BlockPwr2_L1	CALL	GetBlkOwnerX
00570 0653 1BF8 		BTFSC	Param78,7	;This is one of mine?
00571 0654 2E62 		GOTO	Receive_BlockPwr2_Nxt	; Yes, Ignore this data
00572 0655 	;
00573 0655 3002 		MOVLW	kUDP_SRAM_Page
00574 0656 009F 		MOVWF	SRAM_Addr2
00575 0657 3006 		MOVLW	low BlockPwrTable2
CastleGate.asm   "DataAccess.asm"                                        Page: 96
/HPRR Electrical Dept/HPRR.ASM/MasterFiles/

00576 0658 009E 		MOVWF	SRAM_Addr1
00577 0659 0872 		MOVF	XReg,W
00578 065A 009D 		MOVWF	SRAM_Addr0
00579 065B 2268 		CALL	SRAM_Read
00580 065C 		mBank3
00581 065E 019F 		CLRF	SRAM_Addr2
00582 065F 223A 		CALL	SRAM_Write
00583 0660 		mBank3
00584 0662 	;
00585 0662 304B 	Receive_BlockPwr2_Nxt	MOVLW	kMaxBlockNum
00586 0663 0272 		SUBWF	XReg,W
00587 0664 		SKPNZ
00588 0665 0008 		RETURN
00589 0666 0AF2 		INCF	XReg,F
00590 0667 2E52 		GOTO	Receive_BlockPwr2_L1
00591 0668 	;
00592 0668 	;=========================================================================================
00593 0668 	; Copy the low SM Data from evUDP_SMTable(0x0202) to SMTable(0x0002)
00594 0668 	; Preserve the command bit and sent bit.
00595 0668 	;
00596 0668 	; Entry: Bank3
00597 0668 	; Exit: Bank0
00598 0668 	; RAM Used: FSR, Param78,Param79,Param7A
00599 0668 	; Calls: (1+1) SRAM_Read,SRAM_Write,SRAM_NextAddr
00600 0668 	;
00601 0668 3002 	CopyUDPSMTable	MOVLW	low SMTable
00602 0669 009E 		MOVWF	SRAM_Addr1
00603 066A 01F9 		CLRF	Param79	;0x00 = copy 256 bytes
00604 066B 	;
00605 066B 019D 	DoSMPageMove	CLRF	SRAM_Addr0
00606 066C 309F 		MOVLW	SRAM_Addr2
00607 066D 0084 		MOVWF	FSR
00608 066E 1783 		BSF	_IRP
00609 066F 3002 	DoSMPageMove_L1	MOVLW	kUDP_SRAM_Page
00610 0670 0080 		MOVWF	INDF	;>>Incoming data
00611 0671 2268 		CALL	SRAM_Read
00612 0672 39A0 		ANDLW	SMCnFMask	;only keep Ctrl & FB 0xA0
00613 0673 00FA 		MOVWF	Param7A
00614 0674 	;
00615 0674 0180 		CLRF	INDF	;>>Stored data
00616 0675 2268 		CALL	SRAM_Read
00617 0676 00F8 		MOVWF	Param78	
00618 0677 3941 		ANDLW	SMCMDMask+SMVDMask	;only keep CMD and ValidData flags
00619 0678 047A 		IORWF	Param7A,W	; combine w/ Ctrl & FB
00620 0679 1CF8 		BTFSS	Param78,SMLocBit	;Don't overwrite local data
00621 067A 223A 		CALL	SRAM_Write
00622 067B 2211 		CALL	SRAM_NextAddr
00623 067C 0BF9 		DECFSZ	Param79,F
00624 067D 2E6F 		GOTO	DoSMPageMove_L1
00625 067E 0008 		RETURN
00626 067F 	;
00627 067F 	;=========================================================================================
00628 067F 	; Copy the high SM Data from evUDP_SMTableHigh(0x0203) to SMTableHigh(0x0003)
00629 067F 	;
00630 067F 	; Entry: Bank3
00631 067F 	; Exit: Bank0
00632 067F 	; RAM Used: FSR, Param78,Param79,Param7A
00633 067F 	; Calls: (1+1) SRAM_Read,SRAM_WritePI
00634 067F 	;
00635 067F 3003 	CopyUDPSMTableHigh	MOVLW	low SMTableHigh
00636 0680 009E 		MOVWF	SRAM_Addr1
00637 0681 01F9 		CLRF	Param79	;0x00 = copy 256 bytes
00638 0682 2E6B 		GOTO	DoSMPageMove
00984 0683 		include	BlockControlSeg0.asm
00001 0683 		subtitle	"BlockControl.asm"

00002 0683 		page
00003 0683 	;============================================================================================
00004 0683 	;
00005 0683 	;  FileName: BlockControl.asm
00006 0683 	;  Date: 6/27/09
00007 0683 	;  File Version: 1.0.1
00008 0683 	;  
00009 0683 	;  Author: David M. Flynn
00010 0683 	;  Company: HPRR
00011 0683 	;  Project: TCC
00012 0683 	;
00013 0683 	;============================================================================================
00014 0683 	;============================================================================================
00015 0683 	; Revision History
00016 0683 	;
00017 0683 	; 1.0.1 6/27/2009	Optimized some code.
00018 0683 	; 1.0   7/9/2006	Moved routines from main panel.
00019 0683 	;
00020 0683 	;============================================================================================
00021 0683 	; Conditional Assmbly
00022 0683 	;
00023 0683 	;
00024 0683 	;============================================================================================
00025 0683 	; Notes:
00026 0683 	;
00027 0683 	;kMaxRetry	EQU	0x05	;BlockPwr scan
00028 0683 	;BlockPwrTblPtr	RES	2
00029 0683 	;ScannerBlkNum	RES	1
00030 0683 	;BPTemp	RES	2
00031 0683 	;BPTemp2	RES	2
00032 0683 	;=========================================================================================
00033 0683 	; Name	(additional stack words required) Description
00034 0683 	;=========================================================================================
00035 0683 	;ScanBlockPwr	Test the next block in the sequence
CastleGate.asm   "BlockControl.asm"                                      Page: 97
/HPRR Electrical Dept/HPRR.ASM/MasterFiles/

00036 0683 	;SetBlockPwr	Look at Block Power Cmds and set relays for one block
00037 0683 	;=======================================================================================
00038 0683 	InputA_D00	mCall0To3	InputA
00039 0687 0008 		RETURN
00040 0688 	Output_D00	mCall0To3	Output
00041 068C 0008 		RETURN
00042 068D 	;=======================================================================================
00043 068D 	;Test the next block in the sequence
00044 068D 	;
00045 068D 	; Entry: kMaxRetry,BlockPwrTblPtr,ScannerBlkNum
00046 068D 	; Exit: BlockPwrTblPtr++,ScannerBlkNum++
00047 068D 	; RAM Used: XReg, YReg, Param78, Param7A, BPTemp, BPTemp2
00048 068D 	; Calls: GetBlkOwnerX, GetCurBlkY, InputA_D00, GetBlockPwrTableX, SetBlockPwrTableX,
00049 068D 	;	GetBlockPwrTable2X, SetBlockPwrTable2X
00050 068D 	;
00051 068D 3005 	ScanBlockPwr	MOVLW	kMaxRetry
00052 068E 00F7 		MOVWF	Param77	;test 5 blocks
00053 068F 	;
00054 068F 083C 	ScanBlockPwr_L1	MOVF	BlockPwrTblPtr,W
00055 0690 00B3 		MOVWF	CurBlk
00056 0691 083D 		MOVF	BlockPwrTblPtr+1,W
00057 0692 00B4 		MOVWF	CurBlk+1
00058 0693 0845 		MOVF	ScannerBlkNum,W
00059 0694 00F2 		MOVWF	XReg	;Block number
00060 0695 	;
00061 0695 2580 		CALL	GetBlkOwnerX
00062 0696 1FF8 		BTFSS	Param78,7	;MyBlock?
00063 0697 2EDB 		GOTO	ScanBlockPwr_Next	; No
00064 0698 	;
00065 0698 01C0 		CLRF	BPTemp
00066 0699 01C1 		CLRF	BPTemp+1
00067 069A 01C2 		CLRF	BPTemp2
00068 069B 01C3 		CLRF	BPTemp2+1
00069 069C 	;
00070 069C 3009 		MOVLW	0x09
00071 069D 00FA 		MOVWF	Param7A	;Do 9 cabs
00072 069E 	;
00073 069E 3000 		MOVLW	BPCab1	; starting with Cab1
00074 069F 00F3 		MOVWF	YReg
00075 06A0 	;
00076 06A0 01B1 	ScanBlockPwr_L4	CLRF	IActive	;default unused cabs to off
00077 06A1 25CA 		CALL	GetCurBlkY	;cab bit number
00078 06A2 	; set valid bit mask for this cab 0=cab not here
00079 06A2 0D78 		RLF	Param78,W
00080 06A3 0DC3 		RLF	BPTemp2+1,F
00081 06A4 0DC2 		RLF	BPTemp2,F
00082 06A5 3001 		MOVLW	0x01
00083 06A6 06C3 		XORWF	BPTemp2+1,F
00084 06A7 	;
00085 06A7 1FF8 		BTFSS	Param78,7	;none?
00086 06A8 2683 		CALL	InputA_D00	; No
00087 06A9 0D31 		RLF	IActive,W	;Read input
00088 06AA 0DC1 		RLF	BPTemp+1,F
00089 06AB 0DC0 		RLF	BPTemp,F
00090 06AC 3002 		MOVLW	0x02
00091 06AD 07F3 		ADDWF	YReg,F	;next cab
00092 06AE 0BFA 		DECFSZ	Param7A,F	;All 9 done?
00093 06AF 2EA0 		GOTO	ScanBlockPwr_L4	; No
00094 06B0 	;
00095 06B0 	; BPTemp cabs 23456789 xxxxxxx1
00096 06B0 	; Adjust bit positions
00097 06B0 0EC0 		SWAPF	BPTemp,F	;23456789 00010000
00098 06B1 0E41 		SWAPF	BPTemp+1,W	;W=67892345
00099 06B2 390F 		ANDLW	0x0F
00100 06B3 04C0 		IORWF	BPTemp,F	;23456789 00012345
00101 06B4 300F 		MOVLW	0x0F
00102 06B5 05C1 		ANDWF	BPTemp+1,F	;00006789 00012345
00103 06B6 	;
00104 06B6 0EC2 		SWAPF	BPTemp2,F
00105 06B7 0E43 		SWAPF	BPTemp2+1,W
00106 06B8 390F 		ANDLW	0x0F
00107 06B9 04C2 		IORWF	BPTemp2,F
00108 06BA 300F 		MOVLW	0x0F
00109 06BB 05C3 		ANDWF	BPTemp2+1,F
00110 06BC 	;
00111 06BC 0840 		MOVF	BPTemp,W
00112 06BD 0441 		IORWF	BPTemp+1,W
00113 06BE 		SKPZ		;Is any cab powered?
00114 06BF 17C0 		BSF	AnyCabOnFlag	; Yes
00115 06C0 	;
00116 06C0 25E4 		CALL	GetBlockPwrTableX
00117 06C1 3080 		MOVLW	b'10000000'	;Ignor detect bits
00118 06C2 0442 		IORWF	BPTemp2,W	; and cabs not here
00119 06C3 0578 		ANDWF	Param78,W
00120 06C4 0240 		SUBWF	BPTemp,W
00121 06C5 		SKPNZ		;Changed?
00122 06C6 2ECE 		GOTO	ScanBlockPwr_3	; No
00123 06C7 	;
00124 06C7 0842 		MOVF	BPTemp2,W	; Yes, Keep cabs not here
00125 06C8 3A1F 		XORLW	0x1F	; cabs 1..5
00126 06C9 3860 		IORLW	b'01100000'	; and detect bits
00127 06CA 	;
00128 06CA 0578 		ANDWF	Param78,W
00129 06CB 0440 		IORWF	BPTemp,W
00130 06CC 25E6 		CALL	SetBlockPwrTableX
00131 06CD 145B 		BSF	BlockDataChngFlag
00132 06CE 	;	
00133 06CE 25F0 	ScanBlockPwr_3	CALL	GetBlockPwrTable2X
00134 06CF 0843 		MOVF	BPTemp2+1,W	;Ignor reserved bits
00135 06D0 0578 		ANDWF	Param78,W	; and cabs not here
CastleGate.asm   "BlockControl.asm"                                      Page: 98
/HPRR Electrical Dept/HPRR.ASM/MasterFiles/

00136 06D1 0241 		SUBWF	BPTemp+1,W
00137 06D2 		SKPNZ		;Changed?
00138 06D3 2EDB 		GOTO	ScanBlockPwr_Next	; No
00139 06D4 	;
00140 06D4 0843 		MOVF	BPTemp2+1,W	; Yes, Keep cabs not here
00141 06D5 3A0F 		XORLW	0x0F	; cabs 6..9
00142 06D6 38F0 		IORLW	b'11110000'	; and reserved bits
00143 06D7 	;
00144 06D7 0578 		ANDWF	Param78,W
00145 06D8 0441 		IORWF	BPTemp+1,W
00146 06D9 25F2 		CALL	SetBlockPwrTable2X
00147 06DA 14DB 		BSF	BlockDataChngFlag2
00148 06DB 	;
00149 06DB 3012 	ScanBlockPwr_Next	MOVLW	BPAddBlk
00150 06DC 07BC 		ADDWF	BlockPwrTblPtr,F
00151 06DD 		ADDCF	BlockPwrTblPtr+1,F
00152 06DF 	;
00153 06DF 304B 		MOVLW	kMaxBlockNum
00154 06E0 0245 		SUBWF	ScannerBlkNum,W
00155 06E1 		SKPZ		;All blocks done?
00156 06E2 0A45 		INCF	ScannerBlkNum,W	;No
00157 06E3 00C5 		MOVWF	ScannerBlkNum
00158 06E4 	;		
00159 06E4 08C5 		MOVF	ScannerBlkNum,F
00160 06E5 		SKPZ
00161 06E6 2EEC 		GOTO	ScanBlockPwr_5
00162 06E7 	;
00163 06E7 3019 		MOVLW	low BlkPwrRDY1	;Setup to scan the first
00164 06E8 00BC 		MOVWF	BlockPwrTblPtr	; block next time we are
00165 06E9 3001 		MOVLW	high BlkPwrRDY1	; called.
00166 06EA 3E10 		ADDLW	low evDataROM
00167 06EB 00BD 		MOVWF	BlockPwrTblPtr+1
00168 06EC 	;
00169 06EC 0BF7 	ScanBlockPwr_5	DECFSZ	Param77,F
00170 06ED 2E8F 		GOTO	ScanBlockPwr_L1
00171 06EE 0008 		RETURN
00172 06EF 	;
00173 06EF 	;=============================================================================================
00174 06EF 	; Look at Block Power Cmds and set relays for one block
00175 06EF 	;
00176 06EF 	; Entry: BlockNum
00177 06EF 	; Exit: BlockNum++
00178 06EF 	; RAM Used: Param78, Param79, Param7A, BPTemp, BPTemp2, CurBlk
00179 06EF 	; Calls: GetBlockCmdTableX, GetBlockPwrTableX, GetBlockCmdTable2X, GetBlockPwrTable2X
00180 06EF 	;
00181 06EF 0844 	SetBlockPwr	MOVF	BlockNum,W
00182 06F0 00F2 		MOVWF	XReg
00183 06F1 	;
00184 06F1 2580 		CALL	GetBlkOwnerX
00185 06F2 1FF8 		BTFSS	Param78,7	;Is this one of mine?
00186 06F3 2F39 		GOTO	SetBlockPwr_NextBlk	; No
00187 06F4 	;
00188 06F4 25DA 		CALL	GetBlockCmdTableX
00189 06F5 00C0 		MOVWF	BPTemp
00190 06F6 25DF 		CALL	GetBlockCmdTable2X
00191 06F7 00C1 		MOVWF	BPTemp+1
00192 06F8 	;
00193 06F8 25E4 		CALL	GetBlockPwrTableX
00194 06F9 00C2 		MOVWF	BPTemp2
00195 06FA 25F0 		CALL	GetBlockPwrTable2X
00196 06FB 00C3 		MOVWF	BPTemp2+1
00197 06FC 	;
00198 06FC 	;in BlockPwrTable each Byte represents one block
00199 06FC 	; bit0 = Cab5
00200 06FC 	; bit1 = Cab4
00201 06FC 	; bit2 = Cab3
00202 06FC 	; bit3 = Cab2
00203 06FC 	; bit4 = Cab1
00204 06FC 	; bit5 = Detect West
00205 06FC 	; bit6 = Detect East
00206 06FC 	; bit7 = Set if any cab is powerd
00207 06FC 	;  if bit 7 is set but bits 0..4 are cleared then look at BlockPwrTable2
00208 06FC 	;  for additional cab bits
00209 06FC 	;
00210 06FC 	;in BlockPwrTable2 each byte represents one block
00211 06FC 	; bit0 = Cab9
00212 06FC 	; bit1 = Cab8
00213 06FC 	; bit2 = Cab7
00214 06FC 	; bit3 = Cab6
00215 06FC 	; bit4 = not used
00216 06FC 	; bit5 = not used
00217 06FC 	; bit6 = not used
00218 06FC 	; bit7 = not used
00219 06FC 	; align bits to go cabs 1..9 sequentially BPTemp:7..0 BPTemp+1:7	 C   BP+1     BP
00220 06FC 0EC1 		SWAPF	BPTemp+1,F	;x 6789xxxx xxx12345
00221 06FD 0DC1 		RLF	BPTemp+1,F	;6 789xxxxx xxx12345
00222 06FE 0DC0 		RLF	BPTemp,F	;x 789xxxxx xx123456
00223 06FF 0DC1 		RLF	BPTemp+1,F	;7 89xxxxxx xx123456
00224 0700 0DC0 		RLF	BPTemp,F	;x 89xxxxxx x1234567
00225 0701 0DC1 		RLF	BPTemp+1,F	;8 9xxxxxxx x1234567
00226 0702 0DC0 		RLF	BPTemp,F	;x 9xxxxxxx 12345678
00227 0703 	; align bits to go cabs 1..9 sequentially BPTemp2:7..0 BPTemp2+1:7
00228 0703 0EC3 		SWAPF	BPTemp2+1,F	;x 6789xxxx xxx12345
00229 0704 0DC3 		RLF	BPTemp2+1,F	;6 789xxxxx xxx12345
00230 0705 0DC2 		RLF	BPTemp2,F	;x 789xxxxx xx123456
00231 0706 0DC3 		RLF	BPTemp2+1,F	;7 89xxxxxx xx123456
00232 0707 0DC2 		RLF	BPTemp2,F	;x 89xxxxxx x1234567
00233 0708 0DC3 		RLF	BPTemp2+1,F	;8 9xxxxxxx x1234567
00234 0709 0DC2 		RLF	BPTemp2,F	;x 9xxxxxxx 12345678
00235 070A 	;
CastleGate.asm   "BlockControl.asm"                                      Page: 99
/HPRR Electrical Dept/HPRR.ASM/MasterFiles/

00236 070A 	; CurBlk := evDataROM + BlkPwrRDY1
00237 070A 3019 		MOVLW	low BlkPwrRDY1
00238 070B 00B3 		MOVWF	CurBlk,F
00239 070C 3001 		MOVLW	high BlkPwrRDY1
00240 070D 3E10 		ADDLW	low evDataROM
00241 070E 00B4 		MOVWF	CurBlk+1,F
00242 070F 	;
00243 070F 	; CurBlk := CurBlk + (BPAddBlk * BlockNum)
00244 070F 3012 		MOVLW	BPAddBlk
00245 0710 00F9 		MOVWF	Param79
00246 0711 0844 	SetBlockPwr_L2	MOVF	BlockNum,W
00247 0712 07B3 		ADDWF	CurBlk,F
00248 0713 		ADDCF	CurBlk+1,F
00249 0715 0BF9 		DECFSZ	Param79,F
00250 0716 2F11 		GOTO	SetBlockPwr_L2
00251 0717 	;
00252 0717 	;
00253 0717 	; Set outputs to drive cab power relays
00254 0717 	;
00255 0717 3000 		MOVLW	BPCab1	;0x00
00256 0718 00F3 		MOVWF	YReg
00257 0719 3009 		MOVLW	0x09
00258 071A 00FA 		MOVWF	Param7A	;Do 9 cabs
00259 071B 	;
00260 071B 01AD 	SetBlockPwr_L3	CLRF	OActive
00261 071C 0DC1 		RLF	BPTemp+1,F	;Get ThrFlag from BlkCmd table into C
00262 071D 0DC0 		RLF	BPTemp,F
00263 071E 0CAD 		RRF	OActive,F	;from blk Cmd
00264 071F 	;
00265 071F 01F8 		CLRF	Param78
00266 0720 0DC3 		RLF	BPTemp2+1,F
00267 0721 0DC2 		RLF	BPTemp2,F
00268 0722 0C78 		RRF	Param78,W	;Get ThrFlag from blk Pwr table into C
00269 0723 	;
00270 0723 	; Compare power with command. Is this a change?
00271 0723 022D 		SUBWF	OActive,W
00272 0724 		SKPZ		;Same?
00273 0725 2F29 		GOTO	SetBlockPwr_1	; No
00274 0726 0AF3 	SetBlockPwr_DoNext	INCF	YReg,F	; Yes
00275 0727 0AF3 		INCF	YReg,F
00276 0728 2F37 		GOTO	SetBlockPwr_Next
00277 0729 	;
00278 0729 25CA 	SetBlockPwr_1	CALL	GetCurBlkY
00279 072A 1BF8 		BTFSC	Param78,7	;None?
00280 072B 2F26 		GOTO	SetBlockPwr_DoNext	; Yes, we're done with this block
00281 072C 	;
00282 072C 	; Add 0x0400 to the output bit number
00283 072C 	; Output bits for blocks are the input bit + 0x400
00284 072C 	; example: Cab1 RDY1 Input=0x2042 Output=0x2442
00285 072C 	;
00286 072C 00AC 		MOVWF	OBit
00287 072D 0AF3 		INCF	YReg,F
00288 072E 25CA 		CALL	GetCurBlkY
00289 072F 0AF3 		INCF	YReg,F
00290 0730 3903 		ANDLW	0x03
00291 0731 3E04 		ADDLW	0x04
00292 0732 00AE 		MOVWF	OBoard
00293 0733 	;
00294 0733 0E78 		SWAPF	Param78,W
00295 0734 3903 		ANDLW	0x03
00296 0735 00AB 		MOVWF	OSlot
00297 0736 2688 		CALL	Output_D00
00298 0737 	;
00299 0737 0BFA 	SetBlockPwr_Next	DECFSZ	Param7A,F
00300 0738 2F1B 		GOTO	SetBlockPwr_L3
00301 0739 	;	
00302 0739 	; Advance block number
00303 0739 304B 	SetBlockPwr_NextBlk	MOVLW	kMaxBlockNum
00304 073A 0244 		SUBWF	BlockNum,W	;W=BlockNum-kMaxBlockNum
00305 073B 		SKPZ		;W=0?
00306 073C 0A44 		INCF	BlockNum,W	; No
00307 073D 00C4 		MOVWF	BlockNum
00308 073E 0008 		RETURN
00309 073F 	;
00310 073F 	;======================================================================================
00985 073F 		include	NICStuff.asm	; 0x0800
00001 073F 		subtitle	"NIC Stuff"

00002 073F 		page
00003 073F 	;================================================================================================
00004 073F 	;
00005 073F 	;  FileName: NICStuff.asm
00006 073F 	;  Date: 4/7/09
00007 073F 	;  File Version: 1.5.16
00008 073F 	;  
00009 073F 	;  Author: David M. Flynn
00010 073F 	;  Company: Oxford V.U.E., Inc.
00011 073F 	;
00012 073F 	;============================================================================================
00013 073F 	; Notes:
00014 073F 	;
00015 073F 	;  This file is Network Interface Controller routines.
00016 073F 	;  There are no custom routines in this file.
00017 073F 	;
00018 073F 	;  Segmentation is not supported!
00019 073F 	;   Any incoming or outgoing data must fit in a simgle ethernet frame.
00020 073F 	;   Routers are not supported, for security all packets must be to/from this subnet.
00021 073F 	;
00022 073F 	;============================================================================================
00023 073F 	; Revision History
CastleGate.asm   "NIC Stuff"                                             Page: 100
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

00024 073F 	;
00025 073F 	; 1.5.16    4/7/09	Fixed: TFTPPortS for Tx of more than 256 bytes.
00026 073F 	; 1.5.15    6/16/06	To support UsesRS232BufIO _GIE is cleared durring read/write of NIC
00027 073F 	; 1.5.14    5/11/05	Optimized code.
00028 073F 	; 1.5.13    3/31/05	Added ARPsNeverDie
00029 073F 	; 1.5.12    3/16/05	Added AllowReceiveBroadcast
00030 073F 	; 1.5.11    3/14/05	Changed Locate_ARP to return MAC:FFFFFFFFFFFF when IP:255
00031 073F 	;	Added some comments fixed others.
00032 073F 	; 1.5.10    10/22/04	Optomized some code. ip_recv (0/0), Removed some test code.
00033 073F 	; 1.5.9     9/21/04	The constant testing now defaults to 0
00034 073F 	; 1.5.8     4/29/04	Changed TFTPPortS_handler to support read only of any block size (default is still 256)
00035 073F 	;	Added entry points for TFTPPortS_ReadAll and TFTPPortS_Read
00036 073F 	; 1.5.7     12/29/03	Changed atend, checkflag to #Define, added CheckFlagFileReg equ Flags26
00037 073F 	; 1.5.6     8/28/03	Added outnic_RBCR0_1
00038 073F 	;	Changed putnic_checkbyte to use only 1 stack word
00039 073F 	; 1.5.5     7/4/03	Fixed arp_findfree,arp_find to reduce stack loading to 5 from 6.
00040 073F 	; 1.5.4     6/8/03	Added conditional UsesTCPIPDataPort.
00041 073F 	; 1.5.3     5/28/03	Moved EQUs to this file.
00042 073F 	; 1.5.2     5/20/03	Added UsesUDP conditional.
00043 073F 	; 1.5.1     4/5/03	Fixed a minor bug in tcp_handler for not using UsesRS232BufIO
00044 073F 	; 1.5       4/4/03	Added TCPRS232Port, RS232Port_handler is in segment 3 (file:RS232Port.asm)
00045 073F 	; 1.4.1b1   3/4/03	Separated TFTPPortS_handler and TFTPPortE_handler.
00046 073F 	;	Removed code for port numbers > 255.
00047 073F 	; 1.4b1     2/21/03	Moved pcol tests and branching to get_ether
00048 073F 	; 1.3b1      2/9/03	Minor bug fixes. First fully functional version.
00049 073F 	;	As of 2/9/03 this version has NO known bugs or missing features.
00050 073F 	;	With all testing messsages off there are d'195' bytes free in this segment.
00051 073F 	; 1.3a1      2/4/03	Added User Datagram Protocol
00052 073F 	; 1.2       1/29/03	Added ARP cache and ARP Req.
00053 073F 	; 1.1.1     1/23/03	Added match_word.
00054 073F 	; 1.1       10/29/02   Moved standard routines from Ether.asm
00055 073F 	; 1.0.1     9/17/02	Fisrt rev'd version
00056 073F 	;
00057 073F 	;============================================================================================
00058 073F 	; Conditionals
00059 073F 	;
00060 073F 	; testing	DisplaysW_D08, lcd_GotoLineW_D08
00061 073F 	; ARPtesting	Show arp messages on LCD line 0.
00062 073F 	; UsesRS232	TXString_D08
00063 073F 	; HasRTC	set_rtc, read_rtc
00064 073F 	; CodeMemStrings	StringDispatch	There are two of these.
00065 073F 	; TTFTPtoSRAM	TFTPPortS_handler	There are two of these.
00066 073F 	; TTFTPtoEEROM	TFTPPortE_handler
00067 073F 	;  If both versions of TFTPPort_handler are needed a new port number can be used.
00068 073F 	; UsesUDP	UDP_Send, put_udp, UDP_recv, udp_handler
00069 073F 	; ARPsNeverDie	Don't decrement time to live ae_ttl
00070 073F 	;
00071 073F 	;============================================================================================
00072 073F 	; Conditional assembly defaults
00073 073F 	;
00074 073F 		ifndef UsesUDP
00076 073F 		endif
00077 073F 	;
00078 073F 		ifndef UsesTCPIPDataPort
00080 073F 		endif
00081 073F 	;
00082 073F 		ifndef testing
00084 073F 		endif
00085 073F 	;
00086 073F 		ifndef AllowReceiveBroadcast
00088 073F 		endif
00089 073F 	;
00090 073F 		ifndef ARPsNeverDie
00092 073F 		endif
00093 073F 	;
00094 073F 	;============================================================================================
00095 073F 		ORG	0x0800
00096 0800 	;
00097 0800 	; Name	(additional stack words required) Description (Bank In/Bank Out)
00098 0800 	;================================================================================================
00099 0800 	;calls outside this segment
00100 0800 	;
00101 0800 	; Segment 0 calls
00102 0800 	;DisplaysDot_D08	(1+1+1)
00103 0800 	;DisplaysW_D08	(1+1+1)
00104 0800 	;lcd_GotoLineW_D08	(1+1+0)
00105 0800 	;Disp_Hex_Byte_D08	(1+1+2)
00106 0800 	;Disp_decbyteW_D08	(1+1+2)
00107 0800 	;PrintString_D08	(1+1+2)
00108 0800 	;DelayWmS_D08	(1+0)
00109 0800 	;TXString_D08	(1+1+0)
00110 0800 	;WriteLDO_0_D08	(1+0)
00111 0800 	;
00112 0800 	; other:
00113 0800 	;  GOTO	http_recv	;tcp port 80 handler in segment 3
00114 0800 	;  GOTO	UDP_Term_Handler	;udp port 57 handler in segment 3
00115 0800 	;  GOTO	UDP_Data_Handler	;udp port 87 handler in segment 3
00116 0800 	;
00117 0800 	;segment 1 routines
00118 0800 	;setnic_addr	(1+0) Set the 'remote DMA' address in the NIC's RAM to be accessed
00119 0800 	;getnic_addr	(1+0) Get the 'remote DMA' address in the NIC's RAM to be accessed
00120 0800 	;nicwrap	(0)   Wrap an NIC Rx page number
00121 0800 	;getnic_data	(1+0) Get data from NIC's RAM into the given buffer
00122 0800 	;get_ether	(1+5) Get packet into buffer, return length (excl CRC)
00123 0800 	;getnic_byte	(1+0) Return a byte from the NIC RAM
00124 0800 	;getch_net	(1+0) Get a byte from network buffer; if end, set flag
00125 0800 	;
00126 0800 	;check_byte_W	(0)   Add byte to checksum value
00127 0800 	;check_remip	(1+0) Add remip to checksum value
00128 0800 	;check_MyIP	(1+0) Add myip to checksum value
CastleGate.asm   "NIC Stuff"                                             Page: 101
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

00129 0800 	;check_4Data	(1+0) Add 4 bytes pointed to by W to checksum value
00130 0800 	;check_data	(1+0) Sends bytes from Param7A to Param7A+Param79-1 to checksum value
00131 0800 	;
00132 0800 	;get_remip	(1+1) Gets remip with getch_net
00133 0800 	;get_rseq	(1+1) Gets rseq with getch_net
00134 0800 	;get_6Data	(1+1) Gets 6 bytes pointed to by W with getch_net
00135 0800 	;get_2Data	(1+1) Gets 2 bytes pointed to by W with getch_net
00136 0800 	;get_rack	(1+1) Gets rack with getch_net
00137 0800 	;get_4Data	(1+1) Gets 4 bytes pointed to by W with getch_net
00138 0800 	;get_Ndata	(1+1) Gets W bytes pointed to by Param7A with getch_net
00139 0800 	;get_data	(1+1) gets bytes with getch_net and saves them to Param7A..Param7A+Param79-1
00140 0800 	;
00141 0800 	;MemMove_Low	(0)   Move bytes from bank 0 or 1 to somewhere else in bank 0 or 1
00142 0800 	; MemMove_Low_L	(0)   Move bytes from bank (IRP) to somewhere else in bank (IRP), set IRP before calling.
00143 0800 	;MemMove_SRAM	(1+1) Move bytes from bank 0 or 1 to SRAM
00144 0800 	; MemMove_SRAM_L	(1+1) Move bytes from bank (IRP) to SRAM, set IRP before calling.
00145 0800 	;MemMoveFrom_SRAM	(1+1) Move bytes from SRAM to bank 0 or 1
00146 0800 	; MemMoveFrom_SRAM_L	(1+1) Move bytes from SRAM to bank (IRP), set IRP before calling.
00147 0800 	;MemComp_SRAM	(1+1) Compare bytes from bank 0 or 1 to SRAM, return 0 not matched
00148 0800 	; MemComp_SRAM_L	(1+1) Compare bytes from bank (IRP) to SRAM, return 0 not matched, set IRP before calling.
00149 0800 	;MemComp_Low	(0)   Compare bytes from bank 0 or 1 to somewhere else in bank 0 or 1, return 0 not matched
00150 0800 	; MemComp_Low_L	(0)   Compare bytes from bank (IRP) to somewhere else in bank (IRP), return 0 not matched
00151 0800 	;
00152 0800 	;match_word	(1+2) Match an incoming word value, return 0 not matched, or end of message
00153 0800 	;match_byteW	(1+1) Match an incoming byte value, return 0 not matched, or end of message
00154 0800 	;match_MyIP	(1+2) Match 4 incoming data bytes to data pointed to by W, return 0 not matched, or end of message
00155 0800 	;match_4Data	(1+2) Match 4 incoming data bytes to data pointed to by W, return 0 not matched, or end of message
00156 0800 	;match_data	(1+2) matches bytes from getch_net to Param7A..Param7A+Param79-1,  return 0 not matched, or end of message
00157 0800 	;
00158 0800 	;skip_6bytes	(1+1) Skip an incoming 6 byte value, return 0 if end of message
00159 0800 	;skip_lword	(1+1) Skip an incoming lword value, return 0 if end of message
00160 0800 	;skip_word	(1+1)
00161 0800 	;skip_byte	(1+1)
00162 0800 	;
00163 0800 	;putch_net_W	(0+0) Put a byte into the network buffer at (txbuff+txin) RAM bank 1
00164 0800 	;put_rack	(1+0) Sends rack to putch_net_W
00165 0800 	;put_rseq	(1+0) Sends rseq to putch_net_W
00166 0800 	;put_remip	(1+0) Sends remip to putch_net_W
00167 0800 	;put_MyIP	(1+0) Sends myip to putch_net_W
00168 0800 	;put_4Data	(1+0) Sends 4 bytes pointed to by W to putch_net_W
00169 0800 	;put_data	(1+0) Sends bytes from Param7A to Param7A+Param79-1 to putch_net_W (banks 0 and 1)
00170 0800 	;put_data2	(1+0) Sends bytes from Param7A to Param7A+Param79-1 to putch_net_W (banks 2 and 3)
00171 0800 	;putnic_data	(1+0) Put the given data into the NIC's RAM
00172 0800 	;
00173 0800 	;put_ether	(1+1) Put Ethernet packet into buffer given data at txbuff and len Param7D
00174 0800 	;xmit_ether	(1+0) Transmit the Ethernet frame
00175 0800 	;
00176 0800 	;Locate_ARP	(1+4) Scan the ARP cache for an IP(remip_b0) load into ram if found
00177 0800 	;arp_findfree	(1+1) Find an free ARP cache record. return: Param78=(0=not found, cache#1..32)
00178 0800 	;arp_find	(1+1) Find an ARP for (ar_spa) in the ARP cache
00179 0800 	;arp_add_or_replace	(1+2) Add this AR address pair to the cache (replace old if found)
00180 0800 	;arp_add	(1+2) Add a new ARP record to the ARP cache
00181 0800 	;arp_Replace	(1+2) Move ARP record into SRAM
00182 0800 	;arp_get	(1+1) Move an ARP record into ram
00183 0800 	;arp_recv	(1+3) Handle an incoming ARP message
00184 0800 	;send_ARP_Resp	(1+2) Sends an ARP responce
00185 0800 	; put_ARP_Header	(1+2) Puts an ARP hearder into the buffer using putch_net_W
00186 0800 	;send_ARP_Req	(1+3) Sends an ARP request
00187 0800 	;
00188 0800 	;UDP_Send	(1+2) Send a UDP datagram given data in txbuff and len txin
00189 0800 	; UDP_Send_E2	(1+2) Send a UDP datagram
00190 0800 	;put_udp	(1+1) Put a UDP header into the buffer (txbuff+txin)
00191 0800 	;
00192 0800 	;put_ip	(1+1) Send out an IP datagram header, given data length
00193 0800 	;putnic_byte	(1+0) Put the given byte into the NIC's RAM
00194 0800 	;putnic_checkbyte	(1+0) Put the given byte into the NIC's RAM
00195 0800 	;
00196 0800 	;Dec_Put_n_Check	(1+3) combined Fix Dec byte and PutNic Check Byte
00197 0800 	;DecWPut_n_Check	(1+3) 16 bit version of Dec_Put_n_Check
00198 0800 	;Dec3BPut_n_Check	(1+3) 24 bit version of Dec_Put_n_Check
00199 0800 	;
00200 0800 	;copy_rx_tx	(1+1) Copy a block from NIC Rx to Tx buffers (not crossing page boundaries)
00201 0800 	;
00202 0800 	;check_rxbytes	(1+0) Checksum the given number of bytes in the Rx NIC buffer
00203 0800 	;
00204 0800 	;IncRSeq	(0)   IncRSeq
00205 0800 	;ip_recv	(1+4++) Get an IP datagram (0/0)
00206 0800 	;tcp_recv	      if valid TCP segment goto tcp_handler
00207 0800 	; CheckPseudo	(1+1) Check the pseudo header.
00208 0800 	;tcp_handler	(1++)  Handle an incoming TCP segment
00209 0800 	;daytime_handler	(1+3) Respond to an Daytime request
00210 0800 	;
00211 0800 	;Std_TCP_Setup	(0+1) Clear checksum, setnic_addr((TXSTART*256)+ETHERHEADER_LEN+IPHDR_LEN+TCPHDR_LEN)
00212 0800 	;PutString	(1+2) Send string number (W) to IP frame buffer
00213 0800 	;TFTPPortS_handler	(1+2) Handler for the TFTP Port SRAM version.
00214 0800 	;TFTPPortS_ReadAll	(1+2) Read 256 bytes from SRAM into NIC buffer and send it (tflags  Ack & close & Push)
00215 0800 	;TFTPPortS_Read	(1+2) Read SRAM_Len bytes from the SRAM into the nic buffer and send it (tflags  Ack & close & Push)
00216 0800 	;TFTPPortE_handler	(1+2) Handler for the TFTP Port, EEROM version.
00217 0800 	;TFTPPortE_ReadAll	(1+2) Read eeROMBuffLen bytes of data into NIC buffer and send it (tflags  Ack & close & Push)
00218 0800 	;TFTPPortE_Read	(1+2) Read eeROMbuff.len bytes of data into NIC buffer and send it (tflags  Ack & close & Push)
00219 0800 	;icmp_recv	(1+)  Respond to an ICMP message (e.g. ping)
00220 0800 	;
00221 0800 	;put_tcp	(1+1) Put out a TCP segment header. Data checksum must have already been computed.
00222 0800 	;tcp_xmit	(1+2) Transmit a TCP segment
00223 0800 	; tcp_xmit_2	(1+2) Transmit ethernet header and data
00224 0800 	;UDP_recv	(1+2++) Test a User Datagram to see if it is valid
00225 0800 	;udp_handler	(1+2++)    Handle an incomming UDP datagram
00226 0800 	;
00227 0800 	;reset_ether	(0)   Set NIC reset signal high (Active)
00228 0800 	;init_ether	(1+4) Initialise NIC.
CastleGate.asm   "NIC Stuff"                                             Page: 102
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

00229 0800 	;
00230 0800 	;innic_NE_RESET	(0)   Input a byte from NIC register NE_RESET
00231 0800 	;innic_CURRP	(0)   Input a byte from NIC register CURRP, current page reg for rd and wr
00232 0800 	;innic_ISR	(0)   Input a byte from NIC register ISR, interrupt status reg for rd and wr
00233 0800 	;innic_RSAR0	(0)   Input a byte from NIC register RSAR0, low byte of remote start addr
00234 0800 	;innic_RSAR1	(0)   Input a byte from NIC register RSAR1, hi byte of remote start addr
00235 0800 	;innic_Data	(0)   Input a byte from NIC register DATAPORT
00236 0800 	;innic	(0)   Input a byte from a NIC register
00237 0800 	;outnic_RSPR0_W	(0)   Data in W to RSAR0
00238 0800 	;outnic_RSPR1_W	(0)   Data in W to RSAR1
00239 0800 	;outnic_BNRY_W	(0)   Data in W to BNRY
00240 0800 	;outnic_TCR_W	(0)   Data in W to TCR
00241 0800 	;outnic_RCR_W	(0)   Data in W to RCR
00242 0800 	;outnic_RBCR1_0	(0)   Set Hi byte of Byte Count to zero
00243 0800 	;outnic_RBCR1_W	(0)   Set Hi byte of Byte Count
00244 0800 	;outnic_RBCR0_W	(0)   Set low byte of Byte Count
00245 0800 	;outnic_CMDR_0A	(0)   Start, DMA remote read
00246 0800 	;outnic_CMDR_W	(0)   Data in W to CMDR
00247 0800 	;outnicD78W	(0)   Data in Param78 Address in W
00248 0800 	;outnic_ISR_FF	(0)   Clear interrupt flags
00249 0800 	;outnit_ISR_W	(0)   Data in W to ISR
00250 0800 	;outnic_ISR_0A	(0)   0x0A to ISR
00251 0800 	;outnic_ISR40	(0)   Clear remote DMA interrupt flag
00252 0800 	;outnic_ISR	(0)   Write the value in Param71 to the NICs ISR register
00253 0800 	;outnic_W	(0)   Output a byte to a NIC register W=Addr, Param71=Data
00254 0800 	;
00255 0800 	;================================================================================================
00256 0800 	;========================================================================================================
00257 0800 	; 8390 Network Interface Controller (NIC) page0 register offsets
00258 0800 0000 	CMDR	EQU	0x00	; command register for read & write
00259 0800 0001 	PSTART	EQU	0x01	; page start register for write
00260 0800 0002 	PSTOP	EQU	0x02	; page stop register for write
00261 0800 0003 	BNRY	EQU	0x03	; boundary reg for rd and wr
00262 0800 0004 	TPSR	EQU	0x04	; tx start page start reg for wr
00263 0800 0005 	TBCR0	EQU	0x05	; tx byte count 0 reg for wr
00264 0800 0006 	TBCR1	EQU	0x06	; tx byte count 1 reg for wr
00265 0800 0007 	ISR	EQU	0x07	; interrupt status reg for rd and wr
00266 0800 0008 	RSAR0	EQU	0x08	; low byte of remote start addr
00267 0800 0009 	RSAR1	EQU	0x09	; hi byte of remote start addr
00268 0800 000A 	RBCR0	EQU	0x0A	; remote byte count reg 0 for wr
00269 0800 000B 	RBCR1	EQU	0x0B	; remote byte count reg 1 for wr
00270 0800 000C 	RCR	EQU	0x0C	; rx configuration reg for wr
00271 0800 000D 	TCR	EQU	0x0D	; tx configuration reg for wr
00272 0800 000E 	DCR	EQU	0x0E	; data configuration reg for wr
00273 0800 000F 	IMR	EQU	0x0F	; interrupt mask reg for wr
00274 0800 	;
00275 0800 	; NIC page 1 register offsets
00276 0800 0001 	PAR0	EQU	0x01	; physical addr reg 0 for rd and wr
00277 0800 0007 	CURRP	EQU	0x07	; current page reg for rd and wr
00278 0800 0008 	MAR0	EQU	0x08	; multicast addr reg 0 for rd and WR
00279 0800 	;
00280 0800 	; NIC page 3 register offsets
00281 0800 0001 	RTL9346CR	EQU	0x01	; RTL 9346 command reg	
00282 0800 0006 	RTL3	EQU	0x06	; RTL config reg 3
00283 0800 	;	
00284 0800 	; NIC RAM definitions
00285 0800 0020 	RAMPAGES	EQU	0x20	; Total number of 256-byte RAM pages 20? 40?
00286 0800 0040 	TXSTART	EQU	0x40	; Tx buffer start page 40?
00287 0800 0006 	TXPAGES	EQU	0x06	; Pages for Tx buffer 6
00288 0800 0046 	RXSTART	EQU	(TXSTART+TXPAGES)	; Rx buffer start page 40+6=46
00289 0800 005F 	RXSTOP	EQU	(TXSTART+RAMPAGES-1)	; Last Rx buffer page 40+20-1=5F
00290 0800 0048 	DCRVAL	EQU	0x48	; Value for data config reg 
00291 0800 	;
00292 0800 	; Command reg values
00293 0800 	;	EQU	0x0A	;Start, DMA remote read
00294 0800 	;	EQU	0x12	;Start, DMA remote write
00295 0800 	;	EQU	0x21	;Stop, DMA abort, page 0
00296 0800 	;	EQU	0x22	;Start NIC
00297 0800 0024 	NICTXCMD	EQU	0x24	;Transmit the packet
00298 0800 	;NICDMAAp1CMD	EQU	0x60	;DMA abort, page 1
00299 0800 	;	EQU	0x61	;Stop, DMA abort, page 1
00300 0800 	;NICDMAAp0CMD	EQU	0x20	;DMA abort, page 0
00301 0800 	;NICDMAAp0CMD	EQU	0x20	;DMA abort, page 0
00302 0800 	; NE2000 definitions  
00303 0800 0010 	DATAPORT 	EQU	0x10 
00304 0800 001F 	NE_RESET	EQU	0x1F 
00305 0800 	;
00306 0800 	; Ethernet definitions
00307 0800 003C 	MINFRAME	EQU	d'60' 
00308 0800 0040 	MINFRAMEC	EQU	d'64'	;0x40
00309 0800 0004 	CRCLEN	EQU	4 
00310 0800 05EA 	MAXFRAME	EQU	d'1514'	;0x5EA
00311 0800 05EE 	MAXFRAMEC	EQU	d'1518'	;0x5EE
00312 0800 	;
00313 0800 	;============================================================================================
00314 0800 	;Dispatch routines (this is segment 1)
00315 0800 	;
00316 0800 	;segment 0 calls
00317 0800 	;
00318 0800 		if testing
00328 0800 		endif
00329 0800 	;
00330 0800 		if UsesLCD
00331 0800 	Disp_decbyteW_D08	mCall1To0	Disp_decbyteW
00332 0804 0008 		RETURN
00333 0805 	;
00334 0805 	PrintString_D08	mCall1To0	PrintString
00335 0809 0008 		RETURN
00336 080A 		endif		;UsesLCD
00337 080A 	;
CastleGate.asm   "NIC Stuff"                                             Page: 103
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

00338 080A 	DelayWmS_D08	mCall1To0	DelayWmS
00339 080E 0008 		RETURN
00340 080F 	;
00341 080F 		if RS232Active
00344 080F 		endif
00345 080F 	;
00346 080F 	;
00347 080F 	WriteLDO_0_D08	mCall1To0	WriteLDO_0
00348 0813 0008 		RETURN
00349 0814 	;
00350 0814 	;=============================================================================================
00351 0814 	; Set the 'remote DMA' address in the NIC's RAM to be accessed
00352 0814 	; Entry:nic ram address Low=Param7A, High=Param7B
00353 0814 	; Exit: none
00354 0814 	; RAM used: Param71, Param7A, Param7B (verified 1/23/03)
00355 0814 	; Calls: (1+0) outnic_ISR40, outnic_RSPR0_W, outnic_RSPR1_W
00356 0814 	;  
00357 0814 2768 	setnic_addr	CALL	outnic_ISR40	;Clear remote DMA interrupt flag
00358 0815 087A 		MOVF	Param7A,W	; outnic(RSAR0, addr mod 256); Data addr 
00359 0816 2740 		CALL	outnic_RSPR0_W
00360 0817 087B 		MOVF	Param7B,W	; outnic(RSAR1, addr/256); 
00361 0818 2F43 		GOTO	outnic_RSPR1_W
00362 0819 	; 
00363 0819 	;==========================================================================	
00364 0819 	; Get the 'remote DMA' address in the NIC's RAM to be accessed
00365 0819 	; Entry: none 
00366 0819 	; Exit: Param79=high byte, W=low byte
00367 0819 	; RAM used: Param78, Param79 (verified 1/23/03)
00368 0819 	; Calls:(1+0) innic_RSAR1, innic_RSAR0
00369 0819 	;
00370 0819 271C 	getnic_addr	CALL	innic_RSAR1
00371 081A 00F9 		MOVWF	Param79	;move high byte out of harms way
00372 081B 2F1A 		GOTO	innic_RSAR0	;go get low byte and return
00373 081C 	;
00374 081C 	; 
00375 081C 	;==============================================================================================
00376 081C 	; Wrap an NIC Rx page number
00377 081C 	; Entry: W=page number to wrap
00378 081C 	; Exit: W=wraped page munber
00379 081C 	; RAM used: Param78 (verified 1/23/03)
00380 081C 	; Calls: (0) none
00381 081C 	;
00382 081C 00F8 	nicwrap	MOVWF	Param78
00383 081D 305F 		MOVLW	RXSTOP	; if (page >= RXSTOP) 
00384 081E 0278 		SUBWF	Param78,W
00385 081F 1C03 		BTFSS	STATUS,C
00386 0820 2824 		GOTO	nicwrap_1
00387 0821 30E7 		MOVLW	RXSTART-RXSTOP	; page := page + RXSTART - RXSTOP; 
00388 0822 07F8 		ADDWF	Param78,F
00389 0823 0008 		RETURN
00390 0824 3046 	nicwrap_1	MOVLW	RXSTART	; else if (page < RXSTART) 
00391 0825 0278 		SUBWF	Param78,W
00392 0826 1803 		BTFSC	STATUS,C
00393 0827 0008 		RETURN
00394 0828 3019 		MOVLW	RXSTOP-RXSTART	; page := Page + RXSTOP - RXSTART; 
00395 0829 0778 		ADDWF	Param78,W
00396 082A 0008 		RETURN		; return(page);
00397 082B 	; 
00398 082B 	;==================================================================================================
00399 082B 	; Get data from NIC's RAM into the given buffer
00400 082B 	; ptr=Param7A  len=Param7B
00401 082B 	; Entry: Param7A, Param7B
00402 082B 	; Exit: none
00403 082B 	; RAM used: Param71, Param78, Param7A, Param7B, FSR (verified 1/23/03)
00404 082B 	; Calls:(1+0) outnic_ISR40, outnic_RBCR0_W, outnic_RBCR1_0, outnic_CMDR_0A, innic_Data
00405 082B 	;
00406 082B 2768 	getnic_data	CALL	outnic_ISR40	; outnic(ISR, 0x40);  Clear remote DMA interrupt flag 
00407 082C 087B 		MOVF	Param7B,W	; outnic(RBCR0, len);	Byte count
00408 082D 2754 		CALL	outnic_RBCR0_W
00409 082E 274F 		CALL	outnic_RBCR1_0	; outnic(RBCR1, 0); 
00410 082F 2757 		CALL	outnic_CMDR_0A	; outnic(CMDR, 0x0a);   Start, DMA remote read
00411 0830 087A 		MOVF	Param7A,W
00412 0831 0084 		MOVWF	FSR
00413 0832 1383 		BCF	STATUS,IRP
00414 0833 	; while (len--)  Get bytes
00415 0833 271E 	getnic_data_L1	CALL	innic_Data	; b = innic(DATAPORT); 
00416 0834 0080 		MOVWF	INDF	; data^ = b; 
00417 0835 0A84 		INCF	FSR,F	; data++
00418 0836 	; 
00419 0836 0BFB 		DECFSZ	Param7B,F
00420 0837 2833 		GOTO	getnic_data_L1
00421 0838 0008 		RETURN
00422 0839 	;
00423 0839 	;===================================================================================================
00424 0839 	; Get packet into buffer, return length (excl CRC), or 0 if none available
00425 0839 	; Entry: none
00426 0839 	; Exit: Param7C=low, Param7D=high
00427 0839 	; 
00428 0839 	; RAM used: Param71, Param77, Param78, Param7A, Param7B, Param7C, Param7D, FSR
00429 0839 	; Calls: (1+5) innic_ISR, innic_CURRP, TXString_D08, init_ether(1+4), outnic_CMDR_W,
00430 0839 	;	getnic_data, nicwrap, outnic_BNRY_W
00431 0839 	;
00432 0839 	get_ether	mBank0
00433 083B 01D3 		CLRF	rxout+1	; rxout = 0; 
00434 083C 01D2 		CLRF	rxout
00435 083D 10A6 		BCF	atend	; atend = 0;
00436 083E 	;
00437 083E 	; if (innic(ISR) & 0x10); If Rx overrun..
00438 083E 2718 		CALL	innic_ISR
00439 083F 1A78 		BTFSC	Param78,4
CastleGate.asm   "NIC Stuff"                                             Page: 104
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

00440 0840 26AB 		CALL	init_ether	; init_ether(); ..reset controller (drastic!)
00441 0841 	;
00442 0841 3060 		MOVLW	0x60	; outnic(CMDR, 0x60) DMA abort, page 1
00443 0842 2758 		CALL	outnic_CMDR_W
00444 0843 	;	
00445 0843 2716 		CALL	innic_CURRP	;curr = innic(CURRP) Get current page 
00446 0844 3020 		MOVLW	0x20	; outnic(CMDR, 0x20) DMA abort, page 0
00447 0845 2758 		CALL	outnic_CMDR_W
00448 0846 	; if (curr != next_page); If Rx packet..
00449 0846 0834 		MOVF	next_page,W
00450 0847 0278 		SUBWF	Param78,W
00451 0848 		SKPNZ
00452 0849 0008 		RETURN		;curr=next_page no data so return
00453 084A 	;  
00454 084A 0834 		MOVF	next_page,W	; curr_rx_page = next_page; 
00455 084B 00B5 		MOVWF	curr_rx_page
00456 084C 	; setnic_addr(next_page); 
00457 084C 00FB 		MOVWF	Param7B	;hi byte
00458 084D 01FA 		CLRF	Param7A	;low byte
00459 084E 2014 		CALL	setnic_addr
00460 084F 	; Move the NIC hardware packet header into ram
00461 084F 	; getnic_data(&nicin, sizeof(nicin)); 
00462 084F 3038 		MOVLW	nicin.nic.stat	;nicin
00463 0850 00FA 		MOVWF	Param7A
00464 0851 3012 		MOVLW	NICETHERHEADER_LEN	;sizeof(nicin) 0x12 bytes
00465 0852 00FB 		MOVWF	Param7B	;nicin.nic.stat..nicin.eth.pcol+1
00466 0853 202B 		CALL	getnic_data
00467 0854 	;
00468 0854 	; len = nicin.nic.len; Take length from stored header
00469 0854 083B 		MOVF	nicin.nic.len+1,W	;high byte
00470 0855 00FD 		MOVWF	Param7D
00471 0856 083A 		MOVF	nicin.nic.len,W
00472 0857 00FC 		MOVWF	Param7C
00473 0858 	; if ((nicin.nic.stat & 1) && len>=MINFRAMEC && len<=MAXFRAMEC) 
00474 0858 1C38 		BTFSS	nicin.nic.stat,0
00475 0859 2875 		GOTO	get_ether_4	;packet error
00476 085A 	;
00477 085A 08FD 		MOVF	Param7D,F
00478 085B 		SKPZ
00479 085C 2862 		GOTO	get_ether_2	;>=0x100
00480 085D 	;
00481 085D 3040 		MOVLW	MINFRAMEC	;<64 bytes
00482 085E 027C 		SUBWF	Param7C,W
00483 085F 1C03 		BTFSS	STATUS,C
00484 0860 2875 		GOTO	get_ether_4	;too short packet error
00485 0861 286C 		GOTO	get_ether_3	;0x100>len>=MINFRAMEC
00486 0862 	;
00487 0862 3005 	get_ether_2	MOVLW	0x05
00488 0863 027D 		SUBWF	Param7D,W
00489 0864 1C03 		BTFSS	STATUS,C
00490 0865 286C 		GOTO	get_ether_3	;len<=0x500
00491 0866 	;
00492 0866 		SKPZ
00493 0867 2875 		GOTO	get_ether_4	;len>=0x600 too big packet error
00494 0868 30EF 		MOVLW	0xEF
00495 0869 027C 		SUBWF	Param7C,W
00496 086A 1803 		BTFSC	STATUS,C	;clr=barrow
00497 086B 2875 		GOTO	get_ether_4	;>=0x5EF too big packet error
00498 086C 	;
00499 086C 	; If hdr is OK, get packet
00500 086C 3012 	get_ether_3	MOVLW	2*MACLEN+2+CRCLEN	; len -= MACLEN+MACLEN+2+CRCLEN
00501 086D 02FC 		SUBWF	Param7C,F
00502 086E 1C03 		BTFSS	STATUS,C
00503 086F 03FD 		DECF	Param7D,F
00504 0870 	 ;
00505 0870 087D 		MOVF	Param7D,W	; rxin = len;
00506 0871 00D1 		MOVWF	rxin+1
00507 0872 087C 		MOVF	Param7C,W
00508 0873 00D0 		MOVWF	rxin
00509 0874 	;
00510 0874 2877 		GOTO	get_ether_5
00511 0875 	;
00512 0875 01FD 	get_ether_4	CLRF	Param7D	; len = 0; 
00513 0876 01FC 		CLRF	Param7C
00514 0877 	;
00515 0877 	;
00516 0877 	; Update next packet ptr
00517 0877 	; if (nicin.nic.next>=RXSTART && nicin.nic.next<RXSTOP) 
00518 0877 3046 	get_ether_5	MOVLW	RXSTART
00519 0878 0239 		SUBWF	nicin.nic.next,W
00520 0879 1C03 		BTFSS	STATUS,C
00521 087A 2882 		GOTO	get_ether_6
00522 087B 305F 		MOVLW	RXSTOP
00523 087C 0239 		SUBWF	nicin.nic.next,W
00524 087D 1803 		BTFSC	STATUS,C
00525 087E 2882 		GOTO	get_ether_6
00526 087F 	;
00527 087F 0839 		MOVF	nicin.nic.next,W	; next_page = nicin.nic.next; 
00528 0880 00B4 		MOVWF	next_page
00529 0881 	; else  If invalid, use prev+1
00530 0881 2888 		GOTO	get_ether_7
00531 0882 	;
00532 0882 	; next_page = nicwrap(next_page + 1); 
00533 0882 3001 	get_ether_6	MOVLW	0x01
00534 0883 0734 		ADDWF	next_page,W
00535 0884 201C 		CALL	nicwrap
00536 0885 00B4 		MOVWF	next_page
00537 0886 01FD 		CLRF	Param7D	; len = 0;
00538 0887 01FC 		CLRF	Param7C
00539 0888 	; Update boundary register
CastleGate.asm   "NIC Stuff"                                             Page: 105
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

00540 0888 	; bound = nicwrap(next_page - 1); 
00541 0888 0334 	get_ether_7	DECF	next_page,W	; W=next_page-1
00542 0889 201C 		CALL	nicwrap
00543 088A 2746 		CALL	outnic_BNRY_W	; outnic(BNRY, bound); 
00544 088B 	;
00545 088B 	;
00546 088B 087C 		MOVF	Param7C,W	; len of data LSB
00547 088C 047D 		IORWF	Param7D,W	; len of data MSB
00548 088D 		SKPNZ		;skip if len<>0
00549 088E 0008 		RETURN
00550 088F 	;
00551 088F 	;
00552 088F 	; Note nicin.eth.pcol is big endian whereas my variables are little endian!		
00553 088F 	; if (nicin.eth.pcol == PCOL_ARP) 
00554 088F 3008 		MOVLW	high PCOL_ARP
00555 0890 0248 		SUBWF	nicin.eth.pcol,W
00556 0891 		SKPZ
00557 0892 2897 		GOTO	get_ether_IP	;hi byte didn't match
00558 0893 	;
00559 0893 3006 		MOVLW	low PCOL_ARP
00560 0894 0249 		SUBWF	nicin.eth.pcol+1,W
00561 0895 		SKPNZ
00562 0896 2A72 		GOTO	arp_recv	; it's ARP
00563 0897 	;
00564 0897 	; else if (nicin.eth.pcol == PCOL_IP) 
00565 0897 3008 	get_ether_IP	MOVLW	high PCOL_IP
00566 0898 0248 		SUBWF	nicin.eth.pcol,W
00567 0899 		SKPZ
00568 089A 289F 		GOTO	get_ether_Px	;hi byte didn't match
00569 089B 	;
00570 089B 3000 		MOVLW	low PCOL_IP
00571 089C 0249 		SUBWF	nicin.eth.pcol+1,W
00572 089D 		SKPNZ
00573 089E 2BDA 		GOTO	ip_recv	;it's IP
00574 089F 	;the next pcol  (there isn't one)
00575 089F 0008 	get_ether_Px	RETURN
00576 08A0 	;
00577 08A0 	;===============================================================================================	
00578 08A0 	; Return a byte from the NIC RAM
00579 08A0 	; Entry:none
00580 08A0 	; Exit: W & Param78=Data
00581 08A0 	; RAM used: Param71, Param78 (verified 10/2/02)
00582 08A0 	; Calls: (1+0) outnic_RBCR0_1, outnic_RBCR1_0, outnic_CMDR_0A, innic_Data
00583 08A0 	;
00584 08A0 2753 	getnic_byte	CALL	outnic_RBCR0_1	; outnic(RBCR0, 1) Byte count
00585 08A1 274F 		CALL	outnic_RBCR1_0	; outnic(RBCR1, 0); 
00586 08A2 2757 		CALL	outnic_CMDR_0A	; outnic(CMDR, 0x0a) Start, DMA remote read
00587 08A3 2F1E 		GOTO	innic_Data	;  b = innic(DATAPORT); 
00588 08A4 	;  
00589 08A4 	;======================================================================================================
00590 08A4 	; Get a byte from network buffer; if end, set flag
00591 08A4 	; Entry: rxin, rxout
00592 08A4 	; Exit: rxout++, Param78 & W = byte from nic
00593 08A4 	; RAM used: Param71, Param78 (verified 1/23/03)
00594 08A4 	; Calls:(1+0) check_byte_W, outnic_RBCR0_W, outnic_RBCR1_0, outnic_CMDR_0A, innic_Data
00595 08A4 	;
00596 08A4 	getch_net	mBank0
00597 08A6 01F8 		CLRF	Param78	; BYTE b=0; 
00598 08A7 14A6 		BSF	atend	;default to atend
00599 08A8 0853 		MOVF	rxout+1,W	; atend = rxout>=rxin; 
00600 08A9 0251 		SUBWF	rxin+1,W
00601 08AA 1C03 		BTFSS	_C
00602 08AB 28B7 		GOTO	getch_net_2
00603 08AC 0853 		MOVF	rxout+1,W
00604 08AD 0251 		SUBWF	rxin+1,W
00605 08AE 1D03 		BTFSS	_Z
00606 08AF 28B6 		GOTO	getch_net_1
00607 08B0 0852 		MOVF	rxout,W
00608 08B1 0250 		SUBWF	rxin,W
00609 08B2 1903 		BTFSC	_Z
00610 08B3 28B7 		GOTO	getch_net_2
00611 08B4 1C03 		BTFSS	_C
00612 08B5 28B7 		GOTO	getch_net_2
00613 08B6 10A6 	getch_net_1	BCF	atend
00614 08B7 18A6 	getch_net_2	BTFSC	atend	; if (!atend) 
00615 08B8 3400 		RETLW	0x00	; default value is end of data
00616 08B9 	;----------------
00617 08B9 	;copy of getnic_byte to save a stack word
00618 08B9 	;	CALL	getnic_byte	; b = getnic_byte(); 
00619 08B9 	;getnic_byte
00620 08B9 2753 		CALL	outnic_RBCR0_1	; outnic(RBCR0, 1) Byte count
00621 08BA 274F 		CALL	outnic_RBCR1_0	; outnic(RBCR1, 0); 
00622 08BB 2757 		CALL	outnic_CMDR_0A	; outnic(CMDR, 0x0a) Start, DMA remote read
00623 08BC 271E 		CALL	innic_Data	;  b = innic(DATAPORT); 
00624 08BD 	;----------------
00625 08BD 0AD2 		INCF	rxout,F	; rxout++
00626 08BE 1903 		BTFSC	STATUS,Z
00627 08BF 0AD3 		INCF	rxout+1,F
00628 08C0 	;
00629 08C0 0878 		MOVF	Param78,W	; check_byte(b);
00630 08C1 	;
00631 08C1 	; Fall through to check_byte_W
00632 08C1 	;=====================================================================================================
00633 08C1 	; Add byte to checksum value
00634 08C1 	; Entry: W=byte to check
00635 08C1 	; Exit: value from W is in Param78 (aka W is unchanged)
00636 08C1 	; RAM used: Param78  (verified 10/2/02)
00637 08C1 	; Calls: (0) none
00638 08C1 	;
00639 08C1 	check_byte_W	mBank0
CastleGate.asm   "NIC Stuff"                                             Page: 106
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

00640 08C3 00F8 		MOVWF	Param78
00641 08C4 	; if (checkflag) 
00642 08C4 1D26 		BTFSS	checkflag
00643 08C5 28D0 		GOTO	check_byte_W_1
00644 08C6 	; if ((checklo = b+checklo) < b) 
00645 08C6 0878 		MOVF	Param78,W
00646 08C7 07CD 		ADDWF	checklo,F
00647 08C8 0878 		MOVF	Param78,W
00648 08C9 024D 		SUBWF	checklo,W
00649 08CA 1803 		BTFSC	STATUS,C
00650 08CB 28D9 		GOTO	check_byte_W_2
00651 08CC 	; if (++checkhi == 0) 
00652 08CC 0FCC 		INCFSZ	checkhi,F
00653 08CD 28D9 		GOTO	check_byte_W_2
00654 08CE 0ACD 		INCF	checklo,F	; checklo++
00655 08CF 	; else 
00656 08CF 28D9 		GOTO	check_byte_W_2
00657 08D0 	; 
00658 08D0 	; if ((checkhi = b+checkhi) < b) 
00659 08D0 0878 	check_byte_W_1	MOVF	Param78,W
00660 08D1 07CC 		ADDWF	checkhi,F
00661 08D2 0878 		MOVF	Param78,W
00662 08D3 024C 		SUBWF	checkhi,W
00663 08D4 1803 		BTFSC	STATUS,C
00664 08D5 28D9 		GOTO	check_byte_W_2
00665 08D6 	; if (++checklo == 0) 
00666 08D6 0FCD 		INCFSZ	checklo,F
00667 08D7 28D9 		GOTO	check_byte_W_2
00668 08D8 0ACC 		INCF	checkhi,F	; checkhi++; 
00669 08D9 3004 	check_byte_W_2	MOVLW	checkflagMask	; checkflag = !checkflag; 
00670 08DA 06A6 		XORWF	CheckFlagFileReg,F
00671 08DB 0878 		MOVF	Param78,W	;restore W
00672 08DC 0008 		RETURN
00673 08DD 	;
00674 08DD 	;====================================================================================================
00675 08DD 	; Add remip to checksum value
00676 08DD 	; Entry: none
00677 08DD 	; Exit: none
00678 08DD 	; RAM used: Param78, Param79, Param7A  (verified 1/23/03)
00679 08DD 	; Calls: (1+0) check_byte_W
00680 08DD 	;
00681 08DD 3056 	check_remip	MOVLW	remip_b3
00682 08DE 28E0 		GOTO	check_4Data
00683 08DF 	;
00684 08DF 	;====================================================================================================
00685 08DF 	; Add myip to checksum value
00686 08DF 	; Entry: none
00687 08DF 	; Exit: none
00688 08DF 	; RAM used: Param78, Param79, Param7A  (verified 1/23/03)
00689 08DF 	; Calls: (1+0) check_byte_W
00690 08DF 	;
00691 08DF 3030 	check_MyIP	MOVLW	myip_b3
00692 08E0 	;
00693 08E0 	;====================================================================================================
00694 08E0 	; Add 4 bytes pointed to by W to checksum value
00695 08E0 	; Entry: W = ptr to first byte to check
00696 08E0 	; Exit: none
00697 08E0 	; RAM used: Param78, Param79, Param7A  (verified 1/23/03)
00698 08E0 	; Calls: (1+0) check_byte_W
00699 08E0 	;
00700 08E0 00FA 	check_4Data	MOVWF	Param7A	; check_lword(myip) Include addresses in checksum
00701 08E1 3004 		MOVLW	0x04
00702 08E2 00F9 		MOVWF	Param79
00703 08E3 	;
00704 08E3 	;==========================================================================================
00705 08E3 	; Sends bytes from Param7A to Param7A+Param79-1 to check_byte_W
00706 08E3 	; Entry: Param7A=ptr to data, Param79=length of data
00707 08E3 	; Exit: none
00708 08E3 	; RAM used: Param78, Param79, Param7A, FSR  (verified 1/23/03)
00709 08E3 	; Calls:(1+0) check_byte_W
00710 08E3 	;
00711 08E3 087A 	check_data	MOVF	Param7A,W
00712 08E4 1383 		BCF	_IRP
00713 08E5 0084 		MOVWF	FSR
00714 08E6 0800 	check_data_1	MOVF	INDF,W
00715 08E7 20C1 		CALL	check_byte_W
00716 08E8 0A84 		INCF	FSR,F
00717 08E9 0BF9 		DECFSZ	Param79,F
00718 08EA 28E6 		GOTO	check_data_1
00719 08EB 0008 		RETURN
00720 08EC 	;
00721 08EC 	;====================================================================================================
00722 08EC 	; Gets remip with getch_net
00723 08EC 	; Entry: none
00724 08EC 	; Exit: none
00725 08EC 	; RAM used:  Param71, Param78, Param79, Param7A (verified 1/23/03)
00726 08EC 	; Calls:(1+1) getch_net
00727 08EC 	;
00728 08EC 3056 	get_remip	MOVLW	remip_b3
00729 08ED 28F7 		GOTO	get_4Data
00730 08EE 	;
00731 08EE 	;====================================================================================================
00732 08EE 	; Gets rseq with getch_net
00733 08EE 	; Entry: none
00734 08EE 	; Exit: none
00735 08EE 	; RAM used:  Param71, Param78, Param79, Param7A (verified 1/23/03)
00736 08EE 	; Calls:(1+1) getch_net
00737 08EE 	;
00738 08EE 305E 	get_rseq	MOVLW	rseq_b3
00739 08EF 28F7 		GOTO	get_4Data
CastleGate.asm   "NIC Stuff"                                             Page: 107
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

00740 08F0 	;
00741 08F0 	;====================================================================================================
00742 08F0 	; Gets 6 bytes pointed to by W with getch_net
00743 08F0 	; Entry: W pointer to destination
00744 08F0 	; Exit: none
00745 08F0 	; RAM used: Param71, Param78, Param79, Param7A (verified 1/23/03)
00746 08F0 	; Calls:(1+1) getch_net
00747 08F0 	;
00748 08F0 00FA 	get_6Data	MOVWF	Param7A
00749 08F1 3006 		MOVLW	0x06
00750 08F2 28F9 		GOTO	get_Ndata
00751 08F3 	;
00752 08F3 	;====================================================================================================
00753 08F3 	; Gets 2 bytes pointed to by W with getch_net
00754 08F3 	; Entry: W pointer to destination
00755 08F3 	; Exit: none
00756 08F3 	; RAM used: Param71, Param78, Param79, Param7A (verified 1/23/03)
00757 08F3 	; Calls:(1+1) getch_net
00758 08F3 	;
00759 08F3 00FA 	get_2Data	MOVWF	Param7A
00760 08F4 3002 		MOVLW	0x02
00761 08F5 28F9 		GOTO	get_Ndata
00762 08F6 	;
00763 08F6 	;====================================================================================================
00764 08F6 	; Gets rack with getch_net
00765 08F6 	; Entry: none
00766 08F6 	; Exit: none
00767 08F6 	; RAM used: Param71, Param78, Param79, Param7A (verified 1/23/03)
00768 08F6 	; Calls:(1+2) getch_net
00769 08F6 	;
00770 08F6 3062 	get_rack	MOVLW	rack_b3
00771 08F7 	;
00772 08F7 	;====================================================================================================
00773 08F7 	; Gets 4 bytes pointed to by W with getch_net
00774 08F7 	; Entry: W pointer to destination
00775 08F7 	; Exit: none
00776 08F7 	; RAM used: Param71, Param78, Param79, Param7A (verified 1/23/03)
00777 08F7 	; Calls:(1+1) getch_net
00778 08F7 	;
00779 08F7 00FA 	get_4Data	MOVWF	Param7A
00780 08F8 3004 		MOVLW	0x04
00781 08F9 	;
00782 08F9 	;=========================================================================
00783 08F9 	; Gets W bytes pointed to by Param7A with getch_net
00784 08F9 	; Entry: Param7A=Dest, W=Bytes to Get
00785 08F9 	; Exit: none
00786 08F9 	; RAM used: Param71, Param78, Param79, Param7A (verified 1/25/03)
00787 08F9 	; Calls:(1+1) getch_net
00788 08F9 	;
00789 08F9 00F9 	get_Ndata	MOVWF	Param79
00790 08FA 	;
00791 08FA 	;==========================================================================================
00792 08FA 	; gets bytes with getch_net and saves them to Param7A..Param7A+Param79-1
00793 08FA 	; Entry: Param7A=ptr to data, Param79=length of data
00794 08FA 	; Exit: none
00795 08FA 	; RAM used: Param71, Param78, Param79, Param7A, FSR (verified 1/23/03)
00796 08FA 	; Calls:(1+1) getch_net
00797 08FA 	;
00798 08FA 087A 	get_data	MOVF	Param7A,W
00799 08FB 0084 		MOVWF	FSR
00800 08FC 1383 		BCF	STATUS,IRP
00801 08FD 20A4 	get_data_1	CALL	getch_net
00802 08FE 0080 		MOVWF	INDF
00803 08FF 0A84 		INCF	FSR,F
00804 0900 0BF9 		DECFSZ	Param79,F
00805 0901 28FD 		GOTO	get_data_1
00806 0902 0008 		RETURN
00807 0903 	;
00808 0903 	;====================================================================================================
00809 0903 	; Move bytes from bank 0 or 1 to somewhere else in bank 0 or 1
00810 0903 	; Entry: Param79=Bytes to move, Param7A=destination, Param7B=Source
00811 0903 	; Exit: none
00812 0903 	; RAM used: Param78, Param79, Param7A, Param7B, FSR (verified 1/24/03)
00813 0903 	; Calls:(0) none
00814 0903 	;
00815 0903 1383 	MemMove_Low	BCF	STATUS,IRP
00816 0904 087B 	MemMove_Low_L	MOVF	Param7B,W
00817 0905 0084 		MOVWF	FSR
00818 0906 0800 		MOVF	INDF,W
00819 0907 00F8 		MOVWF	Param78
00820 0908 087A 		MOVF	Param7A,W
00821 0909 0084 		MOVWF	FSR
00822 090A 0878 		MOVF	Param78,W
00823 090B 0080 		MOVWF	INDF
00824 090C 0AFA 		INCF	Param7A,F
00825 090D 0AFB 		INCF	Param7B,F
00826 090E 0BF9 		DECFSZ	Param79,F
00827 090F 2904 		GOTO	MemMove_Low_L
00828 0910 0008 		RETURN
00829 0911 	;
00830 0911 	;====================================================================================================
00831 0911 	; Move bytes from bank 0 or 1 to SRAM
00832 0911 	; Entry: SRAM_Addr=first SRAM byte, Param7A=Bytes to move, FSR=first byte of data in ram
00833 0911 	; Exit: none
00834 0911 	; RAM used: Param78, Param7A, FSR (verified 1/25/03)
00835 0911 	; Calls:(1+1) SRAM_WritePI
00836 0911 	;
00837 0911 1383 	MemMove_SRAM	BCF	STATUS,IRP
00838 0912 0800 	MemMove_SRAM_L	MOVF	INDF,W
00839 0913 		mCall1To0	SRAM_WritePI
CastleGate.asm   "NIC Stuff"                                             Page: 108
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

00840 0917 0A84 		INCF	FSR,F
00841 0918 0BFA 		DECFSZ	Param7A,F
00842 0919 2912 		GOTO	MemMove_SRAM_L
00843 091A 0008 		RETURN
00844 091B 	;
00845 091B 	;====================================================================================================
00846 091B 	; Move bytes from SRAM to bank 0 or 1
00847 091B 	; Entry: SRAM_Addr=first SRAM byte, Param7A=Bytes to move, FSR=first dest of data in ram
00848 091B 	; Exit: none
00849 091B 	; RAM used: Param7A, FSR (verified 2/4/03)
00850 091B 	; Calls:(1+1) SRAM_ReadPI
00851 091B 	;
00852 091B 1383 	MemMoveFrom_SRAM	BCF	STATUS,IRP
00853 091C 	MemMoveFrom_SRAM_L	mCall1To0	SRAM_ReadPI
00854 0920 0080 		MOVWF	INDF
00855 0921 0A84 		INCF	FSR,F
00856 0922 0BFA 		DECFSZ	Param7A,F
00857 0923 291C 		GOTO	MemMoveFrom_SRAM_L
00858 0924 0008 		RETURN
00859 0925 	;
00860 0925 	;====================================================================================================
00861 0925 	; Compare bytes from bank 0 or 1 to SRAM, return 0 not matched
00862 0925 	; Entry: SRAM_Addr=first SRAM byte, Param7A=Bytes to test, FSR=first byte of data in ram
00863 0925 	; Exit: Param78=(matched=0x01, not matched=0x00)
00864 0925 	; RAM used: Param78, Param7A, FSR (verified 1/24/03)
00865 0925 	; Calls:(1+1) SRAM_ReadPI (1+1)
00866 0925 	;
00867 0925 1383 	MemComp_SRAM	BCF	STATUS,IRP
00868 0926 	MemComp_SRAM_L	mCall1To0	SRAM_ReadPI
00869 092A 0200 		SUBWF	INDF,W
00870 092B 1D03 		BTFSS	STATUS,Z	;skip if a match
00871 092C 2943 		GOTO	MemComp_Low_Not
00872 092D 0A84 		INCF	FSR,F
00873 092E 0BFA 		DECFSZ	Param7A,F
00874 092F 2926 		GOTO	MemComp_SRAM_L
00875 0930 2940 		GOTO	MemComp_Low_found
00876 0931 	;
00877 0931 	;====================================================================================================
00878 0931 	; Compare bytes from bank 0 or 1 to somewhere else in bank 0 or 1, return 0 not matched
00879 0931 	; Entry: Param79=Bytes to test, Param7A=block 1, Param7B=block 2
00880 0931 	; Exit: Param78=(matched=0x01, not matched=0x00)
00881 0931 	; RAM used: Param78, Param79, Param7A, Param7B, FSR (verified 1/24/03)
00882 0931 	; Calls:(0) none
00883 0931 	;
00884 0931 1383 	MemComp_Low	BCF	STATUS,IRP
00885 0932 087B 	MemComp_Low_L	MOVF	Param7B,W
00886 0933 0084 		MOVWF	FSR
00887 0934 0800 		MOVF	INDF,W
00888 0935 00F8 		MOVWF	Param78
00889 0936 087A 		MOVF	Param7A,W
00890 0937 0084 		MOVWF	FSR
00891 0938 0878 		MOVF	Param78,W
00892 0939 0200 		SUBWF	INDF,W
00893 093A 1D03 		BTFSS	STATUS,Z	;skip if a match
00894 093B 2943 		GOTO	MemComp_Low_Not
00895 093C 0AFA 		INCF	Param7A,F
00896 093D 0AFB 		INCF	Param7B,F
00897 093E 0BF9 		DECFSZ	Param79,F
00898 093F 2932 		GOTO	MemComp_Low_L
00899 0940 3001 	MemComp_Low_found	MOVLW	0x01
00900 0941 00F8 		MOVWF	Param78
00901 0942 0008 		RETURN
00902 0943 01F8 	MemComp_Low_Not	CLRF	Param78
00903 0944 0008 		RETURN
00904 0945 	;
00905 0945 	;====================================================================================================
00906 0945 	; Match an incoming word value, return Param78=0x01 if matched return 0 not matched, or end of message
00907 0945 	;
00908 0945 	; Entry: Param75 high byte (first byte) to match, W low byte (second byte) to match
00909 0945 	; Exit: Param78=(matched & not atend)
00910 0945 	; RAM used: Param71, Param75, Param78, Param79 (verified 1/23/03)
00911 0945 	; Calls:(1+2) getch_net
00912 0945 	;
00913 0945 00F9 	match_word	MOVWF	Param79
00914 0946 214B 		CALL	match_byteW_2
00915 0947 1C78 		BTFSS	Param78,0
00916 0948 0008 		RETURN
00917 0949 0879 		MOVF	Param79,W
00918 094A 	;
00919 094A 	;====================================================================================================
00920 094A 	; Match an incoming byte value, return 0 not matched, or end of message
00921 094A 	; Entry: W byte to match
00922 094A 	; Exit: Param78=(matched & not atend)
00923 094A 	; RAM used: Param71, Param75, Param78 (verified 1/23/03)
00924 094A 	; Calls:(1+1) getch_net
00925 094A 	;
00926 094A 00F5 	match_byteW	MOVWF	Param75
00927 094B 20A4 	match_byteW_2	CALL	getch_net
00928 094C 01F8 		CLRF	Param78	;assume error
00929 094D 02F5 		SUBWF	Param75,F
00930 094E 1D03 		BTFSS	STATUS,Z
00931 094F 0008 		RETURN
00932 0950 18A6 		BTFSC	atend
00933 0951 0008 		RETURN
00934 0952 1478 		BSF	Param78,0
00935 0953 0008 		RETURN
00936 0954 	;
00937 0954 	;=========================================================================================
00938 0954 	; Match an incoming data value to myip, return 0 not matched, or end of message
00939 0954 	; Entry: none
CastleGate.asm   "NIC Stuff"                                             Page: 109
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

00940 0954 	; Exit: Param78=(matched & not atend)
00941 0954 	; RAM used: Param71, Param75, Param78, Param79, Param7A (verified 1/23/03)
00942 0954 	; Calls:(1+2) match_byteW
00943 0954 	;
00944 0954 3030 	match_MyIP	MOVLW	myip_b3
00945 0955 	;
00946 0955 	;=========================================================================================
00947 0955 	; Match 4 incoming data bytes to data pointed to by W, return 0 not matched, or end of message
00948 0955 	; Entry: none
00949 0955 	; Exit: Param78=(matched & not atend)
00950 0955 	; RAM used: Param71, Param75, Param78, Param79, Param7A (verified 1/23/03)
00951 0955 	; Calls:(1+2) match_byteW
00952 0955 	;
00953 0955 00FA 	match_4Data	MOVWF	Param7A
00954 0956 3004 		MOVLW	0x04
00955 0957 00F9 		MOVWF	Param79
00956 0958 	;
00957 0958 	;fall through to match_data
00958 0958 	;
00959 0958 	;==========================================================================================
00960 0958 	; matches bytes from getch_net to Param7A..Param7A+Param79-1,  return 0 not matched, or end of message
00961 0958 	; Entry: Param7A=ptr to data, Param79=length of data
00962 0958 	; Exit: Param78,0 1=match 0=not matched
00963 0958 	; RAM used: Param71, Param75, Param78, Param79, Param7A, FSR (verified 1/23/03)
00964 0958 	; Calls:(1+2) match_byteW
00965 0958 	;
00966 0958 087A 	match_data	MOVF	Param7A,W
00967 0959 0084 		MOVWF	FSR
00968 095A 1383 		BCF	STATUS,IRP
00969 095B 0800 		MOVF	INDF,W
00970 095C 214A 		CALL	match_byteW
00971 095D 1C78 		BTFSS	Param78,0
00972 095E 0008 		RETURN
00973 095F 0AFA 		INCF	Param7A,F
00974 0960 0BF9 		DECFSZ	Param79,F
00975 0961 2958 		GOTO	match_data
00976 0962 0008 		RETURN
00977 0963 	; 
00978 0963 	;===================================================================================================
00979 0963 	; Skip an incoming value, return 0 if end of message
00980 0963 	; Entry: none
00981 0963 	; Exit: Param78=atend
00982 0963 	; RAM used: Param71, Param78 (verified 1/23/03)
00983 0963 	; Calls:(1+1) getch_net
00984 0963 	;
00985 0963 20A4 	skip_6bytes	CALL	getch_net
00986 0964 20A4 		CALL	getch_net
00987 0965 20A4 	skip_lword	CALL	getch_net
00988 0966 20A4 		CALL	getch_net
00989 0967 20A4 	skip_word	CALL	getch_net
00990 0968 20A4 	skip_byte	CALL	getch_net
00991 0969 01F8 		CLRF	Param78	;assume atend
00992 096A 1CA6 		BTFSS	atend	; return(!atend);
00993 096B 1478 		BSF	Param78,0	;OK return(true)
00994 096C 0008 		RETURN
00995 096D 	;
00996 096D 	;================================================================================================
00997 096D 	; Put a byte into the network buffer at (txbuff+txin) RAM bank 1
00998 096D 	; Entry: W = byte to put
00999 096D 	; Exit: value from W is in Param78 & W (aka W is unchanged)
01000 096D 	; RAM used: Param78, FSR (verified 1/23/03)
01001 096D 	; Calls:(0+0) check_byte_W
01002 096D 	; 
01003 096D 00F8 	putch_net_W	MOVWF	Param78	;save the byte to be put
01004 096E 		mBank0
01005 0970 	; if (txin < TXBUFFLEN) 
01006 0970 3040 		MOVLW	TXBUFFLEN
01007 0971 0254 		SUBWF	txin,W
01008 0972 1803 		BTFSC	STATUS,C
01009 0973 297B 		GOTO	putch_net_W_1
01010 0974 0854 		MOVF	txin,W	; txbuff[txin++] = b;
01011 0975 0AD4 		INCF	txin,F
01012 0976 3EA0 		ADDLW	txbuff	;0x0A0.. RAM
01013 0977 0084 		MOVWF	FSR
01014 0978 1383 		BCF	STATUS,IRP
01015 0979 0878 		MOVF	Param78,W
01016 097A 0080 		MOVWF	INDF
01017 097B 0878 	putch_net_W_1	MOVF	Param78,W	; check_byte(b); 
01018 097C 28C1 		GOTO	check_byte_W
01019 097D 	;
01020 097D 	;====================================================================================================
01021 097D 	; Sends rack to putch_net_W
01022 097D 	; Entry: none
01023 097D 	; Exit: none
01024 097D 	; RAM used: Param78, Param79, Param7A, FSR (verified 1/23/03)
01025 097D 	; Calls:(1+0) putch_net_W
01026 097D 	;
01027 097D 3062 	put_rack	MOVLW	rack_b3
01028 097E 2984 		GOTO	put_4Data
01029 097F 	;
01030 097F 	;====================================================================================================
01031 097F 	; Sends rseq to putch_net_W
01032 097F 	; Entry: none
01033 097F 	; Exit: none
01034 097F 	; RAM used: Param78, Param79, Param7A, FSR (verified 1/23/03)
01035 097F 	; Calls:(1+0) putch_net_W
01036 097F 	;
01037 097F 305E 	put_rseq	MOVLW	rseq_b3
01038 0980 2984 		GOTO	put_4Data
01039 0981 	;
CastleGate.asm   "NIC Stuff"                                             Page: 110
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

01040 0981 	;====================================================================================================
01041 0981 	; Sends remip to putch_net_W
01042 0981 	; Entry: none
01043 0981 	; Exit: none
01044 0981 	; RAM used: Param78, Param79, Param7A, FSR (verified 1/23/03)
01045 0981 	; Calls:(1+0) putch_net_W
01046 0981 	;
01047 0981 3056 	put_remip	MOVLW	remip_b3
01048 0982 2984 		GOTO	put_4Data
01049 0983 	;
01050 0983 	;====================================================================================================
01051 0983 	; Sends myip to putch_net_W
01052 0983 	; Entry: none
01053 0983 	; Exit: none
01054 0983 	; RAM used: Param78, Param79, Param7A, FSR (verified 1/23/03)
01055 0983 	; Calls:(1+0) putch_net_W
01056 0983 	;
01057 0983 3030 	put_MyIP	MOVLW	myip_b3
01058 0984 	;
01059 0984 	;==========================================================================================
01060 0984 	; Sends 4 bytes pointed to by W to putch_net_W
01061 0984 	; Entry: W = ptr
01062 0984 	; Exit: none
01063 0984 	; RAM used: Param78, Param79, Param7A, FSR (verified 1/23/03)
01064 0984 	; Calls:(1+0) putch_net_W
01065 0984 	;
01066 0984 00FA 	put_4Data	MOVWF	Param7A
01067 0985 3004 		MOVLW	0x04
01068 0986 00F9 		MOVWF	Param79
01069 0987 	;
01070 0987 	;==========================================================================================
01071 0987 	; Sends bytes from Param7A to Param7A+Param79-1 to putch_net_W
01072 0987 	; Entry: Param7A=ptr to data, Param79=length of data
01073 0987 	; Exit: none
01074 0987 	; RAM used: Param78, Param79, Param7A, FSR (verified 1/23/03)
01075 0987 	; Calls:(1+0) putch_net_W
01076 0987 	;
01077 0987 1383 	put_data	BCF	STATUS,IRP
01078 0988 087A 		MOVF	Param7A,W
01079 0989 0084 		MOVWF	FSR
01080 098A 0800 		MOVF	INDF,W
01081 098B 216D 		CALL	putch_net_W
01082 098C 0AFA 		INCF	Param7A,F
01083 098D 0BF9 		DECFSZ	Param79,F
01084 098E 2987 		GOTO	put_data
01085 098F 0008 		RETURN
01086 0990 	; 
01087 0990 	;==========================================================================================
01088 0990 	; Sends bytes from Param7A to Param7A+Param79-1 to putch_net_W (banks 2 and 3)
01089 0990 	; Entry: Param7A=ptr to data, Param79=length of data
01090 0990 	; Exit: none
01091 0990 	; RAM used: Param78, Param79, Param7A, FSR (verified 1/23/03)
01092 0990 	; Calls:(1+0) putch_net_W
01093 0990 	;
01094 0990 1783 	put_data2	BSF	STATUS,IRP
01095 0991 087A 		MOVF	Param7A,W
01096 0992 0084 		MOVWF	FSR
01097 0993 0800 		MOVF	INDF,W
01098 0994 216D 		CALL	putch_net_W
01099 0995 0AFA 		INCF	Param7A,F
01100 0996 0BF9 		DECFSZ	Param79,F
01101 0997 2990 		GOTO	put_data2
01102 0998 0008 		RETURN
01103 0999 	; 
01104 0999 	;===================================================================================
01105 0999 	; Put the given data into the NIC's RAM
01106 0999 	; Entry: Param78=ptr to first byte, Param79=Number of bytes to send
01107 0999 	; Exit:
01108 0999 	; RAM used: Param71, Param78, Param79, FSR (verified 1/23/03)
01109 0999 	; Calls:(1+0) outnic_ISR40, outnic_RBCR0_W, outnic_RBCR1_0, outnic_CMDR_W, outnicD78W, innic
01110 0999 	;
01111 0999 0879 	putnic_data	MOVF	Param79,W	; Round length up to an even value
01112 099A 3901 		ANDLW	0x01	
01113 099B 07F9 		ADDWF	Param79,F
01114 099C 	;
01115 099C 2768 		CALL	outnic_ISR40	;Clear remote DMA interrupt flag
01116 099D 0879 		MOVF	Param79,W
01117 099E 2754 		CALL	outnic_RBCR0_W	; outnic(RBCR0, len); Byte count
01118 099F 274F 		CALL	outnic_RBCR1_0	; outnic(RBCR1, 0);
01119 09A0 3012 		MOVLW	0x12	; outnic(CMDR, 0x12) Start, DMA remote write
01120 09A1 2758 		CALL	outnic_CMDR_W
01121 09A2 	; while (len--)  O/P bytes
01122 09A2 0878 		MOVF	Param78,W
01123 09A3 0084 		MOVWF	FSR	; 78 is now free
01124 09A4 1383 		BCF	STATUS,IRP
01125 09A5 		
01126 09A5 0800 	putnic_data_L1	MOVF	INDF,W	; outnic(DATAPORT, *data++); 
01127 09A6 00F8 		MOVWF	Param78
01128 09A7 3010 		MOVLW	DATAPORT
01129 09A8 275B 		CALL	outnicD78W
01130 09A9 	;
01131 09A9 0A84 		INCF	FSR,F
01132 09AA 0BF9 		DECFSZ	Param79,F
01133 09AB 29A5 		GOTO	putnic_data_L1
01134 09AC 	;
01135 09AC 	; Count = 255; Done: must ensure DMA complete
01136 09AC 30FF 		MOVLW	0xFF
01137 09AD 00F9 		MOVWF	Param79	;reuse 79 as Count
01138 09AE 	; while (Count && (innic(ISR)&0x40)==0) 
01139 09AE 2718 	putnic_data_L2	CALL	innic_ISR
CastleGate.asm   "NIC Stuff"                                             Page: 111
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

01140 09AF 1A78 		BTFSC	Param78,4
01141 09B0 0008 		RETURN
01142 09B1 0BF9 		DECFSZ	Param79,F	; Count--; 
01143 09B2 29AE 		GOTO	putnic_data_L2
01144 09B3 0008 		RETURN
01145 09B4 	;
01146 09B4 	;===================================================================================
01147 09B4 	; Put Ethernet packet into buffer given data at txbuff and len Param7D
01148 09B4 	;
01149 09B4 	; Entry: Dest(MAC) nicin.eth.srce, nicin.eth.pcol, Data at txbuff, dlen=txin
01150 09B4 	; Exit: none
01151 09B4 	; RAM used: Param71, Param78, Param79, Param7A, Param7B (verified 1/23/03)
01152 09B4 	; Calls:(1+1) outnic_ISR_0A(1+0), setnic_addr(1+1), putnic_data(1+1)
01153 09B4 	;
01154 09B4 	;  starting at the beginning (TXSTART) putnic_data:
01155 09B4 	;   Target's MAC address (6 bytes) nicin.eth.srce
01156 09B4 	;   My MAC Address (6 bytes) myeth
01157 09B4 	;   Ethernet proticol (2 bytes) nicin.eth.pcol
01158 09B4 	;   The Data starting at txbuff (Param7D bytes)
01159 09B4 	;   
01160 09B4 2765 	put_ether	CALL	outnic_ISR_0A	;Clear interrupt flags
01161 09B5 3040 		MOVLW	TXSTART	; setnic_addr(TXSTART); 
01162 09B6 00FB 		MOVWF	Param7B	
01163 09B7 01FA 		CLRF	Param7A	; low byte
01164 09B8 2014 		CALL	setnic_addr
01165 09B9 	;
01166 09B9 3042 		MOVLW	nicin.eth.srce	; putnic_data(nicin.eth.srce, MACLEN); 
01167 09BA 00F8 		MOVWF	Param78
01168 09BB 3006 		MOVLW	MACLEN
01169 09BC 00F9 		MOVWF	Param79
01170 09BD 2199 		CALL	putnic_data
01171 09BE 	;
01172 09BE 302A 		MOVLW	myeth0	; putnic_data(myeth, MACLEN);
01173 09BF 00F8 		MOVWF	Param78
01174 09C0 3006 		MOVLW	MACLEN
01175 09C1 00F9 		MOVWF	Param79
01176 09C2 2199 		CALL	putnic_data
01177 09C3 	;
01178 09C3 3048 		MOVLW	nicin.eth.pcol	; putnic_data(&nicin.eth.pcol, 2); 
01179 09C4 00F8 		MOVWF	Param78
01180 09C5 3002 		MOVLW	0x02
01181 09C6 00F9 		MOVWF	Param79
01182 09C7 2199 		CALL	putnic_data
01183 09C8 	;
01184 09C8 30A0 		MOVLW	txbuff	; putnic_data(data, dlen); 
01185 09C9 00F8 		MOVWF	Param78
01186 09CA 0854 		MOVF	txin,W
01187 09CB 00F9 		MOVWF	Param79
01188 09CC 2999 		GOTO	putnic_data
01189 09CD 	;
01190 09CD 	;======================================================================================
01191 09CD 	; Transmit the Ethernet frame
01192 09CD 	; Entry:  dlen.l=Param7C, dlen.h=Param7D
01193 09CD 	; Exit:
01194 09CD 	; RAM used: Param71, Param78, Param7C, Param7D (verified 1/23/03)
01195 09CD 	; Calls:(1+0) outnicD78W, outnic_CMDR_W
01196 09CD 	;
01197 09CD 300E 	xmit_ether	MOVLW	ETHHDR_LEN	; Add ethernet frame header len to data len
01198 09CE 07FC 		ADDWF	Param7C,F	;  dlen = dlen+MACLEN+MACLEN+2
01199 09CF 1803 		BTFSC	STATUS,C	;  Dest MAC, Src MAC, pcol
01200 09D0 0AFD 		INCF	Param7D,F
01201 09D1 	; if (dlen < MINFRAME) 
01202 09D1 08FD 		MOVF	Param7D,F
01203 09D2 1D03 		BTFSS	STATUS,Z
01204 09D3 29DA 		GOTO	xmit_ether_1	;>=0x100 bytes
01205 09D4 303C 		MOVLW	MINFRAME
01206 09D5 027C 		SUBWF	Param7C,W
01207 09D6 1803 		BTFSC	STATUS,C
01208 09D7 29DA 		GOTO	xmit_ether_1	;>=MINFRAME
01209 09D8 	;
01210 09D8 303C 		MOVLW	MINFRAME	; dlen = MINFRAME; Constrain length
01211 09D9 00FC 		MOVWF	Param7C
01212 09DA 	;
01213 09DA 087C 	xmit_ether_1	MOVF	Param7C,W	; outnic(TBCR0, dlen.l) Set Tx length regs
01214 09DB 00F8 		MOVWF	Param78
01215 09DC 3005 		MOVLW	TBCR0
01216 09DD 275B 		CALL	outnicD78W
01217 09DE 	;									
01218 09DE 087D 		MOVF	Param7D,W	; outnic(TBCR1, dlen.h);
01219 09DF 00F8 		MOVWF	Param78
01220 09E0 3006 		MOVLW	TBCR1
01221 09E1 275B 		CALL	outnicD78W
01222 09E2 3024 		MOVLW	NICTXCMD	; Transmit the packet
01223 09E3 2F58 		GOTO	outnic_CMDR_W
01224 09E4 	;
01225 09E4 	;  
01226 09E4 	;=====================================================================================
01227 09E4 	;=====================================================================================
01228 09E4 	; Scan the ARP cache for an IP(remip_b0) load into ram if found.
01229 09E4 	; If IP=255 then make it MAC:FF:FF:FF:FF:FF:FF
01230 09E4 	;
01231 09E4 	; Entry: remip_b0=IP of Target
01232 09E4 	; Exit: if Found ARP record is moved into ram
01233 09E4 	;	if pending try again
01234 09E4 	;	copy ar_sha to nicin.eth.srce
01235 09E4 	;       if not found try to find it on network
01236 09E4 	;       ae_state will be pending or resolved
01237 09E4 	;
01238 09E4 	; RAM used: Param70, Param78, Param79, Param7A, Param7B, Param7C, FSR
01239 09E4 	; Calls:(1+4) arp_find(1+3), arp_get(1+2), MemMove_Low (1+0), send_ARP_Req(1+4), arp_add_or_replace(1+4)
CastleGate.asm   "NIC Stuff"                                             Page: 112
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

01240 09E4 	;
01241 09E4 	Locate_ARP	mBank0
01242 09E6 	; Subnet mask is 255.255.255.0 so use the first
01243 09E6 	; three octets of my IP address
01244 09E6 3003 		MOVLW	0x03	; count
01245 09E7 00F9 		MOVWF	Param79
01246 09E8 30DB 		MOVLW	ar_spa	; dest
01247 09E9 00FA 		MOVWF	Param7A
01248 09EA 3030 		MOVLW	myip_b3	; source
01249 09EB 00FB 		MOVWF	Param7B
01250 09EC 2103 		CALL	MemMove_Low	; do the move
01251 09ED 0859 		MOVF	remip_b0,W
01252 09EE 1683 		BSF	_RP0	;bank 1
01253 09EF 00DE 		MOVWF	ar_spa+3
01254 09F0 	;
01255 09F0 	; handle broadcast address
01256 09F0 1283 		BCF	_RP0	;bank 0
01257 09F1 3CFF 		SUBLW	0xFF
01258 09F2 		SKPNZ		;IP Address = 255?
01259 09F3 2A15 		GOTO	Locate_ARP_255	; Yes
01260 09F4 	;
01261 09F4 221F 		CALL	arp_find
01262 09F5 	;
01263 09F5 08F8 		MOVF	Param78,F
01264 09F6 		SKPZ
01265 09F7 29FC 		GOTO	Locate_ARP_Gotit	
01266 09F8 	;
01267 09F8 1683 		BSF	_RP0	;bank 1
01268 09F9 01D1 		CLRF	ae_attempts
01269 09FA 1283 		BCF	_RP0	;bank 0
01270 09FB 2ADC 		GOTO	send_ARP_Req	;not found make first attempt to 
01271 09FC 				; find it on the network
01272 09FC 	;
01273 09FC 226D 	Locate_ARP_Gotit	CALL	arp_get	;move arp record into ram
01274 09FD 1683 		BSF	_RP0	;bank 1
01275 09FE 3001 		MOVLW	AS_PENDING
01276 09FF 0250 		SUBWF	ae_state,W	;W=ae_state-AS_PENDING
01277 0A00 1283 		BCF	_RP0	;bank 0
01278 0A01 		SKPZ		;skip if pending
01279 0A02 2A04 		GOTO	NotPending	;not pending must be resolved
01280 0A03 	;
01281 0A03 22DC 		CALL	send_ARP_Req	; try the network again
01282 0A04 	;
01283 0A04 	; This record must be resolved, we wouldn't have loaded a free one.
01284 0A04 3006 	NotPending	MOVLW	MACLEN	;move the hardware address (MAC)
01285 0A05 00F9 		MOVWF	Param79	; to nicin.eth.srce
01286 0A06 30D5 		MOVLW	ar_sha
01287 0A07 00FB 		MOVWF	Param7B
01288 0A08 3042 		MOVLW	nicin.eth.srce
01289 0A09 00FA 		MOVWF	Param7A
01290 0A0A 2103 		CALL	MemMove_Low
01291 0A0B 	;
01292 0A0B 1683 		BSF	_RP0	;bank 1
01293 0A0C 		if ARPsNeverDie
01294 0A0C 08D2 		MOVF	ae_ttl,F
01295 0A0D 		else
01297 0A0D 		endif
01298 0A0D 		SKPNZ
01299 0A0E 01D0 		CLRF	ae_state	; if TTL is 0x00 mark this record free
01300 0A0F 2264 		CALL	arp_add_or_replace
01301 0A10 1683 	Locate_ARP_MarkResvd	BSF	_RP0	;bank 1
01302 0A11 3002 		MOVLW	AS_RESOLVED	; change the ram version of this
01303 0A12 00D0 		MOVWF	ae_state	; record back to resolved
01304 0A13 1283 		BCF	_RP0	;bank 0
01305 0A14 0008 		RETURN
01306 0A15 	;
01307 0A15 30FF 	Locate_ARP_255	MOVLW	0xFF
01308 0A16 00C2 		MOVWF	nicin.eth.srce
01309 0A17 00C3 		MOVWF	nicin.eth.srce+1
01310 0A18 00C4 		MOVWF	nicin.eth.srce+2
01311 0A19 00C5 		MOVWF	nicin.eth.srce+3
01312 0A1A 00C6 		MOVWF	nicin.eth.srce+4
01313 0A1B 00C7 		MOVWF	nicin.eth.srce+5
01314 0A1C 2A10 		GOTO	Locate_ARP_MarkResvd
01315 0A1D 	;
01316 0A1D 	;=====================================================================================							 
01317 0A1D 	; Find an free ARP cache record
01318 0A1D 	;
01319 0A1D 	; Entry: none
01320 0A1D 	; Exit: Param78=(0=not found, cache entry #  1..32)
01321 0A1D 	; RAM used:Param70, Param78, Param79, Param7A, FSR (verified 1/25/03)
01322 0A1D 	; Calls:(1+1) SRAM_Read, SRAM_OffsetAddr, SRAM_ReadPI
01323 0A1D 	; 
01324 0A1D 1470 	arp_findfree	BSF	Param70,0	;look for a free one
01325 0A1E 2A20 		GOTO	arp_find_A	
01326 0A1F 	;
01327 0A1F 	;=====================================================================================
01328 0A1F 	; Find an ARP in the ARP cache
01329 0A1F 	;
01330 0A1F 	; Entry: ar_spa
01331 0A1F 	; Exit: Param78=(0=not found, cache entry #  1..32)
01332 0A1F 	; RAM used:Param70, Param78, Param79, Param7A, FSR (verified 1/25/03)
01333 0A1F 	; Calls:(1+1) SRAM_Read(1+1), SRAM_OffsetAddr(1+0), SRAM_ReadPI (1+1)
01334 0A1F 	; 
01335 0A1F 1070 	arp_find	BCF	Param70,0	;don't look for a free one
01336 0A20 	arp_find_A	mBank3
01337 0A22 3000 		MOVLW	high evARPcache
01338 0A23 009F 		MOVWF	SRAM_Addr2
01339 0A24 30F8 		MOVLW	low evARPcache
01340 0A25 009E 		MOVWF	SRAM_Addr1
CastleGate.asm   "NIC Stuff"                                             Page: 113
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

01341 0A26 019D 		CLRF	SRAM_Addr0
01342 0A27 3001 		MOVLW	0x01
01343 0A28 00F9 		MOVWF	Param79	;entry 1
01344 0A29 	arp_find_L1	mCall1To0	SRAM_Read
01345 0A2D 3C00 		SUBLW	AS_FREE
01346 0A2E 1870 		BTFSC	Param70,0	;looking for a free one
01347 0A2F 2A5A 		GOTO	arp_find_Free
01348 0A30 1903 		BTFSC	STATUS,Z	;skip if entry is not free
01349 0A31 2A4F 		GOTO	arp_find_next	; it was free
01350 0A32 	;
01351 0A32 300B 		MOVLW	ar_spa-ae_state	;0x0B
01352 0A33 		mCall1To0	SRAM_OffsetAddr	;add W to SRAM address
01353 0A37 3004 		MOVLW	IPAddrLEN
01354 0A38 00FA 		MOVWF	Param7A	;len
01355 0A39 30DB 		MOVLW	ar_spa	; Source Protocol Address
01356 0A3A 0084 		MOVWF	FSR
01357 0A3B 	;This would put the 8th address on the stack
01358 0A3B 	;	CALL	MemComp_SRAM	;Param78=(1=matched, 0=not)
01359 0A3B 	; so do it in-line.
01360 0A3B 01F8 		CLRF	Param78	;default to not matched
01361 0A3C 1383 		BCF	STATUS,IRP
01362 0A3D 	arp_find_L2	mCall1To0	SRAM_ReadPI
01363 0A41 0200 		SUBWF	INDF,W
01364 0A42 1D03 		BTFSS	STATUS,Z	;skip if a match
01365 0A43 2A49 		GOTO	arp_find_noMatch
01366 0A44 0A84 		INCF	FSR,F
01367 0A45 0BFA 		DECFSZ	Param7A,F
01368 0A46 2A3D 		GOTO	arp_find_L2
01369 0A47 3001 		MOVLW	0x01
01370 0A48 00F8 		MOVWF	Param78
01371 0A49 	;
01372 0A49 	;fix the SRAM address to point to the beginning of this record
01373 0A49 30F0 	arp_find_noMatch	MOVLW	ARP_TELEN_mask
01374 0A4A 		mBank3
01375 0A4C 059D 		ANDWF	SRAM_Addr0,F
01376 0A4D 1878 		BTFSC	Param78,0	;matched?
01377 0A4E 2A5F 		GOTO	arp_find_found	;yes
01378 0A4F 	;
01379 0A4F 3020 	arp_find_next	MOVLW	ARP_TSIZE
01380 0A50 0279 		SUBWF	Param79,W	;W=Param79-W
01381 0A51 1903 		BTFSC	STATUS,Z	;last entry?
01382 0A52 2A5D 		GOTO	arp_find_not	;yes
01383 0A53 0AF9 		INCF	Param79,F
01384 0A54 3010 		MOVLW	ARP_TELEN
01385 0A55 		mCall1To0	SRAM_OffsetAddr	;add W to SRAM address
01386 0A59 2A29 		GOTO	arp_find_L1
01387 0A5A 	;
01388 0A5A 1903 	arp_find_Free	BTFSC	STATUS,Z	;skip if entry is not free
01389 0A5B 2A5F 		GOTO	arp_find_found	; it was free
01390 0A5C 2A4F 		GOTO	arp_find_next
01391 0A5D 		GOTO	arp_find_next
01392 0A5D 01F8 	arp_find_not	CLRF	Param78
01393 0A5E 2A61 		GOTO	arp_find_end
01394 0A5F 	;
01395 0A5F 0879 	arp_find_found	MOVF	Param79,W
01396 0A60 00F8 		MOVWF	Param78
01397 0A61 	S1_Bank0Rtn
01398 0A61 	arp_find_end	mBank0
01399 0A63 0008 		RETURN
01400 0A64 	;
01401 0A64 	;====================================================================================
01402 0A64 	;Add this AR address pair to the cache
01403 0A64 	; if this IP is found in the cache then replace the arp record
01404 0A64 	; if this IP is not found then add it to the cache
01405 0A64 	;
01406 0A64 	; Entry: The ARP record (ae_state..ar_spa)
01407 0A64 	; Exit: none
01408 0A64 	; RAM used:Param70, Param78, Param79, Param7A, FSR (verified 1/25/03)
01409 0A64 	; Calls:(1+2) arp_find(1+2), arp_findfree(1+2) (SRAM_Read, SRAM_OffsetAddr, MemComp_SRAM),
01410 0A64 	;	 MemMove_SRAM (SRAM_WritePI)
01411 0A64 	;
01412 0A64 221F 	arp_add_or_replace	CALL	arp_find
01413 0A65 0878 		MOVF	Param78,W	;0=not found
01414 0A66 1903 		BTFSC	STATUS,Z	;skip if found
01415 0A67 	;
01416 0A67 	;=====================================================================================
01417 0A67 	; Add a new ARP record to the ARP cache
01418 0A67 	;
01419 0A67 	; Entry: The ARP record (ae_state..ar_spa)
01420 0A67 	; Exit: none
01421 0A67 	; RAM used:Param70, Param78, Param79, Param7A, FSR (verified 1/25/03)
01422 0A67 	; Calls:(1+2) arp_findfree (1+2),
01423 0A67 	;	 MemMove_SRAM (SRAM_WritePI), arp_Replace
01424 0A67 	; 
01425 0A67 221D 	arp_add	CALL	arp_findfree
01426 0A68 	;
01427 0A68 	;missing code: test for cache full & kill oldest
01428 0A68 	;
01429 0A68 	;====================================================================================
01430 0A68 	; Move an ARP record into ram 
01431 0A68 	; Entry: ARP record in ram (ae_state..ar_spa), SRAM_Addr
01432 0A68 	; Exit: none
01433 0A68 	; RAM used: Param78, Param7A, FSR (verified 2/4/03)
01434 0A68 	; Calls:(1+2) MemMove_SRAM(SRAM_WritePI)
01435 0A68 	;
01436 0A68 3010 	arp_Replace	MOVLW	ARP_TELEN
01437 0A69 00FA 		MOVWF	Param7A
01438 0A6A 30D0 		MOVLW	ae_state
01439 0A6B 0084 		MOVWF	FSR
01440 0A6C 2911 		GOTO	MemMove_SRAM
CastleGate.asm   "NIC Stuff"                                             Page: 114
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

01441 0A6D 	;
01442 0A6D 	;=====================================================================================
01443 0A6D 	; Move an ARP record into ram
01444 0A6D 	;
01445 0A6D 	; Entry: SRAM_Addr >> start of ARP record
01446 0A6D 	; Exit: ARP record in ram ae_state..ar_spa
01447 0A6D 	; RAM used: Param7A, FSR (verified 2/4/03)
01448 0A6D 	; Calls:(1+1) MemMoveFrom_SRAM(SRAM_ReadPI)
01449 0A6D 	;
01450 0A6D 3010 	arp_get	MOVLW	ARP_TELEN
01451 0A6E 00FA 		MOVWF	Param7A
01452 0A6F 30D0 		MOVLW	ae_state
01453 0A70 0084 		MOVWF	FSR
01454 0A71 291B 		GOTO	MemMoveFrom_SRAM
01455 0A72 	;
01456 0A72 	;=====================================================================================
01457 0A72 	; Handle an incoming ARP message
01458 0A72 	;
01459 0A72 	; Entry:
01460 0A72 	; Exit:
01461 0A72 	; RAM used: Param70:0, Param78, Param79, Param7A, Param7D, FSR
01462 0A72 	; Calls:(1+3) match_word(1+2), match_byteW(1+1), skip_6bytes, getch_net, putch_net_W,
01463 0A72 	;	put_ether, xmit_ether
01464 0A72 	;	
01465 0A72 	;
01466 0A72 	; ARP/RARP message format: this all goes into the Data field in the Ethernet Frame (type PCOL_ARP)
01467 0A72 	;   Hardware Type (2 bytes) ethernet=1, HTYPE
01468 0A72 	;   Proticol Type (2 bytes) IP type=0x0800, ARPPRO
01469 0A72 	;   Hardware Address Length (HLEN) (1 byte) ethernet=6, MACLEN
01470 0A72 	;   Proticol Addres Length (PLEN) (1 byte) IPv4=4, IPAddrLEN
01471 0A72 	;   Operation (2 bytes) 1 ARPREQ, 2 ARPRESP, 3 RARPREQ, or 4 RARPSESP
01472 0A72 	;   Sender's Hardware Address (MAC)
01473 0A72 	;   Sender's IP Address
01474 0A72 	;   Target's Hardware Address (MAC)
01475 0A72 	;   Target's IP Address (MAC)
01476 0A72 	;
01477 0A72 	; if (match_word(HTYPE) &&    Hardware type = HTYPE
01478 0A72 	arp_recv	
01479 0A72 		if ARPtesting
01486 0A72 		endif
01487 0A72 	;
01488 0A72 3000 		MOVLW	high HTYPE
01489 0A73 00F5 		MOVWF	Param75
01490 0A74 3001 		MOVLW	low HTYPE
01491 0A75 2145 		CALL	match_word
01492 0A76 1C78 		BTFSS	Param78,0
01493 0A77 0008 		RETURN
01494 0A78 	;
01495 0A78 	; match_word(ARPPRO) &&   ARP protocol = ARPPRO
01496 0A78 3008 		MOVLW	high ARPPRO
01497 0A79 00F5 		MOVWF	Param75
01498 0A7A 3000 		MOVLW	low ARPPRO
01499 0A7B 2145 		CALL	match_word
01500 0A7C 1C78 		BTFSS	Param78,0
01501 0A7D 0008 		RETURN
01502 0A7E 	;
01503 0A7E 	; Hardware & IP lengths 
01504 0A7E 3006 		MOVLW	MACLEN	; match_byte(MACLEN)
01505 0A7F 214A 		CALL	match_byteW
01506 0A80 1C78 		BTFSS	Param78,0
01507 0A81 0008 		RETURN
01508 0A82 	;
01509 0A82 3004 		MOVLW	IPAddrLEN	; match_byte(IPAddrLEN)
01510 0A83 214A 		CALL	match_byteW
01511 0A84 1C78 		BTFSS	Param78,0
01512 0A85 0008 		RETURN
01513 0A86 	;
01514 0A86 	; move the next 22 bytes ar_op..ar_tpa
01515 0A86 30D3 		MOVLW	ar_op
01516 0A87 00FA 		MOVWF	Param7A
01517 0A88 3016 		MOVLW	d'22'
01518 0A89 20F9 		CALL	get_Ndata
01519 0A8A 18A6 		BTFSC	atend	; if (!atend) skip
01520 0A8B 0008 		RETURN		; messaage was too short
01521 0A8C 	;
01522 0A8C 	; Target IP addr (me?) verify that we are the target
01523 0A8C 3004 		MOVLW	0x04	; count
01524 0A8D 00F9 		MOVWF	Param79
01525 0A8E 3030 		MOVLW	myip_b3	; block 1
01526 0A8F 00FA 		MOVWF	Param7A
01527 0A90 30E5 		MOVLW	ar_tpa	; block 2
01528 0A91 00FB 		MOVWF	Param7B
01529 0A92 2131 		CALL	MemComp_Low	; do the test
01530 0A93 1C78 		BTFSS	Param78,0	; skip if the IPs match
01531 0A94 0008 		RETURN
01532 0A95 	;
01533 0A95 	; ok, so what is it?  Operation (2 bytes) 1 ARPREQ or 2 ARPRESP
01534 0A95 	;
01535 0A95 		if ARPtesting
01544 0A95 		endif
01545 0A95 	;
01546 0A95 1683 		BSF	STATUS,RP0	; Bank1
01547 0A96 08D3 		MOVF	ar_op,F
01548 0A97 1D03 		BTFSS	STATUS,Z	; skip if high byte = 0
01549 0A98 0008 		RETURN
01550 0A99 3001 		MOVLW	low ARPREQ
01551 0A9A 0254 		SUBWF	ar_op+1,W
01552 0A9B 1903 		BTFSC	STATUS,Z	; if (ar_op != ARPREQ) skip
01553 0A9C 2AA2 		GOTO	HandleARPReq
01554 0A9D 	;
CastleGate.asm   "NIC Stuff"                                             Page: 115
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

01555 0A9D 3002 		MOVLW	low ARPRESP
01556 0A9E 0254 		SUBWF	ar_op+1,W
01557 0A9F 1903 		BTFSC	STATUS,Z
01558 0AA0 2AA9 		GOTO	HandleARPResp
01559 0AA1 0008 		RETURN		;it's something else
01560 0AA2 	;
01561 0AA2 	;
01562 0AA2 	; move sender's ip address to remip
01563 0AA2 3004 	HandleARPReq	MOVLW	0x04	; count
01564 0AA3 00F9 		MOVWF	Param79
01565 0AA4 3056 		MOVLW	remip_b3	; dest
01566 0AA5 00FA 		MOVWF	Param7A
01567 0AA6 30DB 		MOVLW	ar_spa	; source
01568 0AA7 00FB 		MOVWF	Param7B
01569 0AA8 2103 		CALL	MemMove_Low	; do the move
01570 0AA9 	;
01571 0AA9 		if ARPtesting
01576 0AA9 		endif
01577 0AA9 	;
01578 0AA9 	;Add this AR address pair to the cache
01579 0AA9 	; if this IP is found in the cache then replace the arp record
01580 0AA9 	; if this IP is not found then add it to the cache
01581 0AA9 	;
01582 0AA9 1683 	HandleARPResp	BSF	STATUS,RP0	; Bank1
01583 0AAA 3002 		MOVLW	AS_RESOLVED
01584 0AAB 00D0 		MOVWF	ae_state
01585 0AAC 300A 		MOVLW	ATTL_Max	; set time to live at max
01586 0AAD 00D2 		MOVWF	ae_ttl
01587 0AAE 2264 		CALL	arp_add_or_replace
01588 0AAF 	;
01589 0AAF 	;
01590 0AAF 		if ARPtesting
01623 0AAF 		endif
01624 0AAF 	;
01625 0AAF 	; if it was an arp responce we're done
01626 0AAF 1683 		BSF	STATUS,RP0	; Bank1
01627 0AB0 0854 		MOVF	ar_op+1,W
01628 0AB1 1283 		BCF	STATUS,RP0	; Bank0
01629 0AB2 3C02 		SUBLW	low ARPRESP
01630 0AB3 1903 		BTFSC	STATUS,Z
01631 0AB4 0008 		RETURN
01632 0AB5 	;
01633 0AB5 	;
01634 0AB5 	;OK, so it's a valid arp req. so build an arp resp to send back.
01635 0AB5 	; fall through to send_ARP_Resp
01636 0AB5 	;==============================================================================
01637 0AB5 	; Sends an ARP responce
01638 0AB5 	; Entry:Sender(myeth, myip), Target(nicin.eth.srce, remip)
01639 0AB5 	; Exit: none
01640 0AB5 	; RAM used: Param70:1, Param71, Param78, Param79, Param7A, 
01641 0AB5 	;	Param7B, Param7C, Param7D, FSR (verified 1/25/03)
01642 0AB5 	; Calls:(1+2) putch_net_W(1+0), put_data(1+1), put_MyIP(1+1), put_remip(1+1),
01643 0AB5 	;	 Put_ether(1+2)(outnic_ISR_0A(1+0), setnic_addr(1+1), putnic_data(1+1)),
01644 0AB5 	;	 xmit_ether(1+0) (outnicD78W, outnic_CMDR_W)
01645 0AB5 	;
01646 0AB5 10F0 	send_ARP_Resp	BCF	Param70,1
01647 0AB6 	put_ARP_Header	mBank0
01648 0AB8 01D4 		CLRF	txin	; txin = 0; 
01649 0AB9 	;
01650 0AB9 3000 		MOVLW	high HTYPE	; Hardware type 
01651 0ABA 216D 		CALL	putch_net_W
01652 0ABB 3001 		MOVLW	low HTYPE
01653 0ABC 216D 		CALL	putch_net_W
01654 0ABD 	;
01655 0ABD 3008 		MOVLW	high ARPPRO	; ARP protocol
01656 0ABE 216D 		CALL	putch_net_W
01657 0ABF 3000 		MOVLW	low ARPPRO
01658 0AC0 216D 		CALL	putch_net_W
01659 0AC1 	;
01660 0AC1 3006 		MOVLW	MACLEN	; Hardware address length
01661 0AC2 216D 		CALL	putch_net_W
01662 0AC3 3004 		MOVLW	IPAddrLEN	; Protocol address length
01663 0AC4 216D 		CALL	putch_net_W
01664 0AC5 	;
01665 0AC5 18F0 		BTFSC	Param70,1
01666 0AC6 0008 		RETURN
01667 0AC7 	;
01668 0AC7 3000 		MOVLW	high ARPRESP	; ARP response 
01669 0AC8 216D 		CALL	putch_net_W
01670 0AC9 3002 		MOVLW	low ARPRESP
01671 0ACA 216D 		CALL	putch_net_W
01672 0ACB 	; source MAC (mine)
01673 0ACB 302A 	send_ARP_1	MOVLW	myeth0	; put_data(myeth, MACLEN); My MAC addr 
01674 0ACC 00FA 		MOVWF	Param7A	;ptr
01675 0ACD 3006 		MOVLW	MACLEN
01676 0ACE 00F9 		MOVWF	Param79	;len
01677 0ACF 2187 		CALL	put_data
01678 0AD0 	; source IP (mine)
01679 0AD0 2183 		CALL	put_MyIP	
01680 0AD1 	; target MAC (where the req. came from)
01681 0AD1 3042 		MOVLW	nicin.eth.srce	; put_data(nicin.eth.srce, MACLEN);   Remote MAC addr 
01682 0AD2 00FA 		MOVWF	Param7A	;ptr
01683 0AD3 3006 		MOVLW	MACLEN
01684 0AD4 00F9 		MOVWF	Param79	;len
01685 0AD5 2187 		CALL	put_data
01686 0AD6 	;
01687 0AD6 	; target IP addr (the other guy)
01688 0AD6 2181 		CALL	put_remip
01689 0AD7 	;
01690 0AD7 21B4 		CALL	put_ether	; put_ether(txbuff, txin); Send to NIC 
CastleGate.asm   "NIC Stuff"                                             Page: 116
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

01691 0AD8 	;
01692 0AD8 		if ARPtesting
01723 0AD8 		endif
01724 0AD8 	;
01725 0AD8 	;
01726 0AD8 0854 		MOVF	txin,W	; xmit_ether(txin); Transmit 
01727 0AD9 00FC 		MOVWF	Param7C	;len
01728 0ADA 01FD 		CLRF	Param7D	;hi byte=0, arp's are small
01729 0ADB 29CD 		GOTO	xmit_ether
01730 0ADC 	;  
01731 0ADC 	;==============================================================================
01732 0ADC 	; Sends an ARP request
01733 0ADC 	; Entry:Sender(myeth, myip), Target IP(remip_b0), ae_attempts
01734 0ADC 	; Exit: none
01735 0ADC 	; RAM used:Param70, Param71, Param78, Param79, Param7A, 
01736 0ADC 	;	Param7B, Param7C, Param7D (verified 1/25/03)
01737 0ADC 	; Calls:(1+3) put_ARP_Header(1+2), putch_net_W(0), MemMove_Low(0), Put_ether(1+2)(outnic_ISR_0A, setnic_addr, putnic_data),
01738 0ADC 	;	 xmit_ether(1+0) (outnicD78W, outnic_CMDR_W), arp_add_or_replace (1+3)
01739 0ADC 	;
01740 0ADC 	; ARP/RARP message format: this all goes into the Data field in the Ethernet Frame (type PCOL_ARP)
01741 0ADC 	;   Hardware Type (2 bytes) ethernet=1, HTYPE
01742 0ADC 	;   Proticol Type (2 bytes) IP type=0x0800, ARPPRO
01743 0ADC 	;   Hardware Address Length (HLEN) (1 byte) ethernet=6, MACLEN
01744 0ADC 	;   Proticol Addres Length (PLEN) (1 byte) IPv4=4, IPAddrLEN
01745 0ADC 	;   Operation (2 bytes) 1 ARPREQ, 2 ARPRESP, 3 RARPREQ, or 4 RARPSESP
01746 0ADC 	;   Sender's Hardware Address (MAC)
01747 0ADC 	;   Sender's IP Address
01748 0ADC 	;   Target's Hardware Address (MAC)
01749 0ADC 	;   Target's IP Address (MAC)
01750 0ADC 	;
01751 0ADC 14F0 	send_ARP_Req	BSF	Param70,1	;Only load the header
01752 0ADD 22B6 		CALL	put_ARP_Header
01753 0ADE 	;
01754 0ADE 3000 		MOVLW	high ARPREQ	; put_word(ARPRESP); ARP response 
01755 0ADF 216D 		CALL	putch_net_W
01756 0AE0 3001 		MOVLW	low ARPREQ
01757 0AE1 216D 		CALL	putch_net_W
01758 0AE2 	;hardware protocol
01759 0AE2 3008 		MOVLW	high PCOL_ARP
01760 0AE3 00C8 		MOVWF	nicin.eth.pcol
01761 0AE4 3006 		MOVLW	low PCOL_ARP
01762 0AE5 00C9 		MOVWF	nicin.eth.pcol+1
01763 0AE6 	; setup MAC and IP of target
01764 0AE6 30FF 		MOVLW	0xFF	;FFFFFFFFFFFF (everyone)
01765 0AE7 00C2 		MOVWF	nicin.eth.srce
01766 0AE8 00C3 		MOVWF	nicin.eth.srce+1
01767 0AE9 00C4 		MOVWF	nicin.eth.srce+2
01768 0AEA 00C5 		MOVWF	nicin.eth.srce+3
01769 0AEB 00C6 		MOVWF	nicin.eth.srce+4
01770 0AEC 00C7 		MOVWF	nicin.eth.srce+5
01771 0AED 	; Subnet mask is 255.255.255.0 so use the first
01772 0AED 	; three octets of my IP address
01773 0AED 0830 		MOVF	myip_b3,W
01774 0AEE 00D6 		MOVWF	remip_b3
01775 0AEF 0831 		MOVF	myip_b2,W
01776 0AF0 00D7 		MOVWF	remip_b2
01777 0AF1 0832 		MOVF	myip_b1,W
01778 0AF2 00D8 		MOVWF	remip_b1
01779 0AF3 	;
01780 0AF3 	; Save a pending AR record
01781 0AF3 1683 		BSF	STATUS,RP0	; Bank1
01782 0AF4 3001 		MOVLW	AS_PENDING
01783 0AF5 00D0 		MOVWF	ae_state
01784 0AF6 0AD1 		INCF	ae_attempts,F
01785 0AF7 01D2 		CLRF	ae_ttl
01786 0AF8 	;
01787 0AF8 3008 		MOVLW	high PCOL_ARP
01788 0AF9 00D3 		MOVWF	ar_op
01789 0AFA 3006 		MOVLW	low PCOL_ARP
01790 0AFB 00D4 		MOVWF	ar_op+1
01791 0AFC 	;
01792 0AFC 30FF 		MOVLW	0xFF
01793 0AFD 00D5 		MOVWF	ar_sha
01794 0AFE 00D6 		MOVWF	ar_sha+1
01795 0AFF 00D7 		MOVWF	ar_sha+2
01796 0B00 00D8 		MOVWF	ar_sha+3
01797 0B01 00D9 		MOVWF	ar_sha+4
01798 0B02 00DA 		MOVWF	ar_sha+5
01799 0B03 	;
01800 0B03 3004 		MOVLW	0x04	; count
01801 0B04 00F9 		MOVWF	Param79
01802 0B05 3056 		MOVLW	remip_b3	; dest
01803 0B06 00FA 		MOVWF	Param7A
01804 0B07 30DB 		MOVLW	ar_spa	; source
01805 0B08 00FB 		MOVWF	Param7B
01806 0B09 2103 		CALL	MemMove_Low	; do the move
01807 0B0A 	;
01808 0B0A 2264 		CALL	arp_add_or_replace
01809 0B0B 	;
01810 0B0B 2ACB 		GOTO	send_ARP_1	;not bank sensitive
01811 0B0C 	;
01812 0B0C 		if UsesUDP
01813 0B0C 	;==============================================================================================
01814 0B0C 	; Send a UDP datagram given data in txbuff and len txin
01815 0B0C 	;
01816 0B0C 	; Entry: Data at txbuff, txin=length of data
01817 0B0C 	;	locport, remport, nicin.eth.srce, remip
01818 0B0C 	; Exit: none
01819 0B0C 	; RAM used: Param71, Param7A, Param7B, Param7C, FSR
01820 0B0C 	; Calls:(1+2) setnic_addr(0+1)(Param71, Param7A, Param7B), putnic_checkbyte(0+1), put_ip(1+1), put_udp
CastleGate.asm   "NIC Stuff"                                             Page: 117
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

01821 0B0C 	;	tcp_xmit_2(1+2)
01822 0B0C 	;
01823 0B0C 	UDP_Send	mBank0
01824 0B0E 01CD 		CLRF	checklo	; checkhi = checklo = 0
01825 0B0F 01CC 		CLRF	checkhi
01826 0B10 1126 		BCF	checkflag	; checkflag = 0
01827 0B11 01CA 		CLRF	tpxdlen
01828 0B12 01CB 		CLRF	tpxdlen+1
01829 0B13 	;hardware protocol
01830 0B13 3008 		MOVLW	high PCOL_IP	;0x0800
01831 0B14 00C8 		MOVWF	nicin.eth.pcol
01832 0B15 3000 		MOVLW	low PCOL_IP
01833 0B16 00C9 		MOVWF	nicin.eth.pcol+1
01834 0B17 	;
01835 0B17 	;  O/P data to buffer, calc checksum 
01836 0B17 	;
01837 0B17 	; setnic_addr((TXSTART*256)+ETHERHEADER_LEN+IPHDR_LEN+UDPHDR_LEN)
01838 0B17 3040 		MOVLW	TXSTART
01839 0B18 00FB 		MOVWF	Param7B
01840 0B19 302A 		MOVLW	ETHERHEADER_LEN+IPHDR_LEN+UDPHDR_LEN
01841 0B1A 00FA 		MOVWF	Param7A
01842 0B1B 2014 		CALL	setnic_addr
01843 0B1C 	;
01844 0B1C 	;move data to NIC
01845 0B1C 0854 		MOVF	txin,W	; Param7C=len of data at txbuff
01846 0B1D 00FC 		MOVWF	Param7C
01847 0B1E 30A0 		MOVLW	low txbuff
01848 0B1F 0084 		MOVWF	FSR
01849 0B20 1383 		BCF	STATUS,IRP
01850 0B21 0800 	UDP_Send_L1	MOVF	INDF,W
01851 0B22 2388 		CALL	putnic_checkbyte
01852 0B23 0A84 		INCF	FSR,F
01853 0B24 0BFC 		DECFSZ	Param7C,F
01854 0B25 2B21 		GOTO	UDP_Send_L1
01855 0B26 	;
01856 0B26 	;=======================================
01857 0B26 	; move checksum to data checksum
01858 0B26 	;
01859 0B26 	; Entry: Data at txbuff, txin=length of data
01860 0B26 	;	locport, remport, nicin.eth.srce, remip
01861 0B26 	; Exit: none
01862 0B26 	; RAM used: Param71, Param7A, Param7B, Param7C, FSR
01863 0B26 	; Calls:(1+2) put_ip(1+1), put_udp, tcp_xmit_2(1+2)
01864 0B26 	;
01865 0B26 084C 	UDP_Send_E2	MOVF	checkhi,W	; Save data checksum 
01866 0B27 00CE 		MOVWF	d_checkhi
01867 0B28 084D 		MOVF	checklo,W
01868 0B29 00CF 		MOVWF	d_checklo
01869 0B2A 	;
01870 0B2A 084A 		MOVF	tpxdlen,W	;iplen:=tpxdlen+IPHDR_LEN+UDPHDR_LEN
01871 0B2B 00EA 		MOVWF	iplen_b0
01872 0B2C 084B 		MOVF	tpxdlen+1,W
01873 0B2D 00EB 		MOVWF	iplen_b1
01874 0B2E 301C 		MOVLW	IPHDR_LEN+UDPHDR_LEN
01875 0B2F 07EA 		ADDWF	iplen_b0,F
01876 0B30 1803 		BTFSC	STATUS,C
01877 0B31 0AEB 		INCF	iplen_b1,F
01878 0B32 	; IP header 
01879 0B32 3011 		MOVLW	PUDP	;d'17'
01880 0B33 00D5 		MOVWF	ipcol
01881 0B34 	;
01882 0B34 235E 		CALL	put_ip	; IP header
01883 0B35 2337 		CALL	put_udp	; UDP header 
01884 0B36 	;
01885 0B36 		if UDPtesting
01900 0B36 		endif
01901 0B36 	;
01902 0B36 2E61 		GOTO	tcp_xmit_2
01903 0B37 	;
01904 0B37 	;==============================================================================================
01905 0B37 	; Put a UDP header into the buffer (txbuff+txin)
01906 0B37 	;
01907 0B37 	; Entry:d_checkhi, d_checklo, locport, remport
01908 0B37 	; Exit:
01909 0B37 	; RAM used:
01910 0B37 	; Calls:(1+1) putch_net_W(0), check_MyIP(1+0), check_remip(1+0), check_byte_W(0), put_ip(1+1)
01911 0B37 	;
01912 0B37 	put_udp	mBank0
01913 0B39 1126 		BCF	checkflag	; checkflag = 0; Ensure we're on an even byte 
01914 0B3A 084E 		MOVF	d_checkhi,W	; checkhi = d_checkhi Retrieve data checksum 
01915 0B3B 00CC 		MOVWF	checkhi
01916 0B3C 084F 		MOVF	d_checklo,W	; checklo = d_checklo; 
01917 0B3D 00CD 		MOVWF	checklo
01918 0B3E 	;Source Port
01919 0B3E 085B 		MOVF	locport_b1,W
01920 0B3F 216D 		CALL	putch_net_W
01921 0B40 085A 		MOVF	locport_b0,W
01922 0B41 216D 		CALL	putch_net_W
01923 0B42 	;Dest Port
01924 0B42 085D 		MOVF	remport_b1,W
01925 0B43 216D 		CALL	putch_net_W
01926 0B44 085C 		MOVF	remport_b0,W
01927 0B45 216D 		CALL	putch_net_W
01928 0B46 	;
01929 0B46 	;Message length (2 bytes) including header (8..1480)
01930 0B46 3008 		MOVLW	UDPHDR_LEN	; len = tpxdlen + UDPHDR_LEN; 
01931 0B47 074A 		ADDWF	tpxdlen,W	; len of data in nic ram
01932 0B48 00FC 		MOVWF	Param7C
01933 0B49 084B 		MOVF	tpxdlen+1,W
01934 0B4A 1803 		BTFSC	STATUS,C
CastleGate.asm   "NIC Stuff"                                             Page: 118
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

01935 0B4B 3E01 		ADDLW	0x01
01936 0B4C 00FD 		MOVWF	Param7D
01937 0B4D 216D 		CALL	putch_net_W
01938 0B4E 087C 		MOVF	Param7C,W
01939 0B4F 216D 		CALL	putch_net_W
01940 0B50 	;
01941 0B50 	;
01942 0B50 	;
01943 0B50 	;Checksum the pseudo header Src IP, Dest IP, 0x00 byte, IP protocol, length
01944 0B50 20DF 		CALL	check_MyIP
01945 0B51 	;
01946 0B51 20DD 		CALL	check_remip
01947 0B52 	;
01948 0B52 0103 		CLRW
01949 0B53 20C1 		CALL	check_byte_W
01950 0B54 0855 		MOVF	ipcol,W
01951 0B55 20C1 		CALL	check_byte_W
01952 0B56 	;
01953 0B56 087D 		MOVF	Param7D,W	; check_word(len);
01954 0B57 20C1 		CALL	check_byte_W
01955 0B58 087C 		MOVF	Param7C,W
01956 0B59 20C1 		CALL	check_byte_W
01957 0B5A 	;
01958 0B5A 	; Send checksum 
01959 0B5A 	; csum includes Data, pseudo header(src IP, Dest IP,0,ipcol,UDP msg len (UDPHDR_LEN+data len)),
01960 0B5A 	;  UDP header(Src port, dest port,msg len(UDPHDR_LEN+data len))
01961 0B5A 	;
01962 0B5A 094C 		COMF	checkhi,W
01963 0B5B 216D 		CALL	putch_net_W
01964 0B5C 	;
01965 0B5C 094D 		COMF	checklo,W
01966 0B5D 296D 		GOTO	putch_net_W
01967 0B5E 	;
01968 0B5E 	;
01969 0B5E 		endif
01970 0B5E 	;==============================================================================================
01971 0B5E 	; Send out an IP datagram header, given data length
01972 0B5E 	; Entry:iplen=total len of datagram
01973 0B5E 	; Exit:
01974 0B5E 	; RAM used:Param78, Param79, Param7A, FSR (verified 1/23/03)
01975 0B5E 	; Calls:(1+1) putch_net_W, check_byte_W, check_MyIP, check_remip, put_MyIP, put_remip
01976 0B5E 	;
01977 0B5E 	put_ip	mBank0
01978 0B60 01D4 		CLRF	txin	; txin = 0; 
01979 0B61 01CD 		CLRF	checklo	; checklo = 0  Clear checksum 
01980 0B62 01CC 		CLRF	checkhi	; checkhi = 0
01981 0B63 1126 		BCF	checkflag	; checkflag = 0
01982 0B64 	;
01983 0B64 3045 		MOVLW	0x45	; Version & hdr len
01984 0B65 216D 		CALL	putch_net_W
01985 0B66 	;
01986 0B66 0103 		CLRW		; Service=0
01987 0B67 216D 		CALL	putch_net_W
01988 0B68 	;
01989 0B68 086B 		MOVF	iplen_b1,W	; iplen
01990 0B69 216D 		CALL	putch_net_W
01991 0B6A 086A 		MOVF	iplen_b0,W
01992 0B6B 216D 		CALL	putch_net_W
01993 0B6C 	;
01994 0B6C 0103 		CLRW		; Ident word=0
01995 0B6D 216D 		CALL	putch_net_W
01996 0B6E 1703 		BSF	STATUS,RP1	;Bank 2
01997 0B6F 0ACA 		INCF	IPDatagramID,F	; ++id 
01998 0B70 084A 		MOVF	IPDatagramID,W
01999 0B71 216D 		CALL	putch_net_W
02000 0B72 	;
02001 0B72 0103 		CLRW		; Flags & fragment offset 
02002 0B73 216D 		CALL	putch_net_W
02003 0B74 0103 		CLRW
02004 0B75 216D 		CALL	putch_net_W
02005 0B76 	;
02006 0B76 3064 		MOVLW	0x64	; Time To Live=100
02007 0B77 216D 		CALL	putch_net_W
02008 0B78 0855 		MOVF	ipcol,W	; Protocol=ipcol  
02009 0B79 216D 		CALL	putch_net_W
02010 0B7A 	;
02011 0B7A 	; check_lword(myip) Include addresses in checksum
02012 0B7A 20DF 		CALL	check_MyIP
02013 0B7B 	;
02014 0B7B 20DD 		CALL	check_remip	; check_lword(remip); 
02015 0B7C 	;
02016 0B7C 094C 		COMF	checkhi,W	; Checksum 
02017 0B7D 216D 		CALL	putch_net_W
02018 0B7E 094D 		COMF	checklo,W
02019 0B7F 216D 		CALL	putch_net_W
02020 0B80 	;
02021 0B80 	; myip  Source & destination IP addrs 
02022 0B80 2183 		CALL	put_MyIP
02023 0B81 	; 
02024 0B81 	; remip
02025 0B81 2981 		GOTO	put_remip
02026 0B82 	;
02027 0B82 	;=========================================================================================
02028 0B82 	; Put the given byte into the NIC's RAM
02029 0B82 	; Entry: Param78
02030 0B82 	; Exit: Param78 is unchanged
02031 0B82 	; RAM used: Param70, Param78, Param71 (verified 10/2/02)
02032 0B82 	; Calls:(1+0) outnic_RBCR0_1, outnic_RBCR1_0, outnic_CMDR_W, outnicD78W
02033 0B82 	;
02034 0B82 2753 	putnic_byte	CALL	outnic_RBCR0_1	; outnic(RBCR0, 1) Byte count
CastleGate.asm   "NIC Stuff"                                             Page: 119
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

02035 0B83 274F 		CALL	outnic_RBCR1_0	; outnic(RBCR1, 0); 
02036 0B84 3012 		MOVLW	0x12	; outnic(CMDR, 0x12);
02037 0B85 2758 		CALL	outnic_CMDR_W	; Start, DMA remote write
02038 0B86 3010 		MOVLW	DATAPORT	; outnic(DATAPORT, b); 
02039 0B87 2F5B 		GOTO	outnicD78W
02040 0B88 	;
02041 0B88 	;===================================================================================
02042 0B88 	; Put the given byte into the NIC's RAM and add it to checksum
02043 0B88 	; Entry: W
02044 0B88 	; Exit: Value from W is in Param78, tpxdlen++
02045 0B88 	; RAM used: Param78, Param71 (verified 10/2/02)
02046 0B88 	; Calls:(1+0) check_byte_W, putnic_byte
02047 0B88 	;
02048 0B88 00F8 	putnic_checkbyte	MOVWF	Param78	; check_byte(b); 
02049 0B89 20C1 		CALL	check_byte_W
02050 0B8A 	; inline copy of putnic_byte to save a stack word
02051 0B8A 	;	CALL	putnic_byte
02052 0B8A 	;
02053 0B8A 2753 		CALL	outnic_RBCR0_1	; outnic(RBCR0, 1) Byte count
02054 0B8B 274F 		CALL	outnic_RBCR1_0	; outnic(RBCR1, 0); 
02055 0B8C 3012 		MOVLW	0x12	; outnic(CMDR, 0x12);
02056 0B8D 2758 		CALL	outnic_CMDR_W	; Start, DMA remote write
02057 0B8E 3010 		MOVLW	DATAPORT	; outnic(DATAPORT, b); 
02058 0B8F 275B 		CALL	outnicD78W
02059 0B90 	;
02060 0B90 0ACA 		INCF	tpxdlen,F	; tpxdlen++
02061 0B91 1903 		BTFSC	STATUS,Z
02062 0B92 0ACB 		INCF	tpxdlen+1,F
02063 0B93 3400 		RETLW	00
02064 0B94 	;
02065 0B94 	;================================================================================================
02066 0B94 	; Converts a byte value to a string
02067 0B94 	; output to putnic_checkbyte is '000'..'255'
02068 0B94 	; Entry: W = byte  '000'..'255'
02069 0B94 	; Exit: none
02070 0B94 	; RAM used: Param71:0, Param77, Param78, Param79
02071 0B94 	; Calls:(1+3) Disp_decbyteW, putnic_checkbyte
02072 0B94 	;
02073 0B94 	Dec_Put_n_Check	mBank0
02074 0B96 1627 		BSF	NumsToNic
02075 0B97 		mCall1To0	Disp_decbyteW
02076 0B9B 1227 		BCF	NumsToNic
02077 0B9C 0008 		RETURN
02078 0B9D 	;
02079 0B9D 	;===============================================================================================
02080 0B9D 	; 16 bit version of Dec_Put_n_Check
02081 0B9D 	; output to putnic_checkbyte is '00000'..'65535'
02082 0B9D 	; Enrty: Param77:Param76  16 bit value
02083 0B9D 	; Exit: none
02084 0B9D 	; RAM used: Param76, Param77, Param78, Param79, Param7A
02085 0B9D 	; Calls: (1+3) Disp_decword, putnic_checkbyte
02086 0B9D 	;
02087 0B9D 	DecWPut_n_Check	mBank0
02088 0B9F 1627 		BSF	NumsToNic
02089 0BA0 		mCall1To0	Disp_decword
02090 0BA4 1227 		BCF	NumsToNic
02091 0BA5 0008 		RETURN
02092 0BA6 	;
02093 0BA6 		if Uses3BNums
02094 0BA6 	;===============================================================================================
02095 0BA6 	; 24 bit version of Disp_decbyteW
02096 0BA6 	; output to DisplaysW is '00000000'..'16777215'
02097 0BA6 	; Enrty: Param77:Param76:Param74  24 bit value little endian
02098 0BA6 	; Exit: none
02099 0BA6 	; RAM used: Param74,Param76, Param77, Param78, Param79, Param7A, Param7B
02100 0BA6 	; Calls: (1+3) Disp_dec3B, putnic_checkbyte
02101 0BA6 	;
02102 0BA6 	Dec3BPut_n_Check	mBank0
02103 0BA8 1627 		BSF	NumsToNic
02104 0BA9 		mCall1To0	Disp_dec3B
02105 0BAD 1227 		BCF	NumsToNic
02106 0BAE 0008 		RETURN
02107 0BAF 	;
02108 0BAF 		endif
02109 0BAF 	;===============================================================================================
02110 0BAF 	; Copy a block from NIC Rx to Tx buffers (not crossing page boundaries)
02111 0BAF 	; Entry: Param79=dest, Param7A=srce, Param7B=len
02112 0BAF 	; Exit: none
02113 0BAF 	; RAM used: Param79, Param7A, Param7B
02114 0BAF 	; Calls: (1+1) outnic_ISR40, outnic_RSPR0_W, outnic_RSPR1_W, getnic_byte,
02115 0BAF 	;	outnic_RSPR0_W, outnic_RSPR1_W, putnic_byte
02116 0BAF 	;
02117 0BAF 2768 	copy_rx_tx	CALL	outnic_ISR40	; outnic(ISR, 0x40) Clear remote DMA interrupt flag
02118 0BB0 300E 		MOVLW	ETHERHEADER_LEN	; dest += sizeof(ETHERHEADER);
02119 0BB1 07F9 		ADDWF	Param79,F
02120 0BB2 3012 		MOVLW	NICETHERHEADER_LEN	; srce += sizeof(NICETHERHEADER);
02121 0BB3 07FA 		ADDWF	Param7A,F
02122 0BB4 	; while (len--) 
02123 0BB4 087A 	copy_rx_tx_L1	MOVF	Param7A,W	; outnic(RSAR0, srce);
02124 0BB5 2740 		CALL	outnic_RSPR0_W
02125 0BB6 0835 		MOVF	curr_rx_page,W	; outnic(RSAR1, curr_rx_page); 
02126 0BB7 2743 		CALL	outnic_RSPR1_W
02127 0BB8 20A0 		CALL	getnic_byte	; b = getnic_byte();
02128 0BB9 	;
02129 0BB9 0879 		MOVF	Param79,W	; outnic(RSAR0, dest); 
02130 0BBA 2740 		CALL	outnic_RSPR0_W
02131 0BBB 3040 		MOVLW	TXSTART	; outnic(RSAR1, TXSTART); 
02132 0BBC 2743 		CALL	outnic_RSPR1_W
02133 0BBD 2382 		CALL	putnic_byte	;Param78
02134 0BBE 	;
CastleGate.asm   "NIC Stuff"                                             Page: 120
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

02135 0BBE 0AFA 		INCF	Param7A,F	; srce++;
02136 0BBF 0AF9 		INCF	Param79,F	; dest++;
02137 0BC0 0BFB 		DECFSZ	Param7B,F	; len--
02138 0BC1 2BB4 		GOTO	copy_rx_tx_L1
02139 0BC2 0008 		RETURN		; we're done
02140 0BC3 	;
02141 0BC3 	;========================================================================================	
02142 0BC3 	; Checksum the given number of bytes in the Rx NIC buffer
02143 0BC3 	;
02144 0BC3 	; Entry: Param76=len.l, Param77=len.h
02145 0BC3 	; Exit: checklo, checkhi are updated
02146 0BC3 	; RAM used: Param71, Param76, Param77, Param78 (verified 1/30/03)
02147 0BC3 	; Calls:(1+0) outnic_ISR40, outnic_RBCR0_W, outnic_RBCR1_W, outnic_CMDR_0A, innic, check_byte_W
02148 0BC3 	; 		
02149 0BC3 2768 	check_rxbytes	CALL	outnic_ISR40	; outnic(ISR, 0x40) Clear remote DMA interrupt flag
02150 0BC4 0876 		MOVF	Param76,W
02151 0BC5 2754 		CALL	outnic_RBCR0_W	; outnic(RBCR0, len); Byte count
02152 0BC6 	;
02153 0BC6 0877 		MOVF	Param77,W	; outnic(RBCR1, len>>8); 
02154 0BC7 2750 		CALL	outnic_RBCR1_W
02155 0BC8 2757 		CALL	outnic_CMDR_0A	; outnic(CMDR, 0x0a) Start, DMA remote read
02156 0BC9 	; repeat Get bytes 
02157 0BC9 271E 	check_rxbytes_L1	CALL	innic_Data	; W = innic(DATAPORT)
02158 0BCA 20C1 		CALL	check_byte_W	; check_byte(W);
02159 0BCB 	;
02160 0BCB 0BF6 		DECFSZ	Param76,F	;len:=len-1
02161 0BCC 2BC9 		GOTO	check_rxbytes_L1
02162 0BCD 0877 		MOVF	Param77,W
02163 0BCE 1903 		BTFSC	STATUS,Z
02164 0BCF 0008 		RETURN		;until len=0
02165 0BD0 03F7 		DECF	Param77,F
02166 0BD1 2BC9 		GOTO	check_rxbytes_L1
02167 0BD2 	;
02168 0BD2 	;=======================================================================================
02169 0BD2 	; Inrement rseq
02170 0BD2 	;
02171 0BD2 0FE1 	IncRSeq	INCFSZ	rseq_b0,F	; rseq=rseq+1   Adjust Tx ack for SYN 
02172 0BD3 2BD9 		GOTO	IncRSeq_end
02173 0BD4 0FE0 		INCFSZ	rseq_b1,F
02174 0BD5 2BD9 		GOTO	IncRSeq_end
02175 0BD6 0FDF 		INCFSZ	rseq_b2,F
02176 0BD7 2BD9 		GOTO	IncRSeq_end
02177 0BD8 0ADE 		INCF	rseq_b3,F
02178 0BD9 0008 	IncRSeq_end	RETURN
02179 0BDA 	; 
02180 0BDA 	;=======================================================================================
02181 0BDA 	; Get an IP datagram
02182 0BDA 	;
02183 0BDA 	; Entry: data in NIC buffer, Bank0
02184 0BDA 	; Exit:
02185 0BDA 	; RAM used:
02186 0BDA 	; Calls:(1+4) match_byteW, getch_net, skip_word, skip_byte,
02187 0BDA 	;	tcp_recv, tcp_handler
02188 0BDA 	; 
02189 0BDA 1126 	ip_recv	BCF	checkflag	; checkflag = 0 Clear checksum 
02190 0BDB 01CD 		CLRF	checklo	; checklo = 0 
02191 0BDC 01CC 		CLRF	checkhi	; checkhi = 0
02192 0BDD 	;
02193 0BDD 3045 		MOVLW	0x45	; Version
02194 0BDE 214A 		CALL	match_byteW
02195 0BDF 	;
02196 0BDF 2168 		CALL	skip_byte	;Servive Type
02197 0BE0 	;
02198 0BE0 20A4 		CALL	getch_net	;length of datagram
02199 0BE1 00EB 		MOVWF	iplen_b1
02200 0BE2 20A4 		CALL	getch_net
02201 0BE3 00EA 		MOVWF	iplen_b0
02202 0BE4 	;
02203 0BE4 2165 		CALL	skip_lword	;datagram ID, Frags, Fragment offset
02204 0BE5 	;
02205 0BE5 2168 		CALL	skip_byte	;Time to live
02206 0BE6 	;
02207 0BE6 20A4 		CALL	getch_net	;Protocol
02208 0BE7 00D5 		MOVWF	ipcol
02209 0BE8 	;
02210 0BE8 2167 		CALL	skip_word	;checksum 
02211 0BE9 	;
02212 0BE9 20EC 		CALL	get_remip	;source IP address
02213 0BEA 18A6 		BTFSC	atend
02214 0BEB 0008 		RETURN		;Data Too Short!
02215 0BEC 	;
02216 0BEC 		if AllowReceiveBroadcast
02233 0BEC 		else
02234 0BEC 	;destination IP address is me
02235 0BEC 2154 		CALL	match_MyIP
02236 0BED 1C78 		BTFSS	Param78,0
02237 0BEE 0008 		RETURN
02238 0BEF 		endif
02239 0BEF 	;
02240 0BEF 	; if checkhi=0xff and checklo=0xff then Checksum is OK 
02241 0BEF 0A4C 		INCF	checkhi,W
02242 0BF0 		SKPZ
02243 0BF1 0008 		RETURN
02244 0BF2 	;
02245 0BF2 0A4D 		INCF	checklo,W
02246 0BF3 		SKPZ
02247 0BF4 0008 		RETURN
02248 0BF5 	;
02249 0BF5 	;OK, It seems to be a valid IP proticol, but which one?
02250 0BF5 		if UsesUDP
CastleGate.asm   "NIC Stuff"                                             Page: 121
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

02251 0BF5 	; if (ipcol == PUDP)
02252 0BF5 3011 		MOVLW	PUDP	; User Datagram Protocol? 
02253 0BF6 0255 		SUBWF	ipcol,W
02254 0BF7 		SKPNZ
02255 0BF8 2E6A 		GOTO	UDP_recv	; goto UDP handler
02256 0BF9 		endif
02257 0BF9 	;
02258 0BF9 	; if (ipcol == PICMP)
02259 0BF9 3001 		MOVLW	PICMP	; ICMP? 
02260 0BFA 0255 		SUBWF	ipcol,W
02261 0BFB 		SKPNZ
02262 0BFC 2DAF 		GOTO	icmp_recv	; goto ping handler 	
02263 0BFD 	;
02264 0BFD 3006 		MOVLW	PTCP	; else if (ipcol == PTCP)   TCP segment? 
02265 0BFE 0255 		SUBWF	ipcol,W
02266 0BFF 		SKPZ
02267 0C00 0008 		RETURN		;I don't know this pcol, dump it.
02268 0C01 	;
02269 0C01 	; fall through to tcp_recv
02270 0C01 	;
02271 0C01 	;
02272 0C01 	;
02273 0C01 	;======================================================================================================
02274 0C01 	; Test a TCP segment to see if it is valid
02275 0C01 	; Entry: NIC buffer pointer points to first byte of TCP Header
02276 0C01 	; Exit: NIC buffer pointer points to first byte of TCP Data
02277 0C01 	;       if this is a Valid TCP segment then we fall through to tcp_handler
02278 0C01 	; RAM used: Param76, Param77, Param78, Param79, Param7A, Param7B
02279 0C01 	; Calls:(1+2++) getch_net, skip_6bytes, check_byte_W, getnic_addr, setnic_addr
02280 0C01 	;
02281 0C01 	;tcp_recv
02282 0C01 01CD 		CLRF	checklo	; checkhi = checklo = 0; 
02283 0C02 01CC 		CLRF	checkhi
02284 0C03 	;
02285 0C03 20A4 		CALL	getch_net	;Source Port
02286 0C04 00DD 		MOVWF	remport_b1
02287 0C05 20A4 		CALL	getch_net
02288 0C06 00DC 		MOVWF	remport_b0
02289 0C07 	;
02290 0C07 20A4 		CALL	getch_net	;Destination Port
02291 0C08 00DB 		MOVWF	locport_b1
02292 0C09 20A4 		CALL	getch_net
02293 0C0A 00DA 		MOVWF	locport_b0
02294 0C0B 	;
02295 0C0B 20EE 		CALL	get_rseq	;Sequence Number
02296 0C0C 	;
02297 0C0C 20F6 		CALL	get_rack	;Acknowledge number
02298 0C0D 18A6 		BTFSC	atend
02299 0C0E 0008 		RETURN
02300 0C0F 	;
02301 0C0F 20A4 		CALL	getch_net
02302 0C10 00F7 		MOVWF	Param77	;header len (upper 4 bits only)
02303 0C11 0CF7 		RRF	Param77,F	; make hlen into header length
02304 0C12 0CF7 		RRF	Param77,F	; in bytes not long words
02305 0C13 303C 		MOVLW	0x3C	; don't overrun the buffer
02306 0C14 05F7 		ANDWF	Param77,F	; 0x00,0x04..0x3C
02307 0C15 18A6 		BTFSC	atend
02308 0C16 0008 		RETURN
02309 0C17 	;
02310 0C17 20A4 		CALL	getch_net	;flags
02311 0C18 00E6 		MOVWF	rflags	;lower 6 bits
02312 0C19 18A6 		BTFSC	atend
02313 0C1A 0008 		RETURN
02314 0C1B 	;
02315 0C1B 	; skip:  Window, csum, urgent ptr 
02316 0C1B 2163 		CALL	skip_6bytes
02317 0C1C 18A6 		BTFSC	atend
02318 0C1D 0008 		RETURN
02319 0C1E 	;
02320 0C1E 	; Check the pseudo header AND the data then restore the NIC buffer ptr to the
02321 0C1E 	;  beginning of the Data field.
02322 0C1E 1070 		BCF	Param70,0	;use CheckPseudo inline
02323 0C1F 	;===============================================================================
02324 0C1F 	; Check the pseudo header.
02325 0C1F 	;
02326 0C1F 	; Entry: Param70,0=1
02327 0C1F 	; Exit: Param7B:Param7A address to the params used by setnic_addr
02328 0C1F 	; RAM used:
02329 0C1F 	; Calls:(1+1) check_MyIP(1+0), check_remip, check_byte_W, getnic_addr
02330 0C1F 	;
02331 0C1F 	; iplen = iplen-IPHDR_LEN; Get TCP segment length 
02332 0C1F 3014 	CheckPseudo	MOVLW	IPHDR_LEN
02333 0C20 02EA 		SUBWF	iplen_b0,F
02334 0C21 1C03 		BTFSS	STATUS,C
02335 0C22 03EB 		DECF	iplen_b1,F
02336 0C23 	;
02337 0C23 	;Include the pseudo header in the csum (8 bytes)
02338 0C23 	; Source IP Address, Dest IP Address, 0x00 byte, ipcol byte, message length word
02339 0C23 	;
02340 0C23 	; check_lword(myip.l)
02341 0C23 20DF 		CALL	check_MyIP
02342 0C24 	; check_lword(remip.l)
02343 0C24 20DD 		CALL	check_remip
02344 0C25 	;
02345 0C25 0103 		CLRW		; check_byte(0)
02346 0C26 20C1 		CALL	check_byte_W
02347 0C27 	;
02348 0C27 0855 		MOVF	ipcol,W	; check_byte(ipcol)
02349 0C28 20C1 		CALL	check_byte_W
02350 0C29 	;
CastleGate.asm   "NIC Stuff"                                             Page: 122
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

02351 0C29 086B 		MOVF	iplen_b1,W	; check_word(iplen)
02352 0C2A 20C1 		CALL	check_byte_W
02353 0C2B 086A 		MOVF	iplen_b0,W
02354 0C2C 20C1 		CALL	check_byte_W
02355 0C2D 	;end of pseudo header
02356 0C2D 	;
02357 0C2D 	; rxout = hlen + IPHDR_LEN; Skip over options if any
02358 0C2D 3014 		MOVLW	IPHDR_LEN
02359 0C2E 0777 		ADDWF	Param77,W
02360 0C2F 00D2 		MOVWF	rxout
02361 0C30 01D3 		CLRF	rxout+1
02362 0C31 	; rpdlen = iplen - rxout + IPHDR_LEN;	
02363 0C31 086A 		MOVF	iplen_b0,W
02364 0C32 00E8 		MOVWF	rpdlen_b0
02365 0C33 086B 		MOVF	iplen_b1,W
02366 0C34 00E9 		MOVWF	rpdlen_b1
02367 0C35 0852 		MOVF	rxout,W
02368 0C36 02E8 		SUBWF	rpdlen_b0,F
02369 0C37 1C03 		BTFSS	STATUS,C
02370 0C38 03E9 		DECF	rpdlen_b1,F
02371 0C39 3014 		MOVLW	IPHDR_LEN
02372 0C3A 07E8 		ADDWF	rpdlen_b0,F
02373 0C3B 1803 		BTFSC	STATUS,C
02374 0C3C 0AE9 		INCF	rpdlen_b1,F
02375 0C3D 	; addr = getnic_addr()  Save the current location (start of data)
02376 0C3D 2019 		CALL	getnic_addr
02377 0C3E 0879 		MOVF	Param79,W	;move address to the params
02378 0C3F 00FB 		MOVWF	Param7B	;used by setnic_addr.
02379 0C40 0878 		MOVF	Param78,W
02380 0C41 00FA 		MOVWF	Param7A
02381 0C42 	;
02382 0C42 1870 		BTFSC	Param70,0
02383 0C43 0008 		RETURN		;CheckPseudo was called so return
02384 0C44 	;
02385 0C44 	; check the rest of the bytes in the datagram, but leave them in the rx buffer
02386 0C44 	; check_rxbytes(iplen-TCPHDR_LEN);  77:76=byte count
02387 0C44 086A 		MOVF	iplen_b0,W	;iplen
02388 0C45 00F6 		MOVWF	Param76
02389 0C46 3014 		MOVLW	TCPHDR_LEN
02390 0C47 02F6 		SUBWF	Param76,F
02391 0C48 086B 		MOVF	iplen_b1,W
02392 0C49 00F7 		MOVWF	Param77
02393 0C4A 1C03 		BTFSS	STATUS,C
02394 0C4B 03F7 		DECF	Param77,F
02395 0C4C 23C3 		CALL	check_rxbytes
02396 0C4D 	;
02397 0C4D 	; restore ptr so next byte we get is the first data byte
02398 0C4D 	; setnic_addr(addr) 
02399 0C4D 2014 		CALL	setnic_addr
02400 0C4E 	;
02401 0C4E 	; if (checkhi=0xff) and (checklo=0xff) then this data is a valid TCP segment
02402 0C4E 0A4C 		INCF	checkhi,W
02403 0C4F 		SKPZ
02404 0C50 0008 		RETURN		;bad csum
02405 0C51 0A4D 		INCF	checklo,W
02406 0C52 		SKPZ
02407 0C53 0008 		RETURN		;bad scum
02408 0C54 	;
02409 0C54 	;this is a valid TCP segment so go handle it
02410 0C54 	;
02411 0C54 	;
02412 0C54 	;
02413 0C54 	;====================================================================================================
02414 0C54 	; Handle an incoming TCP segment
02415 0C54 	;  RST bit is set: Do nothing
02416 0C54 	;  SYN bit is set: rseq++
02417 0C54 	;     if it is a valid port then send SYN,ACK  our SYN number is concount<<16
02418 0C54 	;       else send ACK,RST
02419 0C54 	;  FIN bit is set: send ACK  rseq=rseq+1+rpdlen
02420 0C54 	;  ACK bit not set: send ACK
02421 0C54 	;  ACK bit is set: send data FIN and ACK
02422 0C54 	; Entry: A valid TCP segment is in the NIC's ram
02423 0C54 	; Exit: 
02424 0C54 	; RAM used:
02425 0C54 	; Calls:(1+2+) Add_rseq_rpdlen, IncRSeq, tcp_xmit
02426 0C54 	;  May branch to http_recv, daytime_handler, DataPort_handler or TFTPPort_handler.
02427 0C54 	;
02428 0C54 	;tcp_handler
02429 0C54 01CB 		CLRF	tpxdlen+1	; tpxdlen = 0;  Assume no Tx data
02430 0C55 01CA 		CLRF	tpxdlen
02431 0C56 01CF 		CLRF	d_checklo	; Set data csum to zero.
02432 0C57 01CE 		CLRF	d_checkhi	;  If ACK only no data is sent.
02433 0C58 1126 		BCF	checkflag	; checkflag = 0
02434 0C59 	;
02435 0C59 	;plan on sending an acknowledgement
02436 0C59 3010 		MOVLW	TACK	; tflags = TACK  ..and just sending an ack 
02437 0C5A 00E7 		MOVWF	tflags	;
02438 0C5B 	;
02439 0C5B 	; if (rflags & TRST) RESET received? 
02440 0C5B 0866 		MOVF	rflags,W
02441 0C5C 3904 		ANDLW	TRST
02442 0C5D 1D03 		BTFSS	STATUS,Z
02443 0C5E 0008 		RETURN		;Resets are ignored
02444 0C5F 	;
02445 0C5F 	; if (rflags & TSYN) SYN received? 
02446 0C5F 0866 		MOVF	rflags,W
02447 0C60 3902 		ANDLW	TSYN
02448 0C61 1903 		BTFSC	STATUS,Z
02449 0C62 2C8B 		GOTO	tcp_handler_TFIN
02450 0C63 	;
CastleGate.asm   "NIC Stuff"                                             Page: 123
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

02451 0C63 	;TSYN recieved: Synchronize sequence numbers
02452 0C63 23D2 		CALL	IncRSeq
02453 0C64 	;
02454 0C64 	;*** check to see if this segment is for one of our ports ***
02455 0C64 	;
02456 0C64 	; if (locport=DAYPORT) goto tcp_handler_GoodPort
02457 0C64 08DB 		MOVF	locport_b1,F
02458 0C65 1D03 		BTFSS	STATUS,Z
02459 0C66 2C89 		GOTO	tcp_handler_BadPort
02460 0C67 300D 		MOVLW	low DAYPORT
02461 0C68 025A 		SUBWF	locport_b0,W
02462 0C69 1903 		BTFSC	STATUS,Z
02463 0C6A 2C7C 		GOTO	tcp_handler_GoodPort
02464 0C6B 	;
02465 0C6B 	; if (locport=HTTPORT) goto tcp_handler_GoodPort
02466 0C6B 3050 		MOVLW	low HTTPORT
02467 0C6C 025A 		SUBWF	locport_b0,W
02468 0C6D 1903 		BTFSC	STATUS,Z
02469 0C6E 2C7C 		GOTO	tcp_handler_GoodPort
02470 0C6F 	;
02471 0C6F 	;if (locport=IPDATAPORT) goto tcp_handler_GoodPort
02472 0C6F 3057 		MOVLW	low IPDATAPORT
02473 0C70 025A 		SUBWF	locport_b0,W
02474 0C71 1903 		BTFSC	STATUS,Z
02475 0C72 2C7C 		GOTO	tcp_handler_GoodPort
02476 0C73 	;
02477 0C73 	;if (locport=TTFTPtoEEROMPort) goto tcp_handler_GoodPort	
02478 0C73 		if TTFTPtoEEROM
02479 0C73 3045 		MOVLW	low TTFTPtoEEROMPort
02480 0C74 025A 		SUBWF	locport_b0,W
02481 0C75 1903 		BTFSC	STATUS,Z
02482 0C76 2C7C 		GOTO	tcp_handler_GoodPort
02483 0C77 		endif
02484 0C77 	;
02485 0C77 	;if (locport=TTFTPtoEEROMPort) goto tcp_handler_GoodPort	
02486 0C77 		if TTFTPtoSRAM
02487 0C77 303B 		MOVLW	low TTFTPtoSRAMPort
02488 0C78 025A 		SUBWF	locport_b0,W
02489 0C79 1903 		BTFSC	STATUS,Z
02490 0C7A 2C7C 		GOTO	tcp_handler_GoodPort
02491 0C7B 		endif
02492 0C7B 	;
02493 0C7B 		if UsesRS232BufIO
02498 0C7B 		endif
02499 0C7B 	;
02500 0C7B 2C89 		GOTO	tcp_handler_BadPort	; Unrecognised port
02501 0C7C 	;
02502 0C7C 	; Recognised port
02503 0C7C 30FF 	tcp_handler_GoodPort	MOVLW	0xFF
02504 0C7D 00E4 		MOVWF	rack_b1	; rack.w[0] = 0xffff; 
02505 0C7E 00E5 		MOVWF	rack_b0
02506 0C7F 0837 		MOVF	concount_b1,W	; rack.w[1] = concount++; 
02507 0C80 00E2 		MOVWF	rack_b3
02508 0C81 0836 		MOVF	concount_b0,W
02509 0C82 00E3 		MOVWF	rack_b2
02510 0C83 0AB6 		INCF	concount_b0,F
02511 0C84 1903 		BTFSC	STATUS,Z
02512 0C85 0AB7 		INCF	concount_b1,F
02513 0C86 		INCF	concount_b1,F
02514 0C86 3012 		MOVLW	TSYN+TACK	; tflags=TSYN+TACK  Send SYN ACK 
02515 0C87 00E7 	tcp_handler_Ret	MOVWF	tflags
02516 0C88 2E4D 		GOTO	tcp_xmit	; ..do it 
02517 0C89 	; 
02518 0C89 	; Unrecognised port
02519 0C89 3014 	tcp_handler_BadPort	MOVLW	TRST+TACK	; tflags=TRST+TACK  Send reset 
02520 0C8A 2C87 		GOTO	tcp_handler_Ret
02521 0C8B 	; 
02522 0C8B 	; if (rflags & TFIN)  Received FIN? 
02523 0C8B 0866 	tcp_handler_TFIN	MOVF	rflags,W
02524 0C8C 3901 		ANDLW	TFIN
02525 0C8D 1903 		BTFSC	STATUS,Z
02526 0C8E 2CA3 		GOTO	tcp_handler_TACK
02527 0C8F 	;Received FIN rseq=rseq+1    Ack all incoming data + FIN 
02528 0C8F 23D2 		CALL	IncRSeq
02529 0C90 	;
02530 0C90 2492 		CALL	Add_rseq_rpdlen
02531 0C91 2E4D 		GOTO	tcp_xmit
02532 0C92 	;
02533 0C92 	;
02534 0C92 0869 	Add_rseq_rpdlen	MOVF	rpdlen_b1,W	;rseq=rseq+rpdlen
02535 0C93 07E0 		ADDWF	rseq_b1,F	; add the high byte
02536 0C94 3001 		MOVLW	0x01
02537 0C95 1803 		BTFSC	STATUS,C
02538 0C96 07DF 		ADDWF	rseq_b2,F	; carry was set
02539 0C97 1803 		BTFSC	STATUS,C
02540 0C98 07DE 		ADDWF	rseq_b3,F	; carry was set again
02541 0C99 	;
02542 0C99 0868 		MOVF	rpdlen_b0,W
02543 0C9A 07E1 		ADDWF	rseq_b0,F
02544 0C9B 3001 		MOVLW	0x01
02545 0C9C 1803 		BTFSC	STATUS,C
02546 0C9D 07E0 		ADDWF	rseq_b1,F
02547 0C9E 1803 		BTFSC	STATUS,C
02548 0C9F 07DF 		ADDWF	rseq_b2,F
02549 0CA0 1803 		BTFSC	STATUS,C
02550 0CA1 07DE 		ADDWF	rseq_b3,F
02551 0CA2 0008 		RETURN
02552 0CA3 	;
02553 0CA3 	; if (rflags & TACK)  ACK received? 
02554 0CA3 0866 	tcp_handler_TACK	MOVF	rflags,W
CastleGate.asm   "NIC Stuff"                                             Page: 124
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

02555 0CA4 3910 		ANDLW	TACK
02556 0CA5 1903 		BTFSC	STATUS,Z
02557 0CA6 2E4D 		GOTO	tcp_xmit	;ack bit was not set
02558 0CA7 	; 
02559 0CA7 	; if (rpdlen)  Adjust Tx ack for Rx data 
02560 0CA7 0868 		MOVF	rpdlen_b0,W
02561 0CA8 0469 		IORWF	rpdlen_b1,W
02562 0CA9 		SKPZ
02563 0CAA 	;
02564 0CAA 	;Data came in so it must be acknowledged
02565 0CAA 2492 		CALL	Add_rseq_rpdlen	; rseq=rseq+rpdlen
02566 0CAB 	;
02567 0CAB 	; if (locport=HTTPORT and rpdlen<>0) then goto the http handler
02568 0CAB 01F8 		CLRF	Param78	;0
02569 0CAC 08DB 		MOVF	locport_b1,F
02570 0CAD 1D03 		BTFSS	STATUS,Z
02571 0CAE 0008 		RETURN		;all of our ports
02572 0CAF 3050 		MOVLW	HTTPORT	; start with 0x00
02573 0CB0 025A 		SUBWF	locport_b0,W
02574 0CB1 1903 		BTFSC	STATUS,Z
02575 0CB2 2CC8 		GOTO	tcp_PortDispatch
02576 0CB3 	;
02577 0CB3 	; if (locport=DAYPORT and rack.w[0]=0) then goto then daytime handler
02578 0CB3 3002 		MOVLW	0x02
02579 0CB4 00F8 		MOVWF	Param78	;2
02580 0CB5 300D 		MOVLW	DAYPORT
02581 0CB6 025A 		SUBWF	locport_b0,W
02582 0CB7 1903 		BTFSC	STATUS,Z
02583 0CB8 2CC8 		GOTO	tcp_PortDispatch
02584 0CB9 	;
02585 0CB9 		if UsesTCPIPDataPort
02592 0CB9 		endif
02593 0CB9 	;
02594 0CB9 3005 		MOVLW	0x05
02595 0CBA 00F8 		MOVWF	Param78	;5
02596 0CBB 		if TTFTPtoEEROM
02597 0CBB 3045 		MOVLW	low TTFTPtoEEROMPort
02598 0CBC 025A 		SUBWF	locport_b0,W
02599 0CBD 1903 		BTFSC	STATUS,Z
02600 0CBE 2CC8 		GOTO	tcp_PortDispatch
02601 0CBF 		endif
02602 0CBF 	;	
02603 0CBF 0AF8 		INCF	Param78,F	;6
02604 0CC0 		if TTFTPtoSRAM
02605 0CC0 303B 		MOVLW	low TTFTPtoSRAMPort
02606 0CC1 025A 		SUBWF	locport_b0,W
02607 0CC2 1903 		BTFSC	STATUS,Z
02608 0CC3 2CC8 		GOTO	tcp_PortDispatch
02609 0CC4 		endif
02610 0CC4 	;
02611 0CC4 0AF8 		INCF	Param78,F	;7
02612 0CC5 		if UsesRS232BufIO
02617 0CC5 		endif
02618 0CC5 0AF8 		INCF	Param78,F	;8 not used
02619 0CC6 0AF8 		INCF	Param78,F	;9
02620 0CC7 	;Not a valid port
02621 0CC7 0008 		RETURN		;no more ports
02622 0CC8 	;
02623 0CC8 	;-------------------------------------
02624 0CC8 	;
02625 0CC8 0868 	tcp_PortDispatch	MOVF	rpdlen_b0,W	;there must be some data
02626 0CC9 0469 		IORWF	rpdlen_b1,W
02627 0CCA 1903 		BTFSC	STATUS,Z	;Data length = 0?
02628 0CCB 0008 		RETURN		; Yes
02629 0CCC 0878 		MOVF	Param78,W
02630 0CCD 		mPCLGoto
02631 0CD1 160A 		BSF	PCLATH,4	;0
02632 0CD2 29A6 		GOTO	http_recv	;  not used
02633 0CD3 2CDA 		GOTO	daytime_handler	;2
02634 0CD4 	;
02635 0CD4 		if UsesTCPIPDataPort
02638 0CD4 		else
02639 0CD4 0000 		NOP
02640 0CD5 0008 		RETURN		;changed from nop 4/13/04
02641 0CD6 		endif
02642 0CD6 	;
02643 0CD6 		if TTFTPtoEEROM
02644 0CD6 2D6F 		GOTO	TFTPPortE_handler	;5
02645 0CD7 		else
02647 0CD7 		endif
02648 0CD7 	;
02649 0CD7 		if TTFTPtoSRAM
02650 0CD7 2D10 		GOTO	TFTPPortS_handler	;6
02651 0CD8 		else
02653 0CD8 		endif
02654 0CD8 	;
02655 0CD8 		if UsesRS232BufIO
02658 0CD8 		else
02659 0CD8 0000 		NOP
02660 0CD9 0008 		RETURN
02661 0CDA 		endif
02662 0CDA 	;
02663 0CDA 	;========================================================================================
02664 0CDA 	; Respond to an Daytime request   Prepare daytime data 
02665 0CDA 	; The DayPort port 13 is used to set and read the clock.
02666 0CDA 	;
02667 0CDA 	; Entry:
02668 0CDA 	; Exit:
02669 0CDA 	; RAM used: Param71, Param78, Param79, Param7A, Param7B, Param7D, Param7F, FSR (verified 1/30/03)
02670 0CDA 	; Calls:(1+3) getch_net, setnic_addr, putnic_checkbyte(1+0), PutString(1+2)
CastleGate.asm   "NIC Stuff"                                             Page: 125
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

02671 0CDA 	; 
02672 0CDA 01F9 	daytime_handler	CLRF	Param79	;i=0;
02673 0CDB 	;buffer the command in romdir.f.name
02674 0CDB 20A4 	daytime_handler_L2	CALL	getch_net	;send one char to disp
02675 0CDC 18A6 		BTFSC	atend
02676 0CDD 2CE9 		GOTO	daytime_handler_2	;atend
02677 0CDE 3017 		MOVLW	low romdir.f.name
02678 0CDF 0779 		ADDWF	Param79,W	;i
02679 0CE0 0084 		MOVWF	FSR
02680 0CE1 1783 		BSF	STATUS,IRP
02681 0CE2 0878 		MOVF	Param78,W
02682 0CE3 0080 		MOVWF	INDF	;romdir.f.name+Param79
02683 0CE4 0AF9 		INCF	Param79,F
02684 0CE5 300C 		MOVLW	ROM_FNAMELEN
02685 0CE6 0279 		SUBWF	Param79,W
02686 0CE7 1D03 		BTFSS	STATUS,Z	;12 chars max
02687 0CE8 2CDB 		GOTO	daytime_handler_L2	
02688 0CE9 	;
02689 0CE9 24FA 	daytime_handler_2	CALL	Std_TCP_Setup
02690 0CEA 	;
02691 0CEA 3017 		MOVLW	low romdir.f.name
02692 0CEB 0084 		MOVWF	FSR
02693 0CEC 1783 		BSF	STATUS,IRP
02694 0CED 303D 		MOVLW	'='	; one letter command to set time?
02695 0CEE 0200 		SUBWF	INDF,W
02696 0CEF 1D03 		BTFSS	STATUS,Z
02697 0CF0 2CF1 		GOTO	daytime_Read
02698 0CF1 	;
02699 0CF1 	daytime_Write	
02700 0CF1 		if HasRTC
02716 0CF1 		endif
02717 0CF1 	;
02718 0CF1 	daytime_Read
02719 0CF1 		if HasRTC
02737 0CF1 		else
02738 0CF1 	;
02739 0CF1 3012 		MOVLW	Str_DAYMSGPtr	;"No daytime msg\r\n"
02740 0CF2 2504 		CALL	PutString
02741 0CF3 	;
02742 0CF3 		endif
02743 0CF3 	;
02744 0CF3 3011 		MOVLW	TFIN+TACK	; tflags = TFIN+TACK  Ack & close connection 
02745 0CF4 00E7 	Do_TCP_Wflags	MOVWF	tflags
02746 0CF5 084C 		MOVF	checkhi,W	; d_checkhi = checkhi   Save checksum 
02747 0CF6 00CE 		MOVWF	d_checkhi
02748 0CF7 084D 		MOVF	checklo,W	; d_checklo = checklo
02749 0CF8 00CF 		MOVWF	d_checklo
02750 0CF9 	;
02751 0CF9 2E4D 		GOTO	tcp_xmit	; ..do it 
02752 0CFA 	;
02753 0CFA 	;=====================================================================================================
02754 0CFA 	; Clear checksum, setnic_addr((TXSTART*256)+ETHERHEADER_LEN+IPHDR_LEN+TCPHDR_LEN)
02755 0CFA 	;
02756 0CFA 	; Entry: none
02757 0CFA 	; Exit: none
02758 0CFA 	; RAM used: Param71, Param7A, Param7B (verified 1/23/03)
02759 0CFA 	; Calls:(0+1) setnic_addr(1+0)
02760 0CFA 	;
02761 0CFA 	Std_TCP_Setup	mBank0
02762 0CFC 01CD 		CLRF	checklo	;checkhi = checklo = 0; 
02763 0CFD 01CC 		CLRF	checkhi
02764 0CFE 1126 		BCF	checkflag	; checkflag = 0; 
02765 0CFF 	;
02766 0CFF 	; setnic_addr((TXSTART*256)+ETHERHEADER_LEN+IPHDR_LEN+TCPHDR_LEN)
02767 0CFF 3040 		MOVLW	TXSTART
02768 0D00 00FB 		MOVWF	Param7B
02769 0D01 3036 		MOVLW	ETHERHEADER_LEN+IPHDR_LEN+TCPHDR_LEN
02770 0D02 00FA 		MOVWF	Param7A
02771 0D03 2814 		GOTO	setnic_addr
02772 0D04 	;
02773 0D04 	;
02774 0D04 	;=========================================================================================
02775 0D04 	; Send string number (W) to IP frame buffer
02776 0D04 	; Param7D=CharCount, Param7F=StringNumber
02777 0D04 	; (putnic_checkbyte:Param78, Param71)
02778 0D04 	;
02779 0D04 	; Entry: W = string number
02780 0D04 	; Exit: none
02781 0D04 	; RAM used: Param71, Param78, Param7D, Param7F (verified 1/30/03)
02782 0D04 	; Calls:(1+2) putnic_checkbyte,StringDispatch
02783 0D04 	;
02784 0D04 00FF 	PutString	MOVWF	Param7F
02785 0D05 01FD 		CLRF	Param7D	;CharCount=0
02786 0D06 	PutString_L1	
02787 0D06 		if CodeMemStrings
02789 0D06 		endif
02790 0D06 		if SRAM_Strings
02791 0D06 		mCall1To0	StringDispatch	;Get the next Char
02792 0D0A 		endif
02793 0D0A 0AFD 		INCF	Param7D,F	;CharCount:=CharCount+1
02794 0D0B 3800 		IORLW	0x00	;set Z if last char
02795 0D0C 1903 		BTFSC	STATUS,Z
02796 0D0D 0008 		RETURN		;00 = done
02797 0D0E 2388 		CALL	putnic_checkbyte	;Put the Char
02798 0D0F 2D06 		GOTO	PutString_L1
02799 0D10 	;
02800 0D10 	;
02801 0D10 		if TTFTPtoSRAM
02802 0D10 	;
02803 0D10 	;========================================================================================
CastleGate.asm   "NIC Stuff"                                             Page: 126
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

02804 0D10 	; Handler for the TFTP Port SRAM version
02805 0D10 	;  if length is zero then send 256 bytes from SRAM starting at Address and ACK
02806 0D10 	;  if length is greater than zero (1..1024) then write this data to SRAM and 
02807 0D10 	;    send length bytes from SRAM starting at Address and ACK.
02808 0D10 	;  if the MSb of the length is set then send 1..1024 bytes from SRAM starting at Address and ACK.
02809 0D10 	;
02810 0D10 	; Entry:next NIC byte to read is first byte of TCP segment's data field
02811 0D10 	; Exit: tcp_xmit
02812 0D10 	; RAM used: Param71, Param78, Param79, Param7A, Param7B, Param7C, Param7D, FSR (verified 4/29/04)
02813 0D10 	; Calls:(1+2) getch_net, SRAM_WritePI, TFTPPortS_ReadAll, TFTPPortS_Read
02814 0D10 	;
02815 0D10 3091 	TFTPPortS_handler	MOVLW	low SRAM_Len
02816 0D11 0084 		MOVWF	FSR
02817 0D12 1783 		BSF	_IRP
02818 0D13 3005 		MOVLW	0x05	;move 5 bytes
02819 0D14 00F9 		MOVWF	Param79
02820 0D15 	;
02821 0D15 20A4 	TFTPPortS_handler_L2	CALL	getch_net	; get SRAM_Len..SRAM_DestAddr0
02822 0D16 0080 		MOVWF	INDF
02823 0D17 0A84 		INCF	FSR,F
02824 0D18 0BF9 		DECFSZ	Param79,F
02825 0D19 2D15 		GOTO	TFTPPortS_handler_L2
02826 0D1A 	;
02827 0D1A 18A6 		BTFSC	atend
02828 0D1B 0008 		RETURN		; bad data, too short
02829 0D1C 	;
02830 0D1C 	; If length of data is 0x00 goto TFTPPortS_ReadAll and read 256 bytes.
02831 0D1C 		mBank3
02832 0D1E 		MOVFW	SRAM_Len
02833 0D1F 0412 		IORWF	SRAM_Len_Lo,W
02834 0D20 		SKPNZ
02835 0D21 2D42 		GOTO	TFTPPortS_ReadAll
02836 0D22 	;
02837 0D22 	; If SRAM_Len,7 is set then go copy the data from SRAM to the NICs buffer
02838 0D22 1F91 		BTFSS	SRAM_Len,7	;Is the read only flag set?
02839 0D23 2D27 		GOTO	TFTPPortS_handler_1	; No
02840 0D24 3007 		MOVLW	0x07
02841 0D25 0591 		ANDWF	SRAM_Len,F
02842 0D26 2D47 		GOTO	TFTPPortS_Read
02843 0D27 	;
02844 0D27 	; Move SRAM_Len bytes of data into SRAM
02845 0D27 0811 	TFTPPortS_handler_1	MOVF	SRAM_Len,W
02846 0D28 3907 		ANDLW	0x07	;Len 0x0001..0x0400
02847 0D29 				; the MSb is the read only flag.
02848 0D29 00FA 		MOVWF	Param7A
02849 0D2A 0812 		MOVF	SRAM_Len_Lo,W
02850 0D2B 00F9 		MOVWF	Param79
02851 0D2C 0813 		MOVF	SRAM_DestAddr2,W
02852 0D2D 009F 		MOVWF	SRAM_Addr2
02853 0D2E 0814 		MOVF	SRAM_DestAddr1,W
02854 0D2F 009E 		MOVWF	SRAM_Addr1
02855 0D30 0815 		MOVF	SRAM_DestAddr0,W
02856 0D31 009D 		MOVWF	SRAM_Addr0
02857 0D32 	;
02858 0D32 20A4 	TFTPPortS_handler_L1	CALL	getch_net	; get the next data byte
02859 0D33 18A6 		BTFSC	atend
02860 0D34 0008 		RETURN		; bad data, too short
02861 0D35 		mCall1To0	SRAM_WritePI
02862 0D39 	;
02863 0D39 3001 		MOVLW	0x01
02864 0D3A 02F9 		SUBWF	Param79,F
02865 0D3B 		SUBBF	Param7A,F
02866 0D3D 0879 		MOVF	Param79,W
02867 0D3E 047A 		IORWF	Param7A,W
02868 0D3F 		SKPZ
02869 0D40 2D32 		GOTO	TFTPPortS_handler_L1
02870 0D41 2D47 		GOTO	TFTPPortS_Read
02871 0D42 	;
02872 0D42 	;========================================================================================================
02873 0D42 	; Read 256 bytes from SRAM into NIC buffer and send it (tflags  Ack & close & Push)
02874 0D42 	;
02875 0D42 	; Entry: SRAM_DestAddr
02876 0D42 	; Exit: tcp_xmit
02877 0D42 	; RAM used: Param71, Param78, Param79, Param7A, Param7B, Param7C, Param7D, FSR (verified 4/29/04)
02878 0D42 	; Calls:(1+2) TFTPPortS_Read
02879 0D42 	;
02880 0D42 	TFTPPortS_ReadAll	mBank3
02881 0D44 3001 		MOVLW	0x01
02882 0D45 0091 		MOVWF	SRAM_Len	;make len=0x0100
02883 0D46 0192 		CLRF	SRAM_Len_Lo
02884 0D47 	;
02885 0D47 	; fall through to TFTPPortS_Read
02886 0D47 	;
02887 0D47 	;=========================================================================================================
02888 0D47 	; Read SRAM_Len bytes from the SRAM into the nic buffer and send it (tflags  Ack & close & Push)
02889 0D47 	;
02890 0D47 	; Entry: SRAM_Len, SRAM_DestAddr
02891 0D47 	; Exit: tcp_xmit
02892 0D47 	; RAM used: Param71, Param78, Param79, Param7A, Param7B, Param7C, Param7D, FSR (verified 4/29/04)
02893 0D47 	; Calls:(1+2) setnic_addr, putnic_checkbyte, SRAM_ReadPI, tcp_xmit
02894 0D47 	;
02895 0D47 	; Send data to nic buffer, calc checksum 
02896 0D47 	; 1069 bytes max (IPHDR_LEN+TCPHDR_LEN+lenWord+Address+1024 Data)
02897 0D47 	;
02898 0D47 24FA 	TFTPPortS_Read	CALL	Std_TCP_Setup
02899 0D48 3028 		MOVLW	IPHDR_LEN+TCPHDR_LEN	;txin = IPHDR_LEN + TCPHDR_LEN
02900 0D49 00D4 		MOVWF	txin
02901 0D4A 	;
02902 0D4A 	;Move length and address (5 bytes) to NIC buffer
02903 0D4A 3091 		MOVLW	low SRAM_Len
CastleGate.asm   "NIC Stuff"                                             Page: 127
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

02904 0D4B 0084 		MOVWF	FSR
02905 0D4C 1783 		BSF	_IRP
02906 0D4D 3005 		MOVLW	0x05
02907 0D4E 00F9 		MOVWF	Param79
02908 0D4F 0800 	TFTPPortS_Read_L1	MOVF	INDF,W
02909 0D50 2388 		CALL	putnic_checkbyte
02910 0D51 0A84 		INCF	FSR,F
02911 0D52 0BF9 		DECFSZ	Param79,F
02912 0D53 2D4F 		GOTO	TFTPPortS_Read_L1
02913 0D54 	;
02914 0D54 		mBank3
02915 0D56 0811 		MOVF	SRAM_Len,W
02916 0D57 00FA 		MOVWF	Param7A
02917 0D58 0812 		MOVF	SRAM_Len_Lo,W
02918 0D59 00F9 		MOVWF	Param79
02919 0D5A 0813 		MOVF	SRAM_DestAddr2,W
02920 0D5B 009F 		MOVWF	SRAM_Addr2
02921 0D5C 0814 		MOVF	SRAM_DestAddr1,W
02922 0D5D 009E 		MOVWF	SRAM_Addr1
02923 0D5E 0815 		MOVF	SRAM_DestAddr0,W
02924 0D5F 009D 		MOVWF	SRAM_Addr0
02925 0D60 	;	
02926 0D60 	TFTPPortS_Read_L2	mCall1To0	SRAM_ReadPI
02927 0D64 2388 		CALL	putnic_checkbyte
02928 0D65 	;
02929 0D65 3001 		MOVLW	0x01
02930 0D66 02F9 		SUBWF	Param79,F
02931 0D67 		SUBBF	Param7A,F
02932 0D69 0879 		MOVF	Param79,W
02933 0D6A 047A 		IORWF	Param7A,W
02934 0D6B 		SKPZ
02935 0D6C 2D60 		GOTO	TFTPPortS_Read_L2
02936 0D6D 	;
02937 0D6D 3019 	TFTPPortS_Read_1	MOVLW	TFIN+TACK+TPUSH	; tflags  Ack & close & Push
02938 0D6E 2CF4 		GOTO	Do_TCP_Wflags	; ..do it
02939 0D6F 	;
02940 0D6F 		endif
02941 0D6F 	;
02942 0D6F 		if TTFTPtoEEROM
02943 0D6F 	;========================================================================================
02944 0D6F 	; Handler for the TFTP Port, EEROM version.
02945 0D6F 	;  This handler moves data in and out of the eeROM via port 69 "TFTPPort" Trivial FTP.
02946 0D6F 	;  if length is zero then send 32 bytes from eeROM starting at Address and ACK
02947 0D6F 	;  if length is greater than zero (1..32) then write this data to eeROM and 
02948 0D6F 	;    send length bytes from eeROM starting at Address and ACK
02949 0D6F 	;  TFTP data len is limited to the serial eeprom write buffer limit of 32 bytes
02950 0D6F 	;    WriteEEROM could be modified to handle multipul write cycles
02951 0D6F 	;  if EnableEEROMCopy=1 then eeROMbuff.len,7 causes CopyEEROMtoSRAM to be called with
02952 0D6F 	;   the lower 4 bits of eeROMbuff.len as the bank number.
02953 0D6F 	;  if EnableEEROMCopy=1 then eeROMbuff.len,6 causes EraseEEROM to be called.
02954 0D6F 	;
02955 0D6F 	; Entry:next NIC byte to read is first byte of TCP segment's data field
02956 0D6F 	; Exit:
02957 0D6F 	; RAM used:Param79, Param7A, Param7C FSR
02958 0D6F 	; Calls:(1+2) getch_net(1+0), WriteEEROM(1+1), DelayWmS_D08(1+0+0), ReadEEROM, setnic_addr, putnic_checkbyte
02959 0D6F 	;
02960 0D6F 3023 	TFTPPortE_handler	MOVLW	low eeROMbuff.len
02961 0D70 0084 		MOVWF	FSR
02962 0D71 		mBankISel	eeROMbuff.len
02963 0D72 3004 		MOVLW	0x04
02964 0D73 00F9 		MOVWF	Param79	;bytes to move
02965 0D74 	;
02966 0D74 20A4 	TFTPPortE_handler_L2	CALL	getch_net	; get the len
02967 0D75 0080 		MOVWF	INDF
02968 0D76 0A84 		INCF	FSR,F
02969 0D77 0BF9 		DECFSZ	Param79,F
02970 0D78 2D74 		GOTO	TFTPPortE_handler_L2
02971 0D79 	;
02972 0D79 18A6 		BTFSC	atend
02973 0D7A 0008 		RETURN		; bad data, too short
02974 0D7B 	;
02975 0D7B 	; if length of data is 0x00 goto TFTPPortE_ReadAll
02976 0D7B 	;
02977 0D7B 		mBank2
02978 0D7D 		MOVFW	eeROMbuff.len
02979 0D7E 00FC 		MOVWF	Param7C
02980 0D7F 		SKPNZ
02981 0D80 2D93 		GOTO	TFTPPortE_ReadAll
02982 0D81 	;
02983 0D81 	; tx EEROM to SRAM?
02984 0D81 		if EnableEEROMCopy
03011 0D81 		endif
03012 0D81 	;
03013 0D81 	; test for valid length 1..32
03014 0D81 	TFTPPortE_handler_1	MOVFW	eeROMbuff.len
03015 0D82 3C20 		SUBLW	eeROMBuffLen	; 20-Len
03016 0D83 		SKPNB		; skip if not borrow
03017 0D84 2A61 		GOTO	S1_Bank0Rtn	; len>20
03018 0D85 	;
03019 0D85 	; read Param7C bytes of data into buffer
03020 0D85 20A4 	TFTPPortE_handler_L1	CALL	getch_net	; get the next data byte
03021 0D86 18A6 		BTFSC	atend
03022 0D87 0008 		RETURN		; bad data, too short
03023 0D88 0080 		MOVWF	INDF
03024 0D89 0A84 		INCF	FSR,F
03025 0D8A 0BFC 		DECFSZ	Param7C,F
03026 0D8B 2D85 		GOTO	TFTPPortE_handler_L1
03027 0D8C 	;
03028 0D8C 	;
03029 0D8C 	;write data wait 5ms then read the data
CastleGate.asm   "NIC Stuff"                                             Page: 128
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

03030 0D8C 		mCall1To0	WriteEEROM
03031 0D90 3005 		MOVLW	0x05
03032 0D91 200A 		CALL	DelayWmS_D08
03033 0D92 2D97 		GOTO	TFTPPortE_Read
03034 0D93 	;
03035 0D93 	;==========================================================================================================
03036 0D93 	; Read eeROMBuffLen bytes of data into NIC buffer and send it (tflags  Ack & close & Push)
03037 0D93 	;
03038 0D93 	; Entry: eeROMbuff.Addr
03039 0D93 	; Exit: tcp_xmit
03040 0D93 	; Calls:() TFTPPortE_Read
03041 0D93 	; RAM used:
03042 0D93 	;
03043 0D93 	TFTPPortE_ReadAll	mBank2
03044 0D95 3020 		MOVLW	eeROMBuffLen
03045 0D96 00A3 		MOVWF	eeROMbuff.len
03046 0D97 	;
03047 0D97 	; fall through to TFTPPortE_Read
03048 0D97 	;
03049 0D97 	;==========================================================================================================
03050 0D97 	; Read eeROMbuff.len bytes of data into NIC buffer and send it (tflags  Ack & close & Push)
03051 0D97 	;
03052 0D97 	; Entry: eeROMbuff.len, eeROMbuff.Addr
03053 0D97 	; Exit: tcp_xmit
03054 0D97 	; Calls:(1+2) Std_TCP_Setup, ReadEEROM, putnic_checkbyte, tcp_xmit
03055 0D97 	; RAM used: Param78, Param79, FSR
03056 0D97 	; 
03057 0D97 	; Send data to nic buffer, calc checksum 
03058 0D97 	; 76 bytes max (IPHDR_LEN+TCPHDR_LEN+lenByte+Address+32 Data)
03059 0D97 24FA 	TFTPPortE_Read	CALL	Std_TCP_Setup
03060 0D98 3028 		MOVLW	IPHDR_LEN+TCPHDR_LEN	;txin = IPHDR_LEN + TCPHDR_LEN
03061 0D99 00D4 		MOVWF	txin
03062 0D9A 		mCall1To0	ReadEEROM
03063 0D9E 	;
03064 0D9E 	;
03065 0D9E 3023 		MOVLW	low eeROMbuff.len
03066 0D9F 0084 		MOVWF	FSR
03067 0DA0 00FA 		MOVWF	Param7A	; read next byte from here
03068 0DA1 1783 		BSF	STATUS,IRP
03069 0DA2 0800 		MOVF	INDF,W
03070 0DA3 3E04 		ADDLW	0x04	; address and length header
03071 0DA4 00F9 		MOVWF	Param79	; bytes to read
03072 0DA5 	;	
03073 0DA5 087A 	TFTPPortE_Read_L2	MOVF	Param7A,W
03074 0DA6 0084 		MOVWF	FSR
03075 0DA7 1783 		BSF	STATUS,IRP
03076 0DA8 0800 		MOVF	INDF,W
03077 0DA9 2388 		CALL	putnic_checkbyte
03078 0DAA 0AFA 		INCF	Param7A,F
03079 0DAB 0BF9 		DECFSZ	Param79,F
03080 0DAC 2DA5 		GOTO	TFTPPortE_Read_L2
03081 0DAD 	;
03082 0DAD 3019 		MOVLW	TFIN+TACK+TPUSH	; tflags = TFIN+TACK  Ack & close connection
03083 0DAE 2CF4 		GOTO	Do_TCP_Wflags
03084 0DAF 	;	
03085 0DAF 		endif
03086 0DAF 	;=========================================================================================
03087 0DAF 	; Respond to an ICMP echo request message (aka ping)
03088 0DAF 	;
03089 0DAF 	; Entry:
03090 0DAF 	; Exit: 
03091 0DAF 	; RAM used: ICMP header checksum (2 bytes) Param7B, Param7C
03092 0DAF 	; Calls:(1+) match_byteW, getch_net, skip_byte, put_ip, putch_net_W,
03093 0DAF 	;	put_ether, copy_rx_tx, xmit_ether
03094 0DAF 	;
03095 0DAF 	icmp_recv	mBank0
03096 0DB1 1126 		BCF	checkflag	; checkflag = 0 Clear checksum 
03097 0DB2 01CD 		CLRF	checklo	; checklo = 0 
03098 0DB3 01CC 		CLRF	checkhi	; checkhi = 0
03099 0DB4 01E9 		CLRF	rpdlen_b1	; rpdlen = 0; 
03100 0DB5 01E8 		CLRF	rpdlen_b0
03101 0DB6 	;
03102 0DB6 3008 		MOVLW	ICMP_ERequest	;ICMP type = ICMP_ERequest
03103 0DB7 214A 		CALL	match_byteW
03104 0DB8 1C78 		BTFSS	Param78,0
03105 0DB9 0008 		RETURN
03106 0DBA 	;
03107 0DBA 0103 		CLRW		;ICMP Code = 0
03108 0DBB 214A 		CALL	match_byteW
03109 0DBC 1C78 		BTFSS	Param78,0
03110 0DBD 0008 		RETURN
03111 0DBE 	;
03112 0DBE 20A4 		CALL	getch_net	; get_word(csum)
03113 0DBF 00FC 		MOVWF	Param7C
03114 0DC0 20A4 		CALL	getch_net
03115 0DC1 00FB 		MOVWF	Param7B
03116 0DC2 18A6 		BTFSC	atend
03117 0DC3 0008 		RETURN
03118 0DC4 	; 
03119 0DC4 	; Check data 
03120 0DC4 2168 	icmp_recv_L1	CALL	skip_byte
03121 0DC5 1C78 		BTFSS	Param78,0
03122 0DC6 2DCB 		GOTO	icmp_recv_1	; we already read the last byte
03123 0DC7 	;
03124 0DC7 0FE8 		INCFSZ	rpdlen_b0,F	; rpdlen++;
03125 0DC8 2DC4 		GOTO	icmp_recv_L1
03126 0DC9 0AE9 		INCF	rpdlen_b1,F
03127 0DCA 2DC4 		GOTO	icmp_recv_L1
03128 0DCB 	;
03129 0DCB 0A4C 	icmp_recv_1	INCF	checkhi,W	;checkhi=0xff
CastleGate.asm   "NIC Stuff"                                             Page: 129
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

03130 0DCC 1D03 		BTFSS	STATUS,Z
03131 0DCD 0008 		RETURN		;bad csum
03132 0DCE 0A4D 		INCF	checklo,W	;checklo=0xff
03133 0DCF 1D03 		BTFSS	STATUS,Z
03134 0DD0 0008 		RETURN		;bad csum
03135 0DD1 	;
03136 0DD1 08E9 		MOVF	rpdlen_b1,F	;rpdlen<=MAXPING_LEN
03137 0DD2 1D03 		BTFSS	STATUS,Z
03138 0DD3 0008 		RETURN		;>=0x100, too big
03139 0DD4 	;
03140 0DD4 30D5 		MOVLW	MAXPING_LEN+1
03141 0DD5 0268 		SUBWF	rpdlen_b0,W
03142 0DD6 1803 		BTFSC	STATUS,C
03143 0DD7 0008 		RETURN		;it should have borrowed
03144 0DD8 	; If OK and not bcast.. 
03145 0DD8 235E 		CALL	put_ip	;IP header 
03146 0DD9 3000 		MOVLW	ICMP_EReply	; ICMP type 
03147 0DDA 216D 		CALL	putch_net_W
03148 0DDB 0103 		CLRW		; ICMP code (0)
03149 0DDC 216D 		CALL	putch_net_W
03150 0DDD 	; recalculate the ICMP checksum for resp
03151 0DDD 	;  we changed the ICMP type, which is a MSB from 0x08 to 0x00
03152 0DDD 3008 		MOVLW	0x08	; csum = csum+0x0800
03153 0DDE 07FC 		ADDWF	Param7C,F
03154 0DDF 	; if (csum < 0x0800)	  ..including hi-lo carry 
03155 0DDF 3008 		MOVLW	0x08
03156 0DE0 027C 		SUBWF	Param7C,W
03157 0DE1 1803 		BTFSC	STATUS,C
03158 0DE2 2DE6 		GOTO	icmp_recv_2
03159 0DE3 	;
03160 0DE3 0AFB 		INCF	Param7B,F	; csum++; 
03161 0DE4 1903 		BTFSC	STATUS,Z
03162 0DE5 0AFC 		INCF	Param7C,F
03163 0DE6 	;
03164 0DE6 087C 	icmp_recv_2	MOVF	Param7C,W	; put_word(csum);   ICMP checksum 
03165 0DE7 216D 		CALL	putch_net_W
03166 0DE8 087B 		MOVF	Param7B,W
03167 0DE9 216D 		CALL	putch_net_W
03168 0DEA 	; Move what we have so far to the NIC tx buffer
03169 0DEA 	;  adding the ethernet header
03170 0DEA 21B4 		CALL	put_ether	; put_ether(txbuff, txin);
03171 0DEB 	; Send ICMP echo response
03172 0DEB 	; send back the last 4 bytes of the ICMP header and the data,
03173 0DEB 	;  don't look at it just copy it from the NICs rx buffer
03174 0DEB 	;  to the NICs tx buffer
03175 0DEB 0854 		MOVF	txin,W	; copy_rx_tx(txin, IPHDR_LEN+ICMPHDR_LEN, rpdlen); 
03176 0DEC 00F9 		MOVWF	Param79
03177 0DED 3018 		MOVLW	IPHDR_LEN+ICMPHDR_LEN
03178 0DEE 00FA 		MOVWF	Param7A
03179 0DEF 0868 		MOVF	rpdlen_b0,W
03180 0DF0 00FB 		MOVWF	Param7B
03181 0DF1 23AF 		CALL	copy_rx_tx
03182 0DF2 	; xmit_ether(IPHDR_LEN+ICMPHDR_LEN+rpdlen);
03183 0DF2 3018 		MOVLW	IPHDR_LEN+ICMPHDR_LEN
03184 0DF3 0768 		ADDWF	rpdlen_b0,W
03185 0DF4 00FC 		MOVWF	Param7C
03186 0DF5 0869 		MOVF	rpdlen_b1,W
03187 0DF6 1803 		BTFSC	STATUS,C
03188 0DF7 3E01 		ADDLW	0x01
03189 0DF8 00FD 		MOVWF	Param7D
03190 0DF9 29CD 		GOTO	xmit_ether	; transmit the ethernet frame
03191 0DFA 	;
03192 0DFA 	;
03193 0DFA 	;====================================================================================	
03194 0DFA 	; Put out a TCP segment header. (Source Port..Options)
03195 0DFA 	; Data checksum must have already been computed.
03196 0DFA 	;
03197 0DFA 	; Entry: none
03198 0DFA 	; Exit:
03199 0DFA 	; RAM used: Param78, Param79, Param7A, Param7C, Param7D, FSR (verified 1/30/03)
03200 0DFA 	; Calls:(1+1) putch_net_W, put_rack, put_rseq, check_MyIP, check_remip, check_byte_W
03201 0DFA 	;
03202 0DFA 	put_tcp	mBank0
03203 0DFC 1126 		BCF	checkflag	; checkflag = 0; Ensure we're on an even byte 
03204 0DFD 084E 		MOVF	d_checkhi,W	; checkhi = d_checkhi Retrieve data checksum 
03205 0DFE 00CC 		MOVWF	checkhi
03206 0DFF 084F 		MOVF	d_checklo,W	; checklo = d_checklo; 
03207 0E00 00CD 		MOVWF	checklo
03208 0E01 	;Source Port
03209 0E01 085B 		MOVF	locport_b1,W
03210 0E02 216D 		CALL	putch_net_W
03211 0E03 085A 		MOVF	locport_b0,W
03212 0E04 216D 		CALL	putch_net_W
03213 0E05 	;Dest Port
03214 0E05 085D 		MOVF	remport_b1,W
03215 0E06 216D 		CALL	putch_net_W
03216 0E07 085C 		MOVF	remport_b0,W
03217 0E08 216D 		CALL	putch_net_W
03218 0E09 	;Sequence number
03219 0E09 217D 		CALL	put_rack
03220 0E0A 	;Acknowledgment Number
03221 0E0A 217F 		CALL	put_rseq
03222 0E0B 	;
03223 0E0B 	;TCP header length
03224 0E0B 	;if TSYN flag is set then header len is 4 bytes more because the MSS value is in the options area
03225 0E0B 0867 		MOVF	tflags,W
03226 0E0C 3902 		ANDLW	TSYN
03227 0E0D 1903 		BTFSC	STATUS,Z
03228 0E0E 2E11 		GOTO	put_tcp_1
03229 0E0F 3060 		MOVLW	TCPSYN_LEN*4
CastleGate.asm   "NIC Stuff"                                             Page: 130
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

03230 0E10 2E12 		GOTO	put_tcp_2
03231 0E11 3050 	put_tcp_1	MOVLW	TCPHDR_LEN*4
03232 0E12 216D 	put_tcp_2	CALL	putch_net_W
03233 0E13 	;the reserved bits are always 0's
03234 0E13 	; Code bits
03235 0E13 0867 		MOVF	tflags,W
03236 0E14 216D 		CALL	putch_net_W
03237 0E15 	;Window size
03238 0E15 300B 		MOVLW	high TCP_WDWSize
03239 0E16 216D 		CALL	putch_net_W
03240 0E17 30B8 		MOVLW	low TCP_WDWSize
03241 0E18 216D 		CALL	putch_net_W
03242 0E19 	;
03243 0E19 084A 		MOVF	tpxdlen,W	; len = tpxdlen + TCPHDR_LEN; 
03244 0E1A 3E14 		ADDLW	TCPHDR_LEN
03245 0E1B 00FC 		MOVWF	Param7C	;low len
03246 0E1C 084B 		MOVF	tpxdlen+1,W
03247 0E1D 00FD 		MOVWF	Param7D	;high len
03248 0E1E 1803 		BTFSC	STATUS,C
03249 0E1F 0AFD 		INCF	Param7D,F	;high len
03250 0E20 	;
03251 0E20 	; if (tflags & TSYN) If sending SYN, send MSS option 
03252 0E20 0867 		MOVF	tflags,W
03253 0E21 3902 		ANDLW	TSYN
03254 0E22 1903 		BTFSC	STATUS,Z
03255 0E23 2E34 		GOTO	put_tcp_3
03256 0E24 	;  
03257 0E24 	; Put MSS in buffer after TCP header 
03258 0E24 3004 		MOVLW	0x04	; txin += 4;
03259 0E25 07D4 		ADDWF	txin,F	; skip csum & urgent ptr
03260 0E26 	;
03261 0E26 3004 		MOVLW	TCPOPT_LEN	; len += TCPOPT_LEN; 
03262 0E27 07FC 		ADDWF	Param7C,F
03263 0E28 1803 		BTFSC	STATUS,C
03264 0E29 0AFD 		INCF	Param7D,F
03265 0E2A 	;Options (32 bits)
03266 0E2A 3002 		MOVLW	0x02	; putch_net(2); 
03267 0E2B 216D 		CALL	putch_net_W
03268 0E2C 3004 		MOVLW	0x04	; putch_net(4); 
03269 0E2D 216D 		CALL	putch_net_W
03270 0E2E 	;
03271 0E2E 3005 		MOVLW	high TCP_MSS
03272 0E2F 216D 		CALL	putch_net_W
03273 0E30 30B4 		MOVLW	low TCP_MSS
03274 0E31 216D 		CALL	putch_net_W
03275 0E32 	;
03276 0E32 	; txin =txin-(TCPOPT_LEN + 4);  Go back to checksum in header 
03277 0E32 3008 		MOVLW	TCPOPT_LEN+4
03278 0E33 02D4 		SUBWF	txin,F
03279 0E34 	;
03280 0E34 	;Checksum the pseudo header Src IP, Dest IP, 0x00 byte, IP protocol, length
03281 0E34 20DF 	put_tcp_3	CALL	check_MyIP
03282 0E35 	;
03283 0E35 20DD 		CALL	check_remip
03284 0E36 	;
03285 0E36 0103 		CLRW
03286 0E37 20C1 		CALL	check_byte_W
03287 0E38 3006 		MOVLW	PTCP
03288 0E39 20C1 		CALL	check_byte_W
03289 0E3A 	;
03290 0E3A 087D 		MOVF	Param7D,W	; check_word(len);
03291 0E3B 20C1 		CALL	check_byte_W
03292 0E3C 087C 		MOVF	Param7C,W
03293 0E3D 20C1 		CALL	check_byte_W
03294 0E3E 	;
03295 0E3E 	; Send checksum 
03296 0E3E 094C 		COMF	checkhi,W
03297 0E3F 216D 		CALL	putch_net_W
03298 0E40 	;
03299 0E40 094D 		COMF	checklo,W
03300 0E41 216D 		CALL	putch_net_W
03301 0E42 	;
03302 0E42 0103 		CLRW		;Urgent ptr (not used)
03303 0E43 216D 		CALL	putch_net_W
03304 0E44 0103 		CLRW
03305 0E45 216D 		CALL	putch_net_W
03306 0E46 	;
03307 0E46 	; if (tflags & TSYN)	  Adjust Tx ptr if sending MSS option 
03308 0E46 0867 		MOVF	tflags,W
03309 0E47 3902 		ANDLW	TSYN
03310 0E48 1903 		BTFSC	STATUS,Z
03311 0E49 0008 		RETURN
03312 0E4A 	;re-adjust buffer offset
03313 0E4A 3004 		MOVLW	TCPOPT_LEN	; txin=txin+TCPOPT_LEN; 
03314 0E4B 07D4 		ADDWF	txin,F
03315 0E4C 0008 		RETURN
03316 0E4D 	;
03317 0E4D 	;===========================================================================================
03318 0E4D 	; Transmit a TCP segment
03319 0E4D 	;
03320 0E4D 	; Entry:data at txbuff, txin=data length, data csum in d_checkhi,d_checklo
03321 0E4D 	;	tpxdlen = length of data in NIC buffer 
03322 0E4D 	; Exit:
03323 0E4D 	; RAM used: Param71, Param78, Param79, Param7A, Param7B, Param7C, Param7D, FSR (verified 1/30/03)
03324 0E4D 	; Calls:(1+2) put_ip, put_tcp, put_ether, xmit_ether
03325 0E4D 	; 
03326 0E4D 	tcp_xmit	mBank0
03327 0E4F 084A 		MOVF	tpxdlen,W	;iplen:=tpxdlen+IPHDR_LEN+TCPHDR_LEN
03328 0E50 00EA 		MOVWF	iplen_b0
03329 0E51 084B 		MOVF	tpxdlen+1,W
CastleGate.asm   "NIC Stuff"                                             Page: 131
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

03330 0E52 00EB 		MOVWF	iplen_b1
03331 0E53 3028 		MOVLW	IPHDR_LEN+TCPHDR_LEN
03332 0E54 07EA 		ADDWF	iplen_b0,F
03333 0E55 1803 		BTFSC	STATUS,C
03334 0E56 0AEB 		INCF	iplen_b1,F
03335 0E57 	; if (tflags & TSYN) allow for MSS option 
03336 0E57 0867 		MOVF	tflags,W
03337 0E58 3902 		ANDLW	TSYN
03338 0E59 1903 		BTFSC	STATUS,Z
03339 0E5A 2E5F 		GOTO	tcp_xmit_1
03340 0E5B 	;
03341 0E5B 3004 		MOVLW	TCPOPT_LEN	; iplen += TCPOPT_LEN; 
03342 0E5C 07EA 		ADDWF	iplen_b0,F
03343 0E5D 1803 		BTFSC	STATUS,C
03344 0E5E 0AEB 		INCF	iplen_b1,F
03345 0E5F 	; IP header 
03346 0E5F 235E 	tcp_xmit_1	CALL	put_ip	; IP header
03347 0E60 25FA 		CALL	put_tcp	; TCP header 
03348 0E61 				; put_ether(txbuff, txin);  Send to NIC
03349 0E61 	;
03350 0E61 	;====================================
03351 0E61 	; Transmit ethernet header and data
03352 0E61 	;
03353 0E61 	; Calls:(1+2) put_ether(1+1), xmit_ether(1+0)
03354 0E61 	;
03355 0E61 21B4 	tcp_xmit_2	CALL	put_ether	; Ethernet header and data
03356 0E62 	;
03357 0E62 0854 		MOVF	txin,W	; xmit_ether(txin+tpxdlen);  Transmit 
03358 0E63 074A 		ADDWF	tpxdlen,W
03359 0E64 00FC 		MOVWF	Param7C
03360 0E65 084B 		MOVF	tpxdlen+1,W
03361 0E66 00FD 		MOVWF	Param7D
03362 0E67 1803 		BTFSC	STATUS,C
03363 0E68 0AFD 		INCF	Param7D,F	;carry
03364 0E69 	;
03365 0E69 29CD 		GOTO	xmit_ether
03366 0E6A 	; 
03367 0E6A 		if UsesUDP
03368 0E6A 	;======================================================================================================
03369 0E6A 	; Test a User Datagram to see if it is valid
03370 0E6A 	; 
03371 0E6A 	; Entry: NIC buffer pointer points to first byte of UDP Header
03372 0E6A 	; Exit: NIC buffer pointer points to first byte of the datagram Data field
03373 0E6A 	;       if this is a Valid UDP datagram we fall through to udp_handler
03374 0E6A 	; RAM used: Param76, Param77, Param78, Param79, Param7A, Param7B
03375 0E6A 	; Calls:(1+ ) getch_net, skip_word, check_byte_W, getnic_addr, setnic_addr, check_rxbytes
03376 0E6A 	;
03377 0E6A 01CD 	UDP_recv	CLRF	checklo	; checkhi = checklo = 0; 
03378 0E6B 01CC 		CLRF	checkhi
03379 0E6C 	;
03380 0E6C 		if UDPtesting
03385 0E6C 		endif
03386 0E6C 	;
03387 0E6C 	; Source Port (2 bytes) 0 or where to send replies
03388 0E6C 20A4 		CALL	getch_net
03389 0E6D 00DD 		MOVWF	remport_b1
03390 0E6E 20A4 		CALL	getch_net
03391 0E6F 00DC 		MOVWF	remport_b0
03392 0E70 	; Destination Port (2 bytes) application port
03393 0E70 20A4 		CALL	getch_net
03394 0E71 00DB 		MOVWF	locport_b1
03395 0E72 20A4 		CALL	getch_net
03396 0E73 00DA 		MOVWF	locport_b0
03397 0E74 	;
03398 0E74 		if UDPtesting
03400 0E74 		endif
03401 0E74 	;
03402 0E74 	; Message length (2 bytes) including header (8..1480)
03403 0E74 20A4 		CALL	getch_net
03404 0E75 00FD 		MOVWF	Param7D
03405 0E76 20A4 		CALL	getch_net
03406 0E77 00FC 		MOVWF	Param7C
03407 0E78 18A6 		BTFSC	atend
03408 0E79 0008 		RETURN
03409 0E7A 	;
03410 0E7A 	; skip:  csum 
03411 0E7A 2167 		CALL	skip_word
03412 0E7B 18A6 		BTFSC	atend
03413 0E7C 0008 		RETURN
03414 0E7D 	;
03415 0E7D 1470 		BSF	Param70,0
03416 0E7E 01F7 		CLRF	Param77
03417 0E7F 241F 		CALL	CheckPseudo
03418 0E80 	;
03419 0E80 	; check the rest of the bytes in the datagram, but leave them in the rx buffer
03420 0E80 	; check_rxbytes(iplen-TCPHDR_LEN);  77:76=byte count
03421 0E80 086A 		MOVF	iplen_b0,W	;iplen
03422 0E81 00F6 		MOVWF	Param76
03423 0E82 3008 		MOVLW	UDPHDR_LEN
03424 0E83 02F6 		SUBWF	Param76,F
03425 0E84 086B 		MOVF	iplen_b1,W
03426 0E85 00F7 		MOVWF	Param77
03427 0E86 1C03 		BTFSS	STATUS,C
03428 0E87 03F7 		DECF	Param77,F
03429 0E88 23C3 		CALL	check_rxbytes
03430 0E89 	;
03431 0E89 	; restore ptr so next byte we get is the first data byte
03432 0E89 	; setnic_addr(addr) 
03433 0E89 2014 		CALL	setnic_addr
03434 0E8A 	; if (checkhi=0xff) and (checklo=0xff) then this data is a valid UPD datagram
CastleGate.asm   "NIC Stuff"                                             Page: 132
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

03435 0E8A 	;
03436 0E8A 0A4C 		INCF	checkhi,W
03437 0E8B 1D03 		BTFSS	STATUS,Z
03438 0E8C 0008 		RETURN		;bad csum
03439 0E8D 0A4D 		INCF	checklo,W
03440 0E8E 1D03 		BTFSS	STATUS,Z
03441 0E8F 0008 		RETURN		;bad scum
03442 0E90 	;
03443 0E90 	; fall through to udp_handler
03444 0E90 	;==============================================================================================
03445 0E90 	; Handle an incomming UDP datagram
03446 0E90 	; Entry: A valid datagram data field in the NIC's ram
03447 0E90 	;        Param7C, Param7D= Length of data LSB, MSB
03448 0E90 	; Exit:
03449 0E90 	; RAM used:
03450 0E90 	; Calls:()
03451 0E90 	;
03452 0E90 	udp_handler
03453 0E90 	;
03454 0E90 		if UDPtesting
03457 0E90 		endif
03458 0E90 	;
03459 0E90 3000 	udp_handler_Ports	MOVLW	high TermPort
03460 0E91 025B 		SUBWF	locport_b1,W
03461 0E92 1D03 		BTFSS	STATUS,Z
03462 0E93 2E98 		GOTO	udp_handler_Ports1
03463 0E94 3039 		MOVLW	low TermPort
03464 0E95 025A 		SUBWF	locport_b0,W
03465 0E96 1903 		BTFSC	STATUS,Z
03466 0E97 2EA1 		GOTO	udp_handler_TermPort
03467 0E98 	;
03468 0E98 3000 	udp_handler_Ports1	MOVLW	high IPDATAPORT
03469 0E99 025B 		SUBWF	locport_b1,W
03470 0E9A 1D03 		BTFSS	STATUS,Z
03471 0E9B 2EA0 		GOTO	udp_handler_Ports2
03472 0E9C 3057 		MOVLW	low IPDATAPORT
03473 0E9D 025A 		SUBWF	locport_b0,W
03474 0E9E 1903 		BTFSC	STATUS,Z
03475 0E9F 2EA3 		GOTO	udp_handler_DataPort
03476 0EA0 	;
03477 0EA0 	udp_handler_Ports2			; Unrecognised port
03478 0EA0 	;
03479 0EA0 0008 		RETURN
03480 0EA1 	;
03481 0EA1 	; Recognised ports
03482 0EA1 	;
03483 0EA1 160A 	udp_handler_TermPort	BSF	PCLATH,4	;segment 3
03484 0EA2 297B 		GOTO	UDP_Term_Handler	;udp port 57 handler in segment 3
03485 0EA3 	;
03486 0EA3 	;
03487 0EA3 160A 	udp_handler_DataPort	BSF	PCLATH,4	;segment 3
03488 0EA4 2AD9 		GOTO	UDP_Data_Handler	;udp port 87 handler in segment 3
03489 0EA5 	;
03490 0EA5 		endif
03491 0EA5 	;
03492 0EA5 	;=================================================================================
03493 0EA5 	; Set NIC reset signal high (Active)
03494 0EA5 	;
03495 0EA5 	; Entry: none
03496 0EA5 	; Exit: none
03497 0EA5 	; RAM used: Param77, Param78, Param79 (verified 3/14/05)
03498 0EA5 	; Calls:(1+1) DelayWmS_D08, WriteLDO_0_D08
03499 0EA5 	;
03500 0EA5 3020 	reset_ether	MOVLW	0x20
03501 0EA6 200A 		CALL	DelayWmS_D08	; power up delay
03502 0EA7 		mBank3
03503 0EA9 1426 		BSF	CMD_LDO_0,NIC_Reset
03504 0EAA 280F 		GOTO	WriteLDO_0_D08
03505 0EAB 	;
03506 0EAB 	;
03507 0EAB 	;========================================================================================
03508 0EAB 	; Initialise NIC.
03509 0EAB 	; Loops forever if NIC error.
03510 0EAB 	;
03511 0EAB 	; Entry: none
03512 0EAB 	; Exit: none
03513 0EAB 	; RAM used: Param70, Param71, Param77, Param78, Param79, FSR
03514 0EAB 	; Calls: (1+4) reset_ether, DelayWmS_D08, innic, outnicD78W, PrintString_D08,
03515 0EAB 	;	outnic_CMDR_W, outnic_BNRY_W, outnic_ISR_FF, outnic_RCR_W, outnic_TCR_W
03516 0EAB 	; 
03517 0EAB 26A5 	init_ether	CALL	reset_ether
03518 0EAC 3002 		MOVLW	0x02	; delay_ms(2);
03519 0EAD 200A 		CALL	DelayWmS_D08
03520 0EAE 	; un-reset ether
03521 0EAE 		mBank3
03522 0EB0 1026 		BCF	CMD_LDO_0,NIC_Reset
03523 0EB1 200F 		CALL	WriteLDO_0_D08
03524 0EB2 	;
03525 0EB2 3002 		MOVLW	0x02	; delay_ms(2); 
03526 0EB3 200A 		CALL	DelayWmS_D08
03527 0EB4 2714 		CALL	innic_NE_RESET	; outnic(NE_RESET, innic(NE_RESET)) Do reset 
03528 0EB5 301F 		MOVLW	NE_RESET
03529 0EB6 275B 		CALL	outnicD78W
03530 0EB7 3002 		MOVLW	0x02	; delay_ms(2); 
03531 0EB8 200A 		CALL	DelayWmS_D08
03532 0EB9 	; if ((innic(ISR) & 0x80) == 0)  Report if failed
03533 0EB9 2718 		CALL	innic_ISR
03534 0EBA 1BF8 		BTFSC	Param78,7
03535 0EBB 2EC3 		GOTO	init_ether_NoErr
03536 0EBC 	;
CastleGate.asm   "NIC Stuff"                                             Page: 133
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

03537 0EBC 	;Display the error string
03538 0EBC 		if UsesLCD
03539 0EBC 3000 		MOVLW	NICinitErrStrPtr	;"\nNIC init err " 
03540 0EBD 2005 		CALL	PrintString_D08	;loop until init'd or forever
03541 0EBE 		mCall1To0	Delay1Sec	;delay 1 second
03542 0EC2 		endif
03543 0EC2 2EAB 		GOTO	init_ether
03544 0EC3 	;
03545 0EC3 3021 	init_ether_NoErr	MOVLW	0x21	; outnic(CMDR, 0x21) Stop, DMA abort, page 0 
03546 0EC4 2758 		CALL	outnic_CMDR_W
03547 0EC5 3002 		MOVLW	0x02	; delay_ms(2) ..wait to take effect 
03548 0EC6 200A 		CALL	DelayWmS_D08
03549 0EC7 3048 		MOVLW	DCRVAL	; outnic(DCR, DCRVAL); 
03550 0EC8 00F8 		MOVWF	Param78
03551 0EC9 300E 		MOVLW	DCR
03552 0ECA 275B 		CALL	outnicD78W
03553 0ECB 0103 		CLRW		; outnic(RBCR0, 0) Clear remote byte count  
03554 0ECC 2754 		CALL	outnic_RBCR0_W
03555 0ECD 274F 		CALL	outnic_RBCR1_0	; outnic(RBCR1, 0); 
03556 0ECE 3020 		MOVLW	0x20	; outnic(RCR, 0x20) Rx monitor mode
03557 0ECF 274C 		CALL	outnic_RCR_W
03558 0ED0 3002 		MOVLW	0x02	; outnic(TCR, 0x02) Tx internal loopback 
03559 0ED1 2749 		CALL	outnic_TCR_W
03560 0ED2 	;
03561 0ED2 3040 		MOVLW	TXSTART	; outnic(TPSR, TXSTART) Set Tx start page 
03562 0ED3 00F8 		MOVWF	Param78
03563 0ED4 3004 		MOVLW	TPSR
03564 0ED5 275B 		CALL	outnicD78W
03565 0ED6 	;
03566 0ED6 3046 		MOVLW	RXSTART	; outnic(PSTART, RXSTART) Set Rx start, stop, boundary
03567 0ED7 00F8 		MOVWF	Param78
03568 0ED8 3001 		MOVLW	PSTART
03569 0ED9 275B 		CALL	outnicD78W
03570 0EDA 	;
03571 0EDA 305F 		MOVLW	RXSTOP	; outnic(PSTOP, RXSTOP); 
03572 0EDB 00F8 		MOVWF	Param78
03573 0EDC 3002 		MOVLW	PSTOP
03574 0EDD 275B 		CALL	outnicD78W
03575 0EDE 	;
03576 0EDE 305E 		MOVLW	RXSTOP-1	; outnic(BNRY, (BYTE)(RXSTOP-1));
03577 0EDF 2746 		CALL	outnic_BNRY_W
03578 0EE0 2760 		CALL	outnic_ISR_FF	; outnic(ISR, 0xff) Clear interrupt flags
03579 0EE1 	;
03580 0EE1 01F8 		CLRF	Param78	; outnic(IMR, 0) Mask all interrupts
03581 0EE2 300F 		MOVLW	IMR
03582 0EE3 275B 		CALL	outnicD78W
03583 0EE4 	;
03584 0EE4 3061 		MOVLW	0x61	; outnic(CMDR, 0x61) Stop, DMA abort, page 1
03585 0EE5 2758 		CALL	outnic_CMDR_W
03586 0EE6 3002 		MOVLW	0x02	; delay_ms(2); 
03587 0EE7 200A 		CALL	DelayWmS_D08
03588 0EE8 	; Set Physical addr (MAC address) (6 bytes)
03589 0EE8 3001 		MOVLW	PAR0
03590 0EE9 00FA 		MOVWF	Param7A	;nic reg address
03591 0EEA 302A 		MOVLW	myeth0
03592 0EEB 0084 		MOVWF	FSR	;data ptr
03593 0EEC 1383 		BCF	STATUS,IRP
03594 0EED 3006 		MOVLW	MACLEN
03595 0EEE 00F9 		MOVWF	Param79	;Count
03596 0EEF 0800 	init_ether_L1	MOVF	INDF,W	;myeth0..myeth5
03597 0EF0 00F8 		MOVWF	Param78	;data
03598 0EF1 087A 		MOVF	Param7A,W
03599 0EF2 275B 		CALL	outnicD78W	; outnic(PAR0+i, myeth[i]); 
03600 0EF3 0AFA 		INCF	Param7A,F
03601 0EF4 0A84 		INCF	FSR,F
03602 0EF5 0BF9 		DECFSZ	Param79,F
03603 0EF6 2EEF 		GOTO	init_ether_L1
03604 0EF7 	;
03605 0EF7 	; for (i=0; i<8; i++) Multicast accept-all
03606 0EF7 01FA 		CLRF	Param7A	;Count
03607 0EF8 3008 		MOVLW	MAR0
03608 0EF9 00F9 		MOVWF	Param79	;addr
03609 0EFA 30FF 		MOVLW	0xFF
03610 0EFB 00F8 		MOVWF	Param78	;data
03611 0EFC 3008 	init_ether_L2	MOVLW	0x08
03612 0EFD 027A 		SUBWF	Param7A,W
03613 0EFE 1803 		BTFSC	STATUS,C
03614 0EFF 2F05 		GOTO	init_ether_1	;exit loop
03615 0F00 0879 		MOVF	Param79,W	; outnic(MAR0+i, 0xff); 
03616 0F01 275B 		CALL	outnicD78W
03617 0F02 0AFA 		INCF	Param7A,F
03618 0F03 0AF9 		INCF	Param79,F
03619 0F04 2EFC 		GOTO	init_ether_L2
03620 0F05 	;
03621 0F05 	; outnic(CURRP, RXSTART+1) Set current Rx page
03622 0F05 3047 	init_ether_1	MOVLW	RXSTART+1
03623 0F06 00F8 		MOVWF	Param78
03624 0F07 3007 		MOVLW	CURRP
03625 0F08 275B 		CALL	outnicD78W
03626 0F09 	; next_page = RXSTART + 1; 
03627 0F09 3047 		MOVLW	RXSTART+1
03628 0F0A 00B4 		MOVWF	next_page
03629 0F0B 3020 		MOVLW	0x20	; outnic(CMDR, 0x20) DMA abort, page 0
03630 0F0C 2758 		CALL	outnic_CMDR_W
03631 0F0D 3004 		MOVLW	0x04	; outnic(RCR, 0x04) Accept broadcasts 
03632 0F0E 274C 		CALL	outnic_RCR_W
03633 0F0F 0103 		CLRW		; outnic(TCR, 0) Normal Tx operation
03634 0F10 2749 		CALL	outnic_TCR_W
03635 0F11 2760 		CALL	outnic_ISR_FF	; outnic(ISR, 0xff) Clear interrupt flags
03636 0F12 3022 		MOVLW	0x22	; outnic(CMDR, 0x22) Start NIC
CastleGate.asm   "NIC Stuff"                                             Page: 134
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

03637 0F13 2F58 		GOTO	outnic_CMDR_W
03638 0F14 	;
03639 0F14 	;=======================================================================================
03640 0F14 	;=======================================================================================
03641 0F14 	;  Input a byte from NIC register NE_RESET
03642 0F14 	;
03643 0F14 	; Entry: none
03644 0F14 	; Exit: W & Param78=Data
03645 0F14 	; RAM used: Param78 (verified 10/2/02)
03646 0F14 	; Calls:(0) none
03647 0F14 	;
03648 0F14 301F 	innic_NE_RESET	MOVLW	NE_RESET
03649 0F15 2F1F 		GOTO	innic
03650 0F16 	;
03651 0F16 	;=======================================================================================
03652 0F16 	;  Input a byte from NIC register CURRP, current page reg for rd and wr
03653 0F16 	;
03654 0F16 	; Entry: none
03655 0F16 	; Exit: W & Param78=Data
03656 0F16 	; RAM used: Param78 (verified 10/2/02)
03657 0F16 	; Calls:(0) none
03658 0F16 	;
03659 0F16 3007 	innic_CURRP	MOVLW	CURRP
03660 0F17 2F1F 		GOTO	innic
03661 0F18 	;
03662 0F18 	;=======================================================================================
03663 0F18 	;  Input a byte from NIC register ISR, interrupt status reg for rd and wr
03664 0F18 	;
03665 0F18 	; Entry: none
03666 0F18 	; Exit: W & Param78=Data
03667 0F18 	; RAM used: Param78 (verified 10/2/02)
03668 0F18 	; Calls:(0) none
03669 0F18 	;
03670 0F18 3007 	innic_ISR	MOVLW	ISR
03671 0F19 2F1F 		GOTO	innic
03672 0F1A 	;
03673 0F1A 	;=======================================================================================
03674 0F1A 	;  Input a byte from NIC register RSAR0, low byte of remote start addr
03675 0F1A 	;
03676 0F1A 	; Entry: none
03677 0F1A 	; Exit: W & Param78=Data
03678 0F1A 	; RAM used: Param78 (verified 10/2/02)
03679 0F1A 	; Calls:(0) none
03680 0F1A 	;
03681 0F1A 3008 	innic_RSAR0	MOVLW	RSAR0
03682 0F1B 2F1F 		GOTO	innic
03683 0F1C 	;
03684 0F1C 	;=======================================================================================
03685 0F1C 	;  Input a byte from NIC register RSAR1, hi byte of remote start addr
03686 0F1C 	;
03687 0F1C 	; Entry: none
03688 0F1C 	; Exit: W & Param78=Data
03689 0F1C 	; RAM used: Param78 (verified 10/2/02)
03690 0F1C 	; Calls:(0) none
03691 0F1C 	;
03692 0F1C 3009 	innic_RSAR1	MOVLW	RSAR1
03693 0F1D 2F1F 		GOTO	innic
03694 0F1E 	;
03695 0F1E 	;=======================================================================================
03696 0F1E 	;  Input a byte from NIC register DATAPORT
03697 0F1E 	;
03698 0F1E 	; Entry: none
03699 0F1E 	; Exit: W & Param78=Data
03700 0F1E 	; RAM used: Param78 (verified 10/2/02)
03701 0F1E 	; Calls:(0) none
03702 0F1E 	;
03703 0F1E 3010 	innic_Data	MOVLW	DATAPORT
03704 0F1F 	;
03705 0F1F 	; fall trough to innic
03706 0F1F 	;=======================================================================================
03707 0F1F 	;  Input a byte from a NIC register
03708 0F1F 	;
03709 0F1F 	; Entry: W=Address
03710 0F1F 	; Exit: W & Param78=Data
03711 0F1F 	; RAM used: Param78 (verified 10/2/02)
03712 0F1F 	; Calls:(0) none
03713 0F1F 	;
03714 0F1F 	innic	
03715 0F1F 		if UsesRS232BufIO
03719 0F1F 		endif
03720 0F1F 		mSet8bitAddr
03721 0F2F 		mReadData	SelectNIC
03722 0F3E 00F8 		MOVWF	Param78
03723 0F3F 		if UsesRS232BufIO
03725 0F3F 		endif
03726 0F3F 0008 		RETURN
03727 0F40 	;
03728 0F40 	;============================================================================================
03729 0F40 	; Data in W to RSAR0
03730 0F40 	; entry:W=value for RSAR0
03731 0F40 	; exit: none
03732 0F40 	; RAM used: Param71 (verified 10/2/02)
03733 0F40 	; Calls: (0) outnic_W
03734 0F40 	;
03735 0F40 00F1 	outnic_RSPR0_W	MOVWF	Param71
03736 0F41 3008 		MOVLW	RSAR0
03737 0F42 2F6B 		GOTO	outnic_W
03738 0F43 	;
03739 0F43 	;===========================================================================
03740 0F43 	; Data in W to RSAR1
CastleGate.asm   "NIC Stuff"                                             Page: 135
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

03741 0F43 	; entry:W=value for RSAR1
03742 0F43 	; exit: none
03743 0F43 	; RAM used: Param71 (verified 10/2/02)
03744 0F43 	; Calls: (0) outnic_W
03745 0F43 	;
03746 0F43 00F1 	outnic_RSPR1_W	MOVWF	Param71
03747 0F44 3009 		MOVLW	RSAR1
03748 0F45 2F6B 		GOTO	outnic_W
03749 0F46 	;
03750 0F46 	;===========================================================================
03751 0F46 	; Data in W to BNRY
03752 0F46 	; entry:W=value for BNRY
03753 0F46 	; exit: none
03754 0F46 	; RAM used: Param71 (verified 10/2/02)
03755 0F46 	; Calls: (0) outnic_W
03756 0F46 	;
03757 0F46 00F1 	outnic_BNRY_W	MOVWF	Param71
03758 0F47 3003 		MOVLW	BNRY
03759 0F48 2F6B 		GOTO	outnic_W
03760 0F49 	;
03761 0F49 	;===========================================================================
03762 0F49 	; Data in W to TCR
03763 0F49 	; entry:W=value for TCR
03764 0F49 	; exit: none
03765 0F49 	; RAM used: Param71 (verified 10/2/02)
03766 0F49 	; Calls: (0) outnic_W
03767 0F49 	;
03768 0F49 00F1 	outnic_TCR_W	MOVWF	Param71
03769 0F4A 300D 		MOVLW	TCR
03770 0F4B 2F6B 		GOTO	outnic_W
03771 0F4C 	;
03772 0F4C 	;===========================================================================
03773 0F4C 	; Data in W to RCR
03774 0F4C 	; entry:W=value for RCR
03775 0F4C 	; exit: none
03776 0F4C 	; RAM used: Param71 (verified 10/2/02)
03777 0F4C 	; Calls: (0) outnic_W
03778 0F4C 	;
03779 0F4C 00F1 	outnic_RCR_W	MOVWF	Param71
03780 0F4D 300C 		MOVLW	RCR
03781 0F4E 2F6B 		GOTO	outnic_W
03782 0F4F 	;
03783 0F4F 	;===========================================================================
03784 0F4F 	; Set Hi byte of Byte Count to zero
03785 0F4F 	; entry:none
03786 0F4F 	; exit: none
03787 0F4F 	; RAM used: Param71 (verified 10/2/02)
03788 0F4F 	; Calls: (0) outnic_W
03789 0F4F 	;
03790 0F4F 0103 	outnic_RBCR1_0	CLRW
03791 0F50 	;
03792 0F50 	;
03793 0F50 	;===========================================================================
03794 0F50 	; Set Hi byte of Byte Count
03795 0F50 	; entry: W=byte count
03796 0F50 	; exit: none
03797 0F50 	; RAM used: Param71 (verified 10/2/02)
03798 0F50 	; Calls: (0) outnic_W
03799 0F50 	;
03800 0F50 00F1 	outnic_RBCR1_W	MOVWF	Param71
03801 0F51 300B 		MOVLW	RBCR1
03802 0F52 2F6B 		GOTO	outnic_W
03803 0F53 	;
03804 0F53 	;===========================================================================
03805 0F53 	; Set low byte of Byte Count to 1
03806 0F53 	; entry: none
03807 0F53 	; exit: none
03808 0F53 	; RAM used: Param71 (verified 10/2/02)
03809 0F53 	; Calls: (0) outnic_W
03810 0F53 	;
03811 0F53 3001 	outnic_RBCR0_1	MOVLW	0x01
03812 0F54 	;
03813 0F54 	;===========================================================================
03814 0F54 	; Set low byte of Byte Count
03815 0F54 	; entry: W=byte count
03816 0F54 	; exit: none
03817 0F54 	; RAM used: Param71 (verified 10/2/02)
03818 0F54 	; Calls: (0) outnic_W
03819 0F54 	;
03820 0F54 00F1 	outnic_RBCR0_W	MOVWF	Param71
03821 0F55 300A 		MOVLW	RBCR0
03822 0F56 2F6B 		GOTO	outnic_W
03823 0F57 	;
03824 0F57 	;
03825 0F57 	;===========================================================================
03826 0F57 	; outnic(CMDR, 0x0a) Start, DMA remote read
03827 0F57 	; entry: none
03828 0F57 	; exit: none
03829 0F57 	; RAM used: Param71 (verified 10/2/02)
03830 0F57 	; Calls: (0) outnic_CMDR_W, outnic_W
03831 0F57 	;
03832 0F57 300A 	outnic_CMDR_0A	MOVLW	0x0A
03833 0F58 	; fall through to outnic_CMDR_W
03834 0F58 	;
03835 0F58 	;===========================================================================
03836 0F58 	; Data in W to CMDR
03837 0F58 	; entry: W=Data
03838 0F58 	; exit: none
03839 0F58 	; RAM used: Param71 (verified 10/2/02)
03840 0F58 	; Calls: (0) outnic_W
CastleGate.asm   "NIC Stuff"                                             Page: 136
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

03841 0F58 	;
03842 0F58 00F1 	outnic_CMDR_W	MOVWF	Param71
03843 0F59 0103 		CLRW
03844 0F5A 2F6B 		GOTO	outnic_W
03845 0F5B 	;
03846 0F5B 	;===========================================================================
03847 0F5B 	; outnicD78W   Data in Param78 Address in W
03848 0F5B 	; entry: W=Addr, Param78=Data
03849 0F5B 	; exit: Param78 unchanged
03850 0F5B 	; RAM used: Param70, Param71, Param78 (verified 10/2/02)
03851 0F5B 	; Calls: (0) outnic_W
03852 0F5B 	;
03853 0F5B 00F0 	outnicD78W	MOVWF	Param70
03854 0F5C 0878 		MOVF	Param78,W
03855 0F5D 00F1 		MOVWF	Param71
03856 0F5E 0870 		MOVF	Param70,W
03857 0F5F 2F6B 		GOTO	outnic_W
03858 0F60 	;
03859 0F60 	;===============================================================
03860 0F60 	; outnic(ISR, 0xff);  Clear interrupt flags
03861 0F60 	; Entry: none
03862 0F60 	; Exit: none
03863 0F60 	; RAM used: Param71 (verified 10/2/02)
03864 0F60 	; Calls: (0) outnic_ISR, outnic_W
03865 0F60 	;
03866 0F60 30FF 	outnic_ISR_FF	MOVLW	0xFF
03867 0F61 00F1 		MOVWF	Param71
03868 0F62 2F6A 		GOTO	outnic_ISR
03869 0F63 		GOTO	outnic_ISR
03870 0F63 	;
03871 0F63 	;===============================================================
03872 0F63 	; Data in W to ISR
03873 0F63 	; outnic(ISR, W);  Clear interrupt flags
03874 0F63 	; Entry: W=value for ISR
03875 0F63 	; Exit: none
03876 0F63 	; RAM used: Param71 (verified 10/2/02)
03877 0F63 	; Calls: (0) outnic_ISR, outnic_W
03878 0F63 	;
03879 0F63 00F1 	outnit_ISR_W	MOVWF	Param71
03880 0F64 2F6A 		GOTO	outnic_ISR
03881 0F65 	;
03882 0F65 	;===============================================================
03883 0F65 	; outnic(ISR, 0x0A);  Clear interrupt flags
03884 0F65 	; Entry: none
03885 0F65 	; Exit: none
03886 0F65 	; RAM used: Param71 (verified 10/2/02)
03887 0F65 	; Calls: (0) outnic_ISR, outnic_W
03888 0F65 	;
03889 0F65 300A 	outnic_ISR_0A	MOVLW	0x0A
03890 0F66 00F1 		MOVWF	Param71
03891 0F67 2F6A 		GOTO	outnic_ISR
03892 0F68 		GOTO	outnic_ISR
03893 0F68 	;
03894 0F68 	;===============================================================
03895 0F68 	; outnic(ISR, 0x40) Clear remote DMA interrupt flag
03896 0F68 	; Entry: none
03897 0F68 	; Exit: none
03898 0F68 	; RAM used: Param71 (verified 10/2/02)
03899 0F68 	; Calls: (0) outnic_ISR, outnic_W
03900 0F68 	;
03901 0F68 3040 	outnic_ISR40	MOVLW	0x40
03902 0F69 00F1 		MOVWF	Param71
03903 0F6A 	;
03904 0F6A 	;===============================================================
03905 0F6A 	; Write the value in Param71 to the NICs ISR register
03906 0F6A 	;
03907 0F6A 	; Entry: Param71=value for ISR
03908 0F6A 	; Exit: none
03909 0F6A 	; RAM used: Param71 (verified 10/2/02)
03910 0F6A 	; Calls: (0) outnic_W
03911 0F6A 	;
03912 0F6A 3007 	outnic_ISR	MOVLW	ISR
03913 0F6B 	;
03914 0F6B 	;===========================================================================
03915 0F6B 	; Output a byte to a NIC register
03916 0F6B 	; Entry: Param70=Address, Param71=Data
03917 0F6B 	; Exit: none
03918 0F6B 	; RAM used: Param71 (verified 10/2/02)
03919 0F6B 	; Calls: (0) none
03920 0F6B 	;
03921 0F6B 	outnic_W	
03922 0F6B 		if UsesRS232BufIO
03926 0F6B 		endif
03927 0F6B 		mSet8bitAddr
03928 0F7B 		mWriteData	SelectNIC,Param71
03929 0F85 		if UsesRS232BufIO
03931 0F85 		endif
03932 0F85 0008 		RETURN
03933 0F86 	;
03934 0F86 	;
03935 0F86 	;
03936 0F86 	;
00986 0F86 		include	Main.asm	; 0x1000
00001 0F86 		subtitle	"Main.asm"

00002 0F86 		page
00003 0F86 	;============================================================================================
00004 0F86 	;
00005 0F86 	;  FileName: Main.asm
00006 0F86 	;  Date: 2/4/2012
CastleGate.asm   "Main.asm"                                              Page: 137
/HPRR Electrical Dept/HPRR.ASM/MasterFiles/

00007 0F86 	;  File Version: 1.0.1
00008 0F86 	;  
00009 0F86 	;  Author: David M. Flynn
00010 0F86 	;  Company: HPRR
00011 0F86 	;  Project: TCC
00012 0F86 	;
00013 0F86 	;============================================================================================
00014 0F86 	; Notes:
00015 0F86 	;  This file is common to all TCC computers.
00016 0F86 	;  It calls SetupDMFEIO at startup, and DoDMFEIO each pass through the event loop.
00017 0F86 	;
00018 0F86 	;============================================================================================
00019 0F86 	; Revision History
00020 0F86 	;
00021 0F86 	; 1.0.1   2/4/2012	Added UsesBlockCmdTable, HasAThrottle
00022 0F86 	; 1.0     9/6/2004	First Reved version.
00023 0F86 	;
00024 0F86 	;============================================================================================
00025 0F86 		ORG	0x1000
00026 1000 	;
00027 1000 	; IP addresses of CPU's
00028 1000 007C 	UDP_RxIP_HIGY	EQU	d'124'	;Highland/Greeley Panel
00029 1000 007D 	UDP_RxIP_Tcc	EQU	d'125'	;TCC Display
00030 1000 007E 	UDP_RxIP_Sig	EQU	d'126'	;Signals
00031 1000 007F 	UDP_RxIP_MP	EQU	d'127'	;Main Panel, This is me
00032 1000 	;IP 128 in not used
00033 1000 0081 	UDP_RxIP_BPKB	EQU	d'129'	;Block power keyboard
00034 1000 0082 	UDP_RxIP_CT	EQU	d'130'	;Casper Tower
00035 1000 0083 	UDP_RxIP_VW	EQU	d'131'	;Vista and Westend Yards
00036 1000 0084 	UDP_RxIP_OT	EQU	d'132'	;Overview Tower
00037 1000 0085 	UDP_RxIP_C1	EQU	d'133'	;CAB 1
00038 1000 0086 	UDP_RxIP_C2	EQU	d'134'	;CAB 2
00039 1000 0087 	UDP_RxIP_C3	EQU	d'135'	;CAB 3
00040 1000 0088 	UDP_RxIP_C4	EQU	d'136'	;CAB 4
00041 1000 0089 	UDP_RxIP_C5	EQU	d'137'	;CAB 5
00042 1000 008A 	UDP_RxIP_AT	EQU	d'138'	;Arcadia Tower
00043 1000 008B 	UDP_RxIP_BT	EQU	d'139'	;Baker Tower
00044 1000 008C 	UDP_RxIP_DT	EQU	d'140'	;Dawson Tower
00045 1000 008D 	UDP_RxIP_BV	EQU	d'141'	;Bayshore Valley Traction Co.
00046 1000 008E 	UDP_RxIP_DM	EQU	d'142'	;Delmar Passenger Terminal
00047 1000 	;
00048 1000 0001 	kUDP_DataType_LoSM	EQU	0x01
00049 1000 0002 	kUDP_DataType_HiSM	EQU	0x02
00050 1000 0003 	kUDP_DataType_BkPwr	EQU	0x03
00051 1000 0004 	kUDP_DataType_BkOcc	EQU	0x04
00052 1000 0005 	kUDP_DataType_BlkCmd	EQU	0x05
00053 1000 0006 	kUDP_DataType_BkPwr2	EQU	0x06
00054 1000 0007 	kUDP_DataType_BlkCmd2	EQU	0x07
00055 1000 0008 	kUDP_DataType_IN	EQU	0x08	;Signal System Inputs (optical block detectors, etc)
00056 1000 	;
00057 1000 	;
00058 1000 	; Name	(additional stack words required) Description
00059 1000 	;================================================================================================
00060 1000 	;calls outside this segment
00061 1000 	;Disp_decbyteW_D10	(1+1+2)
00062 1000 	;lcd_gotoxy_D10	(1+1+0) Go to an X-Y position on the display, top left is 0, 0 (W,Param78)
00063 1000 	;PrintString_D10	(1+1+2)
00064 1000 	;Disp_Hex_Byte_D10	(1+1+2) (testing only)
00065 1000 	;DisplaysW_D10	(1+1+1)
00066 1000 	;
00067 1000 	;=============================================================================
00068 1000 	;segment 2 routines
00069 1000 	;
00070 1000 	;Main	(1+4) Program entry point
00071 1000 	;  MainLoop
00072 1000 	;  InitSvsMode
00073 1000 	;    TestSW2
00074 1000 	;    TestSW3
00075 1000 	;    TestSW4
00076 1000 	;  MainLoop_IP
00077 1000 	;
00078 1000 	;DispStrLine1
00079 1000 	;DispIP
00080 1000 	;
00081 1000 	;OnTheTick	(1+0) Routines that run once every 1/20th of a second
00082 1000 	;  StopWater
00083 1000 	;  StartWater
00084 1000 	;  StartSpent
00085 1000 	;  StopSpent
00086 1000 	;  AutoFillStop
00087 1000 	;  UpdatePnlCount
00088 1000 	;
00089 1000 	;ClearRam	(1+0) Clear all RAM
00090 1000 	;
00091 1000 	;WritePwrUpRec
00092 1000 	;OnTheHalfSecond	Routines that run once every 1/2 of a second
00093 1000 	;SetSRAM_evWater	(0) Set the SRAM address for access to the next byte in the Water event record
00094 1000 	;SetupOldPulses	(0) The pulse counters come up random so preload old pulses to avoid an error
00095 1000 	;
00096 1000 	;=============================================================================
00097 1000 	;
00098 1000 	;Dispatch routines (this is segment 2)
00099 1000 	;
00100 1000 	;segment 0
00101 1000 	;	if UsesLCD
00102 1000 	;Disp_decbyteW_D10	mCall2To0	Disp_decbyteW
00103 1000 	;	RETURN
00104 1000 	;
00105 1000 	Disp_decword_D10	mCall2To0	Disp_decword
00106 1004 0008 		RETURN
CastleGate.asm   "Main.asm"                                              Page: 138
/HPRR Electrical Dept/HPRR.ASM/MasterFiles/

00107 1005 	;
00108 1005 3003 	lcd_GotoLine3	MOVLW	0x03
00109 1006 280C 		GOTO	lcd_GotoLineW_D10
00110 1007 3002 	lcd_GotoLine2	MOVLW	0x02
00111 1008 280C 		GOTO	lcd_GotoLineW_D10
00112 1009 3001 	lcd_GotoLine1	MOVLW	0x01
00113 100A 280C 		GOTO	lcd_GotoLineW_D10
00114 100B 0103 	lcd_GotoLine0	CLRW
00115 100C 	;
00116 100C 	lcd_GotoLineW_D10	mCall2To0	lcd_GotoLineW
00117 1010 0008 		RETURN
00118 1011 	;
00119 1011 	lcd_gotoxy_D10	mCall2To0	lcd_gotoxy	;top left is 0,0 (W,Param78)
00120 1015 0008 		RETURN
00121 1016 	;
00122 1016 	PrintString_D10	mCall2To0	PrintString
00123 101A 0008 		RETURN
00124 101B 	;
00125 101B 	Disp_Hex_Byte_D10	mCall2To0	Disp_Hex_Byte
00126 101F 0008 		RETURN
00127 1020 	;
00128 1020 	;
00129 1020 	;Disp_Dot	MOVLW	'.'
00130 1020 	;	GOTO	DisplaysW_D10
00131 1020 3020 	Disp_Space	MOVLW	' '
00132 1021 2823 		GOTO	DisplaysW_D10
00133 1022 303A 	Disp_Colon	MOVLW	':'
00134 1023 	DisplaysW_D10	mCall2To0	DisplaysW
00135 1027 0008 		RETURN
00136 1028 		endif		;if UsesLCD
00137 1028 	;
00138 1028 		if UsesDataLogging
00141 1028 		endif
00142 1028 	;
00143 1028 	;ReadEEROM_D10	mCall2To0	ReadEEROM
00144 1028 	;	RETURN
00145 1028 	;
00146 1028 	;WriteEEROM_D10	mCall2To0	WriteEEROM
00147 1028 	;	RETURN
00148 1028 	;
00149 1028 	WriteEEP79W_D10	mCall2To0	WriteEEP79W
00150 102C 0008 		RETURN
00151 102D 	;
00152 102D 	SRAM_Read_D10	mCall2To0	SRAM_Read
00153 1031 0008 		RETURN
00154 1032 	;
00155 1032 	;SRAM_NextAddr_D10	mCall2To0	SRAM_NextAddr
00156 1032 	;	RETURN
00157 1032 	;
00158 1032 	;Delay1Sec_D10	mCall2To0	Delay1Sec
00159 1032 	;	RETURN
00160 1032 	;
00161 1032 	DelayWmS_D10	mCall2To0	DelayWmS
00162 1036 0008 		RETURN
00163 1037 	;
00164 1037 	;DelayWuS_D10	mCall2To0	DelayWuS
00165 1037 	;	RETURN
00166 1037 	;
00167 1037 	;WriteLDO_0_D10	mCall2To0	WriteLDO_0
00168 1037 	;	RETURN
00169 1037 	;
00170 1037 	;WriteLDO_1_D10	mCall2To0	WriteLDO_1
00171 1037 	;	RETURN
00172 1037 	;
00173 1037 	ReadEEwW_D10	mCall2To0	ReadEEwW
00174 103B 0008 		RETURN
00175 103C 	;
00176 103C 	DispIP_D10	mCall2To0	DispIP
00177 1040 0008 		RETURN
00178 1041 	;
00179 1041 	;DispIP_E2_D10	mCall2To0	DispIP_E2
00180 1041 	;	RETURN
00181 1041 	;
00182 1041 	;DispMAC_D10	mCall2To0	DispMAC
00183 1041 	;	RETURN
00184 1041 	;
00185 1041 	;DispMAC_E2_D10	mCall2To0	DispMAC_E2
00186 1041 	;	RETURN
00187 1041 	;
00188 1041 	;Disp_decbyteW2pl_D10	mCall2To0	Disp_decbyteW2pl
00189 1041 	;	RETURN
00190 1041 	;
00191 1041 	SRAM_ReadPI_D10	mCall2To0	SRAM_ReadPI
00192 1045 0008 		RETURN
00193 1046 	;
00194 1046 	SRAM_WritePI_D10	mCall2To0	SRAM_WritePI
00195 104A 0008 		RETURN
00196 104B 	;
00197 104B 	SRAM_Write_D10	mCall2To0	SRAM_Write
00198 104F 0008 		RETURN
00199 1050 	;
00200 1050 	SRAM_ReadDR_D10	mCall2To0	SRAM_ReadDR
00201 1054 0008 		RETURN
00202 1055 	;
00203 1055 	;Disp_decbyteW3pl_D10	mCall2To0	Disp_decbyteW3pl
00204 1055 	;	RETURN
00205 1055 	;
00206 1055 	ReadEE79_D10	mCall2To0	ReadEE79
00207 1059 0008 		RETURN
00208 105A 	;
CastleGate.asm   "Main.asm"                                              Page: 139
/HPRR Electrical Dept/HPRR.ASM/MasterFiles/

00209 105A 	;write_nonvol_D10	mCall2To0	write_nonvol
00210 105A 	;	RETURN
00211 105A 	;
00212 105A 		if UsesSeg0DataAccess
00213 105A 		if HasAThrottle
00214 105A 	GetBlkOwnerX_D10	mCall2To0	GetBlkOwnerX
00215 105E 0008 		RETURN
00216 105F 		endif
00217 105F 		if UsesGetCabNumX
00218 105F 	GetCabNumX_D10	mCall2To0	GetCabNumX
00219 1063 0008 		RETURN
00220 1064 		endif
00221 1064 	GetSMTableHighX_D10	mCall2To0	GetSMTableHighX
00222 1068 0008 		RETURN
00223 1069 	GetGet_1X_D10	mCall2To0	GetGet_1X
00224 106D 0008 		RETURN
00225 106E 	GetGet_Read_D10	mCall2To0	GetGet_Read
00226 1072 0008 		RETURN
00227 1073 	SetSMTableHighX_D10	mCall2To0	SetSMTableHighX
00228 1077 0008 		RETURN
00229 1078 	GetCurBlkY_D10	mCall2To0	GetCurBlkY
00230 107C 0008 		RETURN
00231 107D 	GetSMDispPtrY_D10	mCall2To0	GetSMDispPtrY
00232 1081 0008 		RETURN
00233 1082 		if UsesBlockCmdTable
00234 1082 	GetBlockCmdTableX_D10	mCall2To0	GetBlockCmdTableX
00235 1086 0008 		RETURN
00236 1087 	SetBlockCmdTableX_D10	mCall2To0	SetBlockCmdTableX
00237 108B 0008 		RETURN
00238 108C 	GetBlockCmdTable2X_D10	mCall2To0	GetBlockCmdTable2X
00239 1090 0008 		RETURN
00240 1091 	SetBlockCmdTable2X_D10	mCall2To0	SetBlockCmdTable2X
00241 1095 0008 		RETURN
00242 1096 		endif
00243 1096 	GetBlockPwrTableX_D10	mCall2To0	GetBlockPwrTableX
00244 109A 0008 		RETURN
00245 109B 	SetBlockPwrTableX_D10	mCall2To0	SetBlockPwrTableX
00246 109F 0008 		RETURN
00247 10A0 	SetSet_1X_D10	mCall2To0	SetSet_1X
00248 10A4 0008 		RETURN
00249 10A5 	GetBlockPwrTable2X_D10	mCall2To0	GetBlockPwrTable2X
00250 10A9 0008 		RETURN
00251 10AA 	SetBlockPwrTable2X_D10	mCall2To0	SetBlockPwrTable2X
00252 10AE 0008 		RETURN
00253 10AF 	GetSMTableX_D10	mCall2To0	GetSMTableX
00254 10B3 0008 		RETURN
00255 10B4 	SetSMTableX_D10	mCall2To0	SetSMTableX
00256 10B8 0008 		RETURN
00257 10B9 		else
00283 10B9 		endif
00284 10B9 	;
00285 10B9 	;=================================================================================================
00286 10B9 	; Definitions for filesystem
00287 10B9 	; 
00288 10B9 	; The filesystem is in 1 or 2 ROMs (32k bytes each). At the start of the first ROM is a 
00289 10B9 	; directory of 1 or more filename blocks, each of which have pointers to 
00290 10B9 	; data blocks. The end of the directory is marked by a dummy length of FFFFh 
00291 10B9 	; 
00292 10B9 	; All the files include the appropriate HTTP headers. 
00293 10B9 	; 
00294 10B9 	; 
00295 10B9 	; Filename block structure
00296 10B9 	; WORD len;	Length of file in bytes
00297 10B9 	; WORD start;	Start address of file data in ROM
00298 10B9 	; WORD check;	TCP checksum of file
00299 10B9 	; BYTE flags;	Embedded Gateway Interface (EGI) flags
00300 10B9 	; char name[ROM_FNAMELEN]; Lower-case filename with extension
00301 10B9 	; 	
00302 10B9 	;
00303 10B9 	;====================================================================================
00304 10B9 	;====================================================================================
00305 10B9 	; Entry: none
00306 10B9 	; Exit: doesn't
00307 10B9 	; RAM used:
00308 10B9 	; Calls:(1+4) StandardInits, read_nonvol, 
00309 10B9 	;	user_config, init_ether, Disp_decbyteW_D10, scan_io,
00310 10B9 	;	get_ether, lcd_gotoxy, arp_recv, ip_recv
00311 10B9 	;
00312 10B9 	Main	mCall2To0	StandardInits
00313 10BD 	;
00314 10BD 		mCall2To0	SetupDataROM
00315 10C1 	;
00316 10C1 	;
00317 10C1 	; while (!read_nonvol() || !USER_BUTTON)  If csum error, or button 
00318 10C1 	InitDoOver	mCall2To0	read_nonvol	;myeth4, myeth5, myip
00319 10C5 	;
00320 10C5 08F8 		MOVF	Param78,F	;1=ok
00321 10C6 		SKPZ
00322 10C7 28CA 		GOTO	GoForEther	;MAC address ok and not button
00323 10C8 	;
00324 10C8 	;Error!  No MAC address
00325 10C8 26C7 	NoMACError	CALL	write_nonvol_D10
00326 10C9 	;
00327 10C9 28C1 		GOTO	InitDoOver	;loop until we have a MAC address
00328 10CA 		GOTO	InitDoOver	;loop until we have a MAC address
00329 10CA 	;
00330 10CA 	GoForEther	mCall2To1	init_ether	;Init Ethernet 
00331 10CF 	;
00332 10CF 	;
00333 10CF 	;
CastleGate.asm   "Main.asm"                                              Page: 140
/HPRR Electrical Dept/HPRR.ASM/MasterFiles/

00334 10CF 	;
00335 10CF 		mCall2To3	SetupDMFEIO
00336 10D3 		mBank0
00337 10D5 17A5 		BSF	DispLSpaces
00338 10D6 258A 		CALL	StartRunMode
00339 10D7 	;
00340 10D7 		if StartupInSvsMode
00343 10D7 		endif
00344 10D7 	;=================================================================================================
00345 10D7 	;=================================================================================================
00346 10D7 	;
00347 10D7 	;        Main loop...
00348 10D7 	;
00349 10D7 	;=================================================================================================
00350 10D7 	;
00351 10D7 	MainLoop	mCall2To0	scan_io	; Scan I/O, check timer
00352 10DB 	;
00353 10DB 	;---------------------------------------------------------------
00354 10DB 	;User Button Command Intrerpeter
00355 10DB 	;
00356 10DB 24F8 		CALL	ButtonDispatch
00357 10DC 118A 		BCF	PCLATH,3	;ButtonDispatch may return
00358 10DD 160A 		BSF	PCLATH,4	; from a long goto
00359 10DE 	;
00360 10DE 	;=========================================================================================================
00361 10DE 	;=========================================================================================================
00362 10DE 	;
00363 10DE 	; Look for incoming ethernet frames
00364 10DE 	;
00365 10DE 	; if (get_ether())  Get Ethernet frame.. 
00366 10DE 		mCall2To1	get_ether
00367 10E3 	;
00368 10E3 	;=========================================================================================================
00369 10E3 	;
00370 10E3 23AB 		CALL	DoDMFEIO
00371 10E4 	;
00372 10E4 158A 		BSF	PCLATH,3
00373 10E5 160A 		BSF	PCLATH,4
00374 10E6 2C4B 		GOTO	Do_UDP_DataXmit
00375 10E7 	Do_UDP_DataXmit_Rtn
00376 10E7 	;=========================================================================================================
00377 10E7 	;
00378 10E7 28D7 		GOTO	MainLoop
00379 10E8 	;
00380 10E8 	;====================================================================================================
00381 10E8 	;============================================================================================
00382 10E8 	; Displays the string # in W on line 0
00383 10E8 00F5 	DispStrLine0	MOVWF	Param75
00384 10E9 0103 		CLRW		; goto(0,0)
00385 10EA 28F3 		GOTO	DispStrLineN
00386 10EB 	;
00387 10EB 	;====================================
00388 10EB 	; Displays the string # in W on line 1
00389 10EB 00F5 	DispStrLine1	MOVWF	Param75
00390 10EC 3001 		MOVLW	0x01	; goto(0,1)
00391 10ED 28F3 		GOTO	DispStrLineN
00392 10EE 	;
00393 10EE 	;====================================
00394 10EE 	; Displays the string # in W on line 2
00395 10EE 00F5 	DispStrLine2	MOVWF	Param75
00396 10EF 3002 		MOVLW	0x02	; goto(0,2)
00397 10F0 28F3 		GOTO	DispStrLineN
00398 10F1 	;
00399 10F1 	;====================================
00400 10F1 	; Displays the string # in W on line 3
00401 10F1 00F5 	DispStrLine3	MOVWF	Param75
00402 10F2 3003 		MOVLW	0x03	; goto(0,3)
00403 10F3 	;
00404 10F3 200C 	DispStrLineN	CALL	lcd_GotoLineW_D10
00405 10F4 0875 		MOVF	Param75,W
00406 10F5 2816 		GOTO	PrintString_D10
00407 10F6 	;
00408 10F6 	DoErrorDisplay
00409 10F6 	MainB0Rtn	mBank0
00410 10F8 0008 		RETURN
00411 10F9 	;====================================================================================================
00412 10F9 	;
00413 10F9 28F6 	ShowRunScrn00	GOTO	MainB0Rtn
00414 10FA 	;
00415 10FA 	;====================================================================================================
00416 10FA 	; Routines that run once every 1/20th of a second
00417 10FA 	; Entry: none
00418 10FA 	; Exit: none
00419 10FA 	; RAM used: 
00420 10FA 	; Calls: 
00421 10FA 	;
00422 10FA 	OnTheTick 	mBank3
00423 10FC 08AA 		MOVF	BeepTimer,F
00424 10FD 		SKPZ
00425 10FE 03AA 		DECF	BeepTimer,F
00426 10FF 	;
00427 10FF 08A8 		MOVF	BtnDeBounceTimer,F
00428 1100 		SKPZ
00429 1101 03A8 		DECF	BtnDeBounceTimer,F
00430 1102 28F6 		GOTO	MainB0Rtn
00431 1103 	;
00432 1103 	;=============================================================================================
00433 1103 	;Routines that run once every 1/2 of a second
00434 1103 	;
00435 1103 	;
CastleGate.asm   "Main.asm"                                              Page: 141
/HPRR Electrical Dept/HPRR.ASM/MasterFiles/

00436 1103 158A 	OnTheHalfSecond	BSF	PCLATH,3
00437 1104 2C39 		GOTO	HPRROnTheHalf
00438 1105 2F80 	HPRROnTheHalf_RTN	GOTO	DispIdleDispatch
00439 1106 	;
00440 1106 	;=============================================================================================
00441 1106 	;
00442 1106 	;=============================================================================================
00443 1106 	; end of Main.asm
00444 1106 	;
00445 1106 	;
00446 1106 	;
00447 1106 	;
00448 1106 	;
00449 1106 	;
00450 1106 	;
00451 1106 	;
00452 1106 	;
00453 1106 	;
00454 1106 	;
00455 1106 	;
00456 1106 	;
00987 1106 		include	PanelControl.asm
00001 1106 		subtitle	"PanelControl.asm"

00002 1106 		page
00003 1106 	;============================================================================================
00004 1106 	;
00005 1106 	;  FileName: PanelControl.asm
00006 1106 	;  Date: 8/1/09
00007 1106 	;  File Version: 1.2
00008 1106 	;  
00009 1106 	;  Author: David M. Flynn
00010 1106 	;  Company: HPRR
00011 1106 	;  Project: Control Panel Low Level Routines
00012 1106 	;
00013 1106 	;============================================================================================
00014 1106 	; Notes:
00015 1106 	;  This file is common to all computers using GPCPU to Panel Interface.
00016 1106 	;  Select14 is used for all block modules (0..95).
00017 1106 	;
00018 1106 	; Address decode:
00019 1106 	; A0..A2 Latches on block modules
00020 1106 	; A3..A5 Column Selection
00021 1106 	; A6..A9 Row Decode
00022 1106 	; A10..A12 Function and board decode
00023 1106 	;
00024 1106 	;============================================================================================
00025 1106 	; Revision History
00026 1106 	;
00027 1106 	; 1.2     8/1/2009	Added dpIsOwner
00028 1106 	; 1.1     5/27/2009	Added ProccessButtons to this file.
00029 1106 	; 1.0     3/7/2009	Added Test all (output 24) to SvsTestOneModule
00030 1106 	; 1.0b1   6/2/2007	Added SvsTestOneModule.
00031 1106 	; 1.0a1   6/27/2005	Added PM_ReadInputs. Block module LEDs work.
00032 1106 	; 1.0d1   5/21/2005	First code.
00033 1106 	;
00034 1106 	;============================================================================================
00035 1106 	; constants
00036 1106 	;  
00037 1106 0000 	AddressLatchAdd2	EQU	b'00000000'	;add to 10 bit bit number
00038 1106 0004 	PM_BoardAdder	EQU	b'00000100'
00039 1106 0004 	PM_Board0	EQU	b'00000100'
00040 1106 0008 	PM_Board1	EQU	b'00001000'
00041 1106 000C 	PM_Board2	EQU	b'00001100'
00042 1106 0010 	ClrAdd2	EQU	b'00010000'	;address of clear
00043 1106 	;
00044 1106 0003 	PM_ButtonsHiAddr	EQU	b'00000011'
00045 1106 0000 	PM_ButtonsLo0	EQU	b'00000000'
00046 1106 0040 	PM_ButtonsLo1	EQU	b'01000000'
00047 1106 0080 	PM_ButtonsLo2	EQU	b'10000000'
00048 1106 00C0 	PM_ButtonsLo3	EQU	b'11000000'
00049 1106 0040 	PM_ButtonAdder	EQU	b'01000000'
00050 1106 	;
00051 1106 0010 	SevenSegOffset	EQU	0x10	;Add to base address
00052 1106 	;
00053 1106 	;
00054 1106 	;BlockModuleBitsL	EQU	0x0008	;One Byte for each block
00055 1106 	;BlockModuleBitsH	EQU	0x0009	; storage for LED bits
00056 1106 	;
00057 1106 	; Bank 3 RAM vars
00058 1106 	;BlockModuleNum	RES	1	;0..31
00059 1106 	;BlkModAddr0	RES	1
00060 1106 	;BlkModAddr1	RES	1
00061 1106 	;BlkModBits0	RES	1
00062 1106 	;BlkModBits1	RES	1
00063 1106 	;
00064 1106 	; Name	(additional stack words required) Description (Bank In/Out)
00065 1106 	;============================================================================================
00066 1106 	;PM_ReadInputs	(1+0) Read inputs from board W(0..2) to Param74..Param77 (3/3)
00067 1106 	;TestDispModule	(1+3) Test the module by lighting every LED (3/3)
00068 1106 	;SvsTestOneModule	(1+1) Turn ON 1 of the outputs of one module (x/3)
00069 1106 	;SvsTestModuleOFF	(1+1) Turn OFF all of the outputs of one module (x/3)
00070 1106 	;LightSevenSeg	(1+0) Light the block module's 7 seg display (3/3)
00071 1106 	;LightBlkDisplay	(1+3) Set 7 seg and 16 leds from Block Power and Cmd data (3/3)
00072 1106 	;AllOutsOff	(0)   Turn all outputs off (X/3)
00073 1106 	;ProccessButtons	Read 32,64 or 96 Btn inputs, convert to a 0..96 number (none, 1..64)
00074 1106 	;	 Call from main loop.
00075 1106 	;
00076 1106 	;--- private ---
00077 1106 	;Light16LEDs	(1+0) Light the block module's LEDs (3/3)
CastleGate.asm   "PanelControl.asm"                                      Page: 142
/HPRR Electrical Dept/HPRR.ASM/MasterFiles/

00078 1106 	;CalcModuleAddr	(0)   Convert BlockModuleNum to BlkModAddr (3/3)
00079 1106 	;StoreBlkModBits	(1+2) Store BlkModBits in SRAM (3/3)
00080 1106 	;RestoreBlkModBits	(1+2) Restore BlkModBits from SRAM (XReg=Blk#) (3/3)
00081 1106 	;SetBlkMod_Addr	(0)   Latch the address BlkModAddr and RA0 (x/3)
00082 1106 	;PM_GetData	(0)   Read Data from Panel Board(buttons). (3/3)
00083 1106 	;GetSegments	(0+2) Convert Index to Bit Pattern (3/3)
00084 1106 	;GetBlkModNum	(1+2) Convert block number to module number (3/3)
00085 1106 	;
00086 1106 	;============================================================================================
00087 1106 	;============================================================================================
00088 1106 	; Read inputs from board W(0..2) to Param74..Param77 (3/3)
00089 1106 	;
00090 1106 	; Entry: W=Board number 0..2, Bank3
00091 1106 	; Exit: Param74..Param77, Bank3
00092 1106 	; RAM Used: Param74, Param75, Param 76, Param77, Param78, Param79
00093 1106 	; Calls: (1+0) SetBlkMod_Addr, PM_GetData
00094 1106 	;
00095 1106 3903 	PM_ReadInputs	ANDLW	0x03	;Yes, I'm paranoid
00096 1107 00F8 		MOVWF	Param78
00097 1108 3003 		MOVLW	PM_ButtonsHiAddr
00098 1109 00DE 		MOVWF	BlkModAddr1
00099 110A 3004 		MOVLW	PM_BoardAdder
00100 110B 00E1 		MOVWF	BlkModBoard
00101 110C 08F8 	PM_ReadInputs_L2	MOVF	Param78,F
00102 110D 		SKPNZ		;Address offset needed?
00103 110E 2913 		GOTO	PM_ReadInputs_1	; No
00104 110F 3004 		MOVLW	PM_BoardAdder
00105 1110 07E1 		ADDWF	BlkModBoard,F
00106 1111 03F8 		DECF	Param78,F
00107 1112 290C 		GOTO	PM_ReadInputs_L2
00108 1113 	;
00109 1113 3004 	PM_ReadInputs_1	MOVLW	0x04
00110 1114 00F9 		MOVWF	Param79	;Read 4 bytes
00111 1115 3074 		MOVLW	Param74	; put the data in 74..77
00112 1116 0084 		MOVWF	FSR
00113 1117 3000 		MOVLW	PM_ButtonsLo0
00114 1118 00DD 		MOVWF	BlkModAddr0
00115 1119 2257 	PM_ReadInputs_L1	CALL	SetBlkMod_Addr
00116 111A 228A 		CALL	PM_GetData
00117 111B 0080 		MOVWF	INDF
00118 111C 0A84 		INCF	FSR,F
00119 111D 3040 		MOVLW	PM_ButtonAdder
00120 111E 07DD 		ADDWF	BlkModAddr0,F
00121 111F 0BF9 		DECFSZ	Param79,F
00122 1120 2919 		GOTO	PM_ReadInputs_L1
00123 1121 0008 		RETURN
00124 1122 	;	
00125 1122 	;============================================================================================
00126 1122 	; Test the module by lighting every LED (3/3)
00127 1122 	;
00128 1122 	; Entry: BlockModuleNum,Bank3
00129 1122 	; Exit: none, Bank3 selected
00130 1122 	; RAM Used: Param78, Param79, Param7B
00131 1122 	; Calls: (1+1) LightSevenSeg
00132 1122 	;
00133 1122 	;
00134 1122 30FF 	TestDispModule	MOVLW	DotEight
00135 1123 215E 		CALL	LightSevenSeg
00136 1124 30FD 		MOVLW	low PMLED_AllOn
00137 1125 00DF 		MOVWF	BlkModBits0
00138 1126 30FC 		MOVLW	high PMLED_AllOn
00139 1127 00E0 		MOVWF	BlkModBits1
00140 1128 1DD2 		BTFSS	TestCycleBit
00141 1129 2930 		GOTO	TestDispModule_1
00142 112A 11D2 		BCF	TestCycleBit
00143 112B 3002 		MOVLW	low PMLED_E_W_Dir
00144 112C 04DF 		IORWF	BlkModBits0,F
00145 112D 3001 		MOVLW	high PMLED_E_W_Dir
00146 112E 04E0 		IORWF	BlkModBits1,F
00147 112F 29F2 		GOTO	Light16LEDs
00148 1130 	;
00149 1130 	TestDispModule_1
00150 1130 15D2 		BSF	TestCycleBit
00151 1131 	;	MOVLW	low PMLED_E_W_EOB
00152 1131 	;	IORWF	BlkModBits0,F
00153 1131 3002 		MOVLW	high PMLED_E_W_EOB
00154 1132 04E0 		IORWF	BlkModBits1,F
00155 1133 29F2 		GOTO	Light16LEDs
00156 1134 	;
00157 1134 	;============================================================================================
00158 1134 	; Turn ON 1 of the outputs of one module (x/3)
00159 1134 	;
00160 1134 	; Entry: SvsBMdlNum,SvsBMdlVal
00161 1134 	; Exit: none, Bank3 selected
00162 1134 	; RAM Used: Param78, Param79, Param7B
00163 1134 	; Calls: (1+1) LightSevenSeg, Light16LEDs, TestDispModule
00164 1134 	;
00165 1134 	SvsTestOneModule	mBank3
00166 1136 0858 		MOVF	SvsBMdlNum,W
00167 1137 00DC 		MOVWF	BlockModuleNum
00168 1138 0859 		MOVF	SvsBMdlVal,W
00169 1139 3C18 		SUBLW	0x18	;24 test all
00170 113A 		SKPNZ
00171 113B 2922 		GOTO	TestDispModule
00172 113C 01DF 		CLRF	BlkModBits0
00173 113D 01E0 		CLRF	BlkModBits1
00174 113E 01F8 		CLRF	Param78
00175 113F 1E59 		BTFSS	SvsBMdlVal,4	;>=0x10?
00176 1140 2949 		GOTO	SvsTestOneModule_1	; No
00177 1141 	;
CastleGate.asm   "PanelControl.asm"                                      Page: 143
/HPRR Electrical Dept/HPRR.ASM/MasterFiles/

00178 1141 0859 		MOVF	SvsBMdlVal,W
00179 1142 3907 		ANDLW	0x07
00180 1143 00F9 		MOVWF	Param79
00181 1144 0AF9 		INCF	Param79,F
00182 1145 1403 		BSF	_C
00183 1146 0DF8 	SvsTestOneModule_L1	RLF	Param78,F
00184 1147 0BF9 		DECFSZ	Param79,F
00185 1148 2946 		GOTO	SvsTestOneModule_L1
00186 1149 	;
00187 1149 0878 	SvsTestOneModule_1	MOVF	Param78,W
00188 114A 215E 		CALL	LightSevenSeg
00189 114B 1A59 		BTFSC	SvsBMdlVal,4	;<0x10?
00190 114C 2954 		GOTO	SvsTestOneModule_2
00191 114D 	;
00192 114D 0A59 		INCF	SvsBMdlVal,W
00193 114E 00F9 		MOVWF	Param79
00194 114F 1403 		BSF	_C
00195 1150 0DDF 	SvsTestOneModule_L2	RLF	BlkModBits0,F
00196 1151 0DE0 		RLF	BlkModBits1,F
00197 1152 0BF9 		DECFSZ	Param79,F
00198 1153 2950 		GOTO	SvsTestOneModule_L2
00199 1154 29F2 	SvsTestOneModule_2	GOTO	Light16LEDs
00200 1155 	;
00201 1155 	;============================================================================================
00202 1155 	; Turn OFF all of the outputs of one module (x/3)
00203 1155 	;
00204 1155 	; Entry: SvsBMdlNum
00205 1155 	; Exit: none, Bank3 selected
00206 1155 	; RAM Used: Param78, Param79, Param7B, Param7C
00207 1155 	; Calls: (1+1) LightSevenSeg, Light16LEDs
00208 1155 	;
00209 1155 	SvsTestModuleOFF	mBank3
00210 1157 0858 		MOVF	SvsBMdlNum,W
00211 1158 00DC 		MOVWF	BlockModuleNum
00212 1159 01DF 		CLRF	BlkModBits0
00213 115A 01E0 		CLRF	BlkModBits1
00214 115B 	;
00215 115B 3000 		MOVLW	Dark
00216 115C 215E 		CALL	LightSevenSeg
00217 115D 29F2 		GOTO	Light16LEDs
00218 115E 	;
00219 115E 	;============================================================================================
00220 115E 	; Light the block module's 7 seg display (3/3)
00221 115E 	;
00222 115E 	; Entry: W=Dark..DotLetterF,BlockModuleNum,Bank3
00223 115E 	; Exit: none, Bank3 selected
00224 115E 	; RAM Used:Param78, Param79, Param7B
00225 115E 	; Calls: (1+0) SetBlkMod_Addr,CalcModuleAddr
00226 115E 	;
00227 115E 00FB 	LightSevenSeg	MOVWF	Param7B	;Save bit pattern
00228 115F 	;
00229 115F 	;BlkModAddr=Module Num x d'24'
00230 115F 222D 		CALL	CalcModuleAddr
00231 1160 	;
00232 1160 3010 		MOVLW	SevenSegOffset
00233 1161 07DD 		ADDWF	BlkModAddr0,F
00234 1162 		ADDCF	BlkModAddr1,F
00235 1164 	;
00236 1164 3008 		MOVLW	0x08	;Set 8 outputs
00237 1165 00F9 		MOVWF	Param79
00238 1166 	LightSevenSeg_L1	mBank0
00239 1168 	;
00240 1168 0805 		MOVF	PORTA,W
00241 1169 39FE 		ANDLW	0xFE
00242 116A 00F8 		MOVWF	Param78
00243 116B 087B 		MOVF	Param7B,W
00244 116C 3901 		ANDLW	0x01
00245 116D 0478 		IORWF	Param78,W
00246 116E 0085 		MOVWF	PORTA	;Data Bit
00247 116F 	;
00248 116F 2257 		CALL	SetBlkMod_Addr	;Latch Address, all boards
00249 1170 0861 		MOVF	BlkModBoard,W
00250 1171 06DE 		XORWF	BlkModAddr1,F
00251 1172 2257 		CALL	SetBlkMod_Addr	;Write data to BlkModBoard
00252 1173 	;
00253 1173 0861 		MOVF	BlkModBoard,W
00254 1174 06DE 		XORWF	BlkModAddr1,F
00255 1175 0ADD 		INCF	BlkModAddr0,F
00256 1176 0CFB 		RRF	Param7B,F	;Next bit
00257 1177 0BF9 		DECFSZ	Param79,F	;Last bit?
00258 1178 2966 		GOTO	LightSevenSeg_L1	; No
00259 1179 0008 		RETURN
00260 117A 	;
00261 117A 	;=================================================================================================
00262 117A 	; Set 7 seg and 16 leds from Block Power and Cmd (3/3)
00263 117A 	;
00264 117A 	; Entry: W=Block Number, Bank3
00265 117A 	; Exit: BlkModBits, Bank3
00266 117A 	; RAM Used: Param78, Param79, Param7A, Param7B, Param7C, XReg
00267 117A 	; Calls: (1+3) GetBlockPwrTableX, GetBlockPwrTable2X, StorsBlkModBits, Light16LEDs, LightSevenSeg
00268 117A 	;
00269 117A 00F2 	LightBlkDisplay	MOVWF	XReg
00270 117B 22B1 		CALL	GetBlkModNum	;Convert Blk# to Module#
00271 117C 1BF8 		BTFSC	Param78,7	;Used?
00272 117D 0008 		RETURN		; No, do nothing
00273 117E 00DC 		MOVWF	BlockModuleNum	; Yes
00274 117F 2096 		CALL	GetBlockPwrTableX_D10
00275 1180 00C0 		MOVWF	BPTemp
00276 1181 20A5 		CALL	GetBlockPwrTable2X_D10	;Param78=BPT2
00277 1182 00C1 		MOVWF	BPTemp+1
CastleGate.asm   "PanelControl.asm"                                      Page: 144
/HPRR Electrical Dept/HPRR.ASM/MasterFiles/

00278 1183 13DA 		BCF	IsMyCabFlag
00279 1184 		if HasAThrottle
00280 1184 		mCall2To3	RlyBitsToThr	;Param78=Thr#
00281 1188 		mCall2To3	XlateThrToCab
00282 118C 3C06 		SUBLW	MyCabNum
00283 118D 		SKPNZ
00284 118E 17DA 		BSF	IsMyCabFlag
00285 118F 		else
00288 118F 		endif
00289 118F 	;
00290 118F 3000 		MOVLW	0x00	;Block not powered
00291 1190 1FC0 		BTFSS	BPTemp,7	;Block PWR tbl any cab flag?
00292 1191 29B2 		GOTO	LightBlkDisplay_2	; No, block is off
00293 1192 	;
00294 1192 30D5 		MOVLW	Five
00295 1193 1840 		BTFSC	BPTemp,0	;Cab 5?
00296 1194 29B2 		GOTO	LightBlkDisplay_2	; Yes
00297 1195 	;
00298 1195 30C6 		MOVLW	Four
00299 1196 18C0 		BTFSC	BPTemp,1	;Cab 4
00300 1197 29B2 		GOTO	LightBlkDisplay_2	; Yes
00301 1198 	;	
00302 1198 3057 		MOVLW	Three
00303 1199 1940 		BTFSC	BPTemp,2	;Cab 3
00304 119A 29B2 		GOTO	LightBlkDisplay_2	; Yes
00305 119B 	;
00306 119B 3073 		MOVLW	Two
00307 119C 19C0 		BTFSC	BPTemp,3	;Cab 2
00308 119D 29B2 		GOTO	LightBlkDisplay_2	; Yes
00309 119E 	;
00310 119E 3006 		MOVLW	One
00311 119F 1A40 		BTFSC	BPTemp,4	;Cab 1
00312 11A0 29B2 		GOTO	LightBlkDisplay_2	; Yes
00313 11A1 	;
00314 11A1 1C41 		BTFSS	BPTemp+1,0	;Cab 9?
00315 11A2 29A5 		GOTO	LBD_Thr8	; No
00316 11A3 22F2 		CALL	Throttle9ToSybol
00317 11A4 29B2 		GOTO	LightBlkDisplay_2	; Yes
00318 11A5 	;
00319 11A5 1CC1 	LBD_Thr8	BTFSS	BPTemp+1,1	;Cab 8?
00320 11A6 29A9 		GOTO	LBD_Thr7	; No
00321 11A7 22EE 		CALL	Throttle8ToSybol
00322 11A8 29B2 		GOTO	LightBlkDisplay_2	; Yes
00323 11A9 	;
00324 11A9 1D41 	LBD_Thr7	BTFSS	BPTemp+1,2	;Cab 7?
00325 11AA 29AD 		GOTO	LBD_Thr6	; No
00326 11AB 22EA 		CALL	Throttle7ToSybol
00327 11AC 29B2 		GOTO	LightBlkDisplay_2	; Yes
00328 11AD 	;
00329 11AD 1DC1 	LBD_Thr6	BTFSS	BPTemp+1,3	;Cab 6
00330 11AE 29B1 		GOTO	LBD_ThrErr	; No
00331 11AF 22E6 		CALL	Throttle6ToSybol
00332 11B0 29B2 		GOTO	LightBlkDisplay_2	; Yes
00333 11B1 	;
00334 11B1 30F1 	LBD_ThrErr	MOVLW	LetterE	; No, Error!
00335 11B2 	;
00336 11B2 00F5 	LightBlkDisplay_2	MOVWF	Param75	;Save LED bits
00337 11B3 		if dpIsOwner
00338 11B3 	; Light decimal point is the block is powered by someone else.
00339 11B3 1FC0 		BTFSS	BPTemp,7
00340 11B4 29C6 		GOTO	LBD_Owner_End
00341 11B5 301F 		MOVLW	0x1F
00342 11B6 0540 		ANDWF	BPTemp,W
00343 11B7 		SKPNZ
00344 11B8 29C0 		GOTO	LBD_Owner_1
00345 11B9 2082 		CALL	GetBlockCmdTableX_D10
00346 11BA 391F 		ANDLW	0x1F
00347 11BB 0540 		ANDWF	BPTemp,W
00348 11BC 3008 		MOVLW	Dot
00349 11BD 		SKPNZ
00350 11BE 04F5 		IORWF	Param75,F
00351 11BF 29C6 		GOTO	LBD_Owner_End
00352 11C0 208C 	LBD_Owner_1	CALL	GetBlockCmdTable2X_D10
00353 11C1 390F 		ANDLW	0x0F
00354 11C2 0541 		ANDWF	BPTemp+1,W
00355 11C3 3008 		MOVLW	Dot
00356 11C4 		SKPNZ
00357 11C5 04F5 		IORWF	Param75,F
00358 11C6 0875 	LBD_Owner_End	MOVF	Param75,W	;reload LED bits
00359 11C7 		else
00364 11C7 		endif
00365 11C7 	;
00366 11C7 215E 		CALL	LightSevenSeg
00367 11C8 	;
00368 11C8 224C 		CALL	RestoreBlkModBits
00369 11C9 3005 		MOVLW	low PMMaskBiC_Ambr	;Don't change Amber LEDs
00370 11CA 05DF 		ANDWF	BlkModBits0,F
00371 11CB 3014 		MOVLW	high PMMaskBiC_Ambr
00372 11CC 05E0 		ANDWF	BlkModBits1,F
00373 11CD 	;
00374 11CD 2096 		CALL	GetBlockPwrTableX_D10
00375 11CE 00F5 		MOVWF	Param75
00376 11CF 3960 		ANDLW	b'01100000'
00377 11D0 		SKPZ		;Detecting?
00378 11D1 29DA 		GOTO	LightBlkDisplay_3	; Yes
00379 11D2 1FDA 		BTFSS	IsMyCabFlag	;My cab?
00380 11D3 29E6 		GOTO	LightBlkDisplay_5	; No
00381 11D4 	;
00382 11D4 3050 		MOVLW	low PMLED_Grn
00383 11D5 04DF 		IORWF	BlkModBits0,F
CastleGate.asm   "PanelControl.asm"                                      Page: 145
/HPRR Electrical Dept/HPRR.ASM/MasterFiles/

00384 11D6 3040 		MOVLW	high PMLED_Grn
00385 11D7 04E0 		IORWF	BlkModBits1,F
00386 11D8 2210 		CALL	Do_EOB_LEDs
00387 11D9 29F1 		GOTO	LightBlkDisplay_7
00388 11DA 	;
00389 11DA 1FDA 	LightBlkDisplay_3	BTFSS	IsMyCabFlag	;My cab?
00390 11DB 29E1 		GOTO	LightBlkDisplay_4	; No
00391 11DC 3080 		MOVLW	low PMLED_Wht
00392 11DD 04DF 		IORWF	BlkModBits0,F
00393 11DE 3028 		MOVLW	high PMLED_Wht
00394 11DF 04E0 		IORWF	BlkModBits1,F
00395 11E0 29E7 		GOTO	LightBlkDisplay_6
00396 11E1 	;
00397 11E1 	; Detecting and not powered
00398 11E1 3028 	LightBlkDisplay_4	MOVLW	low PMLED_Red
00399 11E2 04DF 		IORWF	BlkModBits0,F
00400 11E3 3080 		MOVLW	high PMLED_Red
00401 11E4 04E0 		IORWF	BlkModBits1,F
00402 11E5 29F1 		GOTO	LightBlkDisplay_7
00403 11E6 	;
00404 11E6 	; not detecting and not powered
00405 11E6 29F1 	LightBlkDisplay_5	GOTO	LightBlkDisplay_7
00406 11E7 	;
00407 11E7 	; detecting and powered
00408 11E7 2210 	LightBlkDisplay_6	CALL	Do_EOB_LEDs
00409 11E8 08F8 		MOVF	Param78,F
00410 11E9 		SKPZ
00411 11EA 29F1 		GOTO	LightBlkDisplay_7
00412 11EB 	;
00413 11EB 	; light east/west detection LEDs
00414 11EB 	LightBlkDisplay_6_1
00415 11EB 	;	MOVLW	low PMLED_EastDir
00416 11EB 	;	BTFSS	Param75,5	; bit5 = Detect West
00417 11EB 	;	IORWF	BlkModBits0,F
00418 11EB 3001 		MOVLW	high PMLED_EastDir
00419 11EC 1EF5 		BTFSS	Param75,5	; bit5 = Detect West
00420 11ED 04E0 		IORWF	BlkModBits1,F
00421 11EE 3002 		MOVLW	low PMLED_WestDir
00422 11EF 1F75 		BTFSS	Param75,6	; bit6 = Detect East
00423 11F0 04DF 		IORWF	BlkModBits0,F
00424 11F1 	;	MOVLW	high PMLED_WestDir
00425 11F1 	;	BTFSS	Param75,6	; bit6 = Detect East
00426 11F1 	;	IORWF	BlkModBits1,F
00427 11F1 	;
00428 11F1 	; done
00429 11F1 2244 	LightBlkDisplay_7	CALL	StoreBlkModBits
00430 11F2 	;
00431 11F2 	; fall trhrough to Light16LEDs
00432 11F2 	;============================================================================================
00433 11F2 	; Light the block module's LEDs (3/3)
00434 11F2 	;
00435 11F2 	; Entry: BlockModuleNum,BlkModBits,Bank3
00436 11F2 	; Exit: none, Bank3 selected
00437 11F2 	; RAM Used:Param78, Param79, Param7B, Param7C
00438 11F2 	; Calls: (1+0) SetBlkMod_Addr,CalcModuleAddr
00439 11F2 	;
00440 11F2 085F 	Light16LEDs	MOVF	BlkModBits0,W	;Save bit pattern
00441 11F3 00FB 		MOVWF	Param7B
00442 11F4 0860 		MOVF	BlkModBits1,W
00443 11F5 00FC 		MOVWF	Param7C
00444 11F6 	;
00445 11F6 222D 		CALL	CalcModuleAddr
00446 11F7 	;
00447 11F7 3010 		MOVLW	0x10	;Set 16 outputs
00448 11F8 00F9 		MOVWF	Param79
00449 11F9 	Light16LEDs_L1	mBank0
00450 11FB 	;
00451 11FB 0805 		MOVF	PORTA,W
00452 11FC 39FE 		ANDLW	0xFE
00453 11FD 00F8 		MOVWF	Param78
00454 11FE 087B 		MOVF	Param7B,W
00455 11FF 3901 		ANDLW	0x01
00456 1200 0478 		IORWF	Param78,W
00457 1201 0085 		MOVWF	PORTA	;Data Bit
00458 1202 	;
00459 1202 2257 		CALL	SetBlkMod_Addr	;Latch Address and data
00460 1203 0861 		MOVF	BlkModBoard,W
00461 1204 06DE 		XORWF	BlkModAddr1,F
00462 1205 2257 		CALL	SetBlkMod_Addr
00463 1206 	;
00464 1206 0861 		MOVF	BlkModBoard,W
00465 1207 06DE 		XORWF	BlkModAddr1,F
00466 1208 0ADD 		INCF	BlkModAddr0,F
00467 1209 		SKPNZ
00468 120A 0ADE 		INCF	BlkModAddr1,F
00469 120B 0CFC 		RRF	Param7C,F
00470 120C 0CFB 		RRF	Param7B,F
00471 120D 0BF9 		DECFSZ	Param79,F
00472 120E 29F9 		GOTO	Light16LEDs_L1
00473 120F 0008 		RETURN
00474 1210 	;
00475 1210 	;=============================================================================================
00476 1210 	;
00477 1210 01F8 	Do_EOB_LEDs	CLRF	Param78
00478 1211 		mBank0
00479 1213 0821 		MOVF	tickcount,W
00480 1214 		mBank3
00481 1216 3910 		ANDLW	0x10
00482 1217 		SKPNZ
00483 1218 0008 		RETURN
CastleGate.asm   "PanelControl.asm"                                      Page: 146
/HPRR Electrical Dept/HPRR.ASM/MasterFiles/

00484 1219 22BA 		CALL	GetEOBDetectors
00485 121A 3960 		ANDLW	0x60	;E/W
00486 121B 		SKPNZ
00487 121C 0008 		RETURN
00488 121D 3C60 		SUBLW	0x60
00489 121E 		SKPZ		;Both?
00490 121F 2A23 		GOTO	Do_EOB_LEDs_1	; No
00491 1220 	;
00492 1220 3002 		MOVLW	high PMLED_E_W_EOB	;Both
00493 1221 04E0 		IORWF	BlkModBits1,F
00494 1222 0008 		RETURN
00495 1223 	;
00496 1223 3002 	Do_EOB_LEDs_1	MOVLW	low PMLED_EastEOB
00497 1224 1EF8 		BTFSS	Param78,5	; bit5 = Detect West
00498 1225 04DF 		IORWF	BlkModBits0,F
00499 1226 3002 		MOVLW	high PMLED_EastEOB
00500 1227 1EF8 		BTFSS	Param78,5	; bit5 = Detect West
00501 1228 04E0 		IORWF	BlkModBits1,F
00502 1229 	;	MOVLW	low PMLED_WestEOB
00503 1229 	;	BTFSS	Param78,6	; bit6 = Detect East
00504 1229 	;	IORWF	BlkModBits0,F
00505 1229 3003 		MOVLW	high PMLED_WestEOB
00506 122A 1F78 		BTFSS	Param78,6	; bit6 = Detect East
00507 122B 04E0 		IORWF	BlkModBits1,F	
00508 122C 0008 		RETURN
00509 122D 	;
00510 122D 	;===================================================================================
00511 122D 	;Convert BlockModuleNum to BlkModAddr (3/3)
00512 122D 	;BlkModAddr = (ModuleNum mod 32) x d'24'
00513 122D 	;BlkModBoard = (ModuleNum \ 32) x 4 + 1
00514 122D 	;
00515 122D 	; Entry: Bank3
00516 122D 	; Exit: none, Bank3 selected
00517 122D 	; RAM Used:none
00518 122D 	; Calls: (0) none
00519 122D 	;
00520 122D 085C 	CalcModuleAddr	MOVF	BlockModuleNum,W
00521 122E 391F 		ANDLW	0x1F
00522 122F 00DD 		MOVWF	BlkModAddr0	;0x15 x1
00523 1230 01DE 		CLRF	BlkModAddr1	;0x0015 x1
00524 1231 07DD 		ADDWF	BlkModAddr0,F	;0x002A x2
00525 1232 07DD 		ADDWF	BlkModAddr0,F	;0x003F x3
00526 1233 		ADDCF	BlkModAddr1,F	;0x003F x3
00527 1235 1003 		BCF	_C
00528 1236 0DDD 		RLF	BlkModAddr0,F
00529 1237 0DDE 		RLF	BlkModAddr1,F	;0x007E
00530 1238 0DDD 		RLF	BlkModAddr0,F
00531 1239 0DDE 		RLF	BlkModAddr1,F	;0x00FC
00532 123A 0DDD 		RLF	BlkModAddr0,F
00533 123B 0DDE 		RLF	BlkModAddr1,F	;0x01F8
00534 123C 085C 		MOVF	BlockModuleNum,W
00535 123D 3960 		ANDLW	0x60
00536 123E 00E1 		MOVWF	BlkModBoard	;00,20,40
00537 123F 0EE1 		SWAPF	BlkModBoard,F	;0,2,4
00538 1240 0DE1 		RLF	BlkModBoard,F	;0,4,8
00539 1241 3004 		MOVLW	0x04
00540 1242 07E1 		ADDWF	BlkModBoard,F	;4,8,C
00541 1243 0008 		RETURN
00542 1244 	;============================================================================================
00543 1244 	; Store BlkModBits in SRAM (3/3)
00544 1244 	;
00545 1244 	; Entry: XReg=Block Number,BlkModBits,Bank3
00546 1244 	; Exit: none, Bank3 selected
00547 1244 	; RAM Used:Param78, XReg
00548 1244 	; Calls: (1+2) SetSet_1X
00549 1244 	;
00550 1244 085F 	StoreBlkModBits	MOVF	BlkModBits0,W
00551 1245 00F8 		MOVWF	Param78
00552 1246 300A 		MOVLW	low BlockModuleBitsL
00553 1247 20A0 		CALL	SetSet_1X_D10
00554 1248 0860 		MOVF	BlkModBits1,W
00555 1249 00F8 		MOVWF	Param78
00556 124A 300B 		MOVLW	low BlockModuleBitsH
00557 124B 28A0 		GOTO	SetSet_1X_D10
00558 124C 	;
00559 124C 	;============================================================================================
00560 124C 	; Restore BlkModBits from SRAM (3/3)
00561 124C 	;
00562 124C 	; Entry: XReg=Block Number,Bank3
00563 124C 	; Exit: BlkModBits, Bank3 selected
00564 124C 	; RAM Used:Param78, XReg
00565 124C 	; Calls: (1+2) GetGet_1X
00566 124C 	;
00567 124C 300A 	RestoreBlkModBits	MOVLW	low BlockModuleBitsL
00568 124D 2069 		CALL	GetGet_1X_D10
00569 124E 00DF 		MOVWF	BlkModBits0
00570 124F 300B 		MOVLW	low BlockModuleBitsH
00571 1250 2069 		CALL	GetGet_1X_D10
00572 1251 00E0 		MOVWF	BlkModBits1
00573 1252 0008 		RETURN
00574 1253 	;
00575 1253 	;============================================================================================
00576 1253 	; Turn all outputs off
00577 1253 	;
00578 1253 	; Entry: none
00579 1253 	; Exit: none
00580 1253 	; RAM Used:
00581 1253 	; Calls:
00582 1253 	;
00583 1253 	AllOutsOff	mBank3
CastleGate.asm   "PanelControl.asm"                                      Page: 147
/HPRR Electrical Dept/HPRR.ASM/MasterFiles/

00584 1255 3010 		MOVLW	ClrAdd2
00585 1256 00DE 		MOVWF	BlkModAddr1
00586 1257 	;
00587 1257 	; fall through to SetBlkMod_Addr
00588 1257 	;=================================================================================
00589 1257 	; Latch the address BlkModAddr and RA0 (x/3)
00590 1257 	;
00591 1257 	; Entry:BlkModAddr, RA0=Data Bit
00592 1257 	; Exit:address bus and CurrentAddr = BlkModAddr
00593 1257 	;      PORTD is set for output, Bank3 selected
00594 1257 	; RAM used: none (verified 6/26/05)
00595 1257 	; Calls:(0) none
00596 1257 	;
00597 1257 	SetBlkMod_Addr	mBank1
00598 1259 3000 		MOVLW	All_Out
00599 125A 0088 		MOVWF	TRISD
00600 125B 1703 		BSF	_RP1	;Bank3
00601 125C 085D 		MOVF	BlkModAddr0,W
00602 125D 0220 		SUBWF	CurrentAddr0,W
00603 125E 1903 		BTFSC	_Z
00604 125F 2A6E 		GOTO	SetBlkMod_Addr_1
00605 1260 085D 		MOVF	BlkModAddr0,W
00606 1261 00A0 		MOVWF	CurrentAddr0	;Put A0..A7 on the bus
00607 1262 		mBank0
00608 1264 0088 		MOVWF	PORTD
00609 1265 	;
00610 1265 0806 		MOVF	PORTB,W
00611 1266 39F0 		ANDLW	AddressMask
00612 1267 3800 		IORLW	Select0
00613 1268 0086 		MOVWF	PORTB
00614 1269 1206 		BCF	PORTB,SelectEnable
00615 126A 0000 		NOP		;Delay 200nS
00616 126B 1606 		BSF	PORTB,SelectEnable
00617 126C 	;
00618 126C 		mBank3
00619 126E 085E 	SetBlkMod_Addr_1	MOVF	BlkModAddr1,W
00620 126F 0221 		SUBWF	CurrentAddr1,W
00621 1270 1903 		BTFSC	_Z
00622 1271 2A7E 		GOTO	SetBlkMod_Addr_2
00623 1272 085E 		MOVF	BlkModAddr1,W
00624 1273 00A1 		MOVWF	CurrentAddr1	;Put A8..A15 on the bus
00625 1274 		mBank0
00626 1276 0088 		MOVWF	PORTD
00627 1277 	;
00628 1277 0806 		MOVF	PORTB,W
00629 1278 39F0 		ANDLW	AddressMask
00630 1279 3801 		IORLW	Select1
00631 127A 0086 		MOVWF	PORTB
00632 127B 1206 		BCF	PORTB,SelectEnable
00633 127C 0000 		NOP
00634 127D 1606 		BSF	PORTB,SelectEnable
00635 127E 	;
00636 127E 	SetBlkMod_Addr_2	mBank0
00637 1280 0806 		MOVF	PORTB,W
00638 1281 39F0 		ANDLW	AddressMask
00639 1282 380E 		IORLW	Select14	;Select Brain to Panel Boards
00640 1283 0086 		MOVWF	PORTB
00641 1284 1206 		BCF	PORTB,SelectEnable	;Latch Address and RA0 into buffers on Panel boards
00642 1285 0000 		NOP
00643 1286 1606 		BSF	PORTB,SelectEnable
00644 1287 		mBank3
00645 1289 	;
00646 1289 0008 		RETURN
00647 128A 	;
00648 128A 	;============================================================================================
00649 128A 	; Read Data from Panel Board(buttons). (3/3)
00650 128A 	;
00651 128A 	; Entry: BlkModAddr1, Bank3
00652 128A 	; Exit: W=Data, Bank3
00653 128A 	; RAM Used: none
00654 128A 	; Calls: (0) none
00655 128A 	;	
00656 128A 0861 	PM_GetData	MOVF	BlkModBoard,W
00657 128B 065E 		XORWF	BlkModAddr1,W
00658 128C 00A1 		MOVWF	CurrentAddr1
00659 128D 		mBank0
00660 128F 0088 		MOVWF	PORTD
00661 1290 	;
00662 1290 0806 		MOVF	PORTB,W
00663 1291 39F0 		ANDLW	AddressMask
00664 1292 3801 		IORLW	Select1
00665 1293 0086 		MOVWF	PORTB
00666 1294 1206 		BCF	PORTB,SelectEnable	;put address on bus
00667 1295 0000 		NOP
00668 1296 1606 		BSF	PORTB,SelectEnable
00669 1297 	;
00670 1297 		mBank1
00671 1299 30FF 		MOVLW	All_In
00672 129A 0088 		MOVWF	TRISD
00673 129B 1283 		BCF	_RP0	;Bank 0
00674 129C 0806 		MOVF	PORTB,W
00675 129D 39F0 		ANDLW	AddressMask
00676 129E 380E 		IORLW	Select14
00677 129F 0086 		MOVWF	PORTB
00678 12A0 1206 		BCF	PORTB,SelectEnable	;Latch address
00679 12A1 0000 		NOP
00680 12A2 0000 		NOP
00681 12A3 0808 		MOVF	PORTD,W
00682 12A4 1606 		BSF	PORTB,SelectEnable
00683 12A5 		mBank3
CastleGate.asm   "PanelControl.asm"                                      Page: 148
/HPRR Electrical Dept/HPRR.ASM/MasterFiles/

00684 12A7 0008 		RETURN
00685 12A8 	;
00686 12A8 	;======================================================================================
00687 12A8 	; Convert Index to Bit Pattern (hex digit x 2 + 1 for Dot)
00688 12A8 	;
00689 12A8 	; Entry: W=0x00..0x21 Index to Segments table
00690 12A8 	; Exit: W=LED bit pattern
00691 12A8 	; RAM Used: none
00692 12A8 	; Calls: (0+2) GetGet_Read
00693 12A8 	;
00694 12A8 019E 	GetSegments	CLRF	SRAM_Addr1
00695 12A9 3E28 		ADDLW	low Segments
00696 12AA 009D 		MOVWF	SRAM_Addr0
00697 12AB 		ADDCF	SRAM_Addr1,F
00698 12AD 3000 		MOVLW	high Segments
00699 12AE 3E10 		ADDLW	low evDataROM
00700 12AF 079E 		ADDWF	SRAM_Addr1,F
00701 12B0 286E 		GOTO	GetGet_Read_D10
00702 12B1 	;
00703 12B1 	;======================================================================================
00704 12B1 	; Convert block number to module number (3/3)
00705 12B1 	;
00706 12B1 	; Entry: W=Block Number
00707 12B1 	; Exit: W & Param78 = Module Number
00708 12B1 	; RAM Used: none
00709 12B1 	; Calls: (0+2) GetGet_Read
00710 12B1 	;
00711 12B1 019E 	GetBlkModNum	CLRF	SRAM_Addr1
00712 12B2 3E64 		ADDLW	low BlkModID
00713 12B3 009D 		MOVWF	SRAM_Addr0
00714 12B4 		ADDCF	SRAM_Addr1,F
00715 12B6 3000 		MOVLW	high BlkModID
00716 12B7 3E10 		ADDLW	low evDataROM
00717 12B8 079E 		ADDWF	SRAM_Addr1,F
00718 12B9 286E 		GOTO	GetGet_Read_D10
00719 12BA 	;
00720 12BA 	;========================================================================================
00721 12BA 	;
00722 12BA 	; Entry: XReg=Block Num
00723 12BA 	; Exit:
00724 12BA 	;
00725 12BA 01F4 	GetEOBDetectors	CLRF	Param74
00726 12BB 0872 		MOVF	XReg,W
00727 12BC 00FA 		MOVWF	Param7A
00728 12BD 019F 		CLRF	SRAM_Addr2
00729 12BE 3006 		MOVLW	high EOB_Detectors
00730 12BF 3E10 		ADDLW	low evDataROM
00731 12C0 009E 		MOVWF	SRAM_Addr1
00732 12C1 3086 		MOVLW	low EOB_Detectors
00733 12C2 077A 		ADDWF	Param7A,W
00734 12C3 009D 		MOVWF	SRAM_Addr0
00735 12C4 		ADDCF	SRAM_Addr1,F
00736 12C6 087A 		MOVF	Param7A,W
00737 12C7 079D 		ADDWF	SRAM_Addr0,F
00738 12C8 		ADDCF	SRAM_Addr1,F
00739 12CA 2041 		CALL	SRAM_ReadPI_D10	;LSB of east SM
00740 12CB 00FB 		MOVWF	Param7B
00741 12CC 202D 		CALL	SRAM_Read_D10
00742 12CD 00FC 		MOVWF	Param7C
00743 12CE 		mBank3
00744 12D0 3CFE 		SUBLW	0xFE	;-none
00745 12D1 		SKPNZ		;valid SM #?
00746 12D2 2AD8 		GOTO	GetEOBDetectors_1	; No
00747 12D3 087C 		MOVF	Param7C,W
00748 12D4 00F2 		MOVWF	XReg
00749 12D5 2064 		CALL	GetSMTableHighX_D10
00750 12D6 1BF8 		BTFSC	Param78,7	;SM ControlBit
00751 12D7 16F4 		BSF	Param74,5	;West
00752 12D8 	;
00753 12D8 087B 	GetEOBDetectors_1	MOVF	Param7B,W
00754 12D9 3CFE 		SUBLW	0xFE	;-none
00755 12DA 		SKPNZ		;valid SM #?
00756 12DB 2AE1 		GOTO	GetEOBDetectors_2	; No
00757 12DC 087B 		MOVF	Param7B,W
00758 12DD 00F2 		MOVWF	XReg
00759 12DE 2064 		CALL	GetSMTableHighX_D10
00760 12DF 1BF8 		BTFSC	Param78,7	;SM ControlBit
00761 12E0 1774 		BSF	Param74,6	;East
00762 12E1 	;	
00763 12E1 087A 	GetEOBDetectors_2	MOVF	Param7A,W
00764 12E2 00F2 		MOVWF	XReg	;restore XReg
00765 12E3 0874 		MOVF	Param74,W	;result
00766 12E4 00F8 		MOVWF	Param78
00767 12E5 0008 		RETURN
00768 12E6 	;
00769 12E6 	;
00770 12E6 	;========================================================================================
00771 12E6 	; Get the correct sybol for this block/throttle
00772 12E6 	;
00773 12E6 	; Entry: XReg=BlkNum
00774 12E6 	; Exit: W=bit pattern
00775 12E6 	; RAM user:
00776 12E6 	; Calls:
00777 12E6 	;
00778 12E6 3007 	Throttle6ToSybol	MOVLW	High BlkThr6ToSym
00779 12E7 009E 		MOVWF	SRAM_Addr1
00780 12E8 3092 		MOVLW	low BlkThr6ToSym
00781 12E9 2AF5 		GOTO	ThrottleToSybol
00782 12EA 	;
00783 12EA 3007 	Throttle7ToSybol	MOVLW	High BlkThr7ToSym
CastleGate.asm   "PanelControl.asm"                                      Page: 149
/HPRR Electrical Dept/HPRR.ASM/MasterFiles/

00784 12EB 009E 		MOVWF	SRAM_Addr1
00785 12EC 30E1 		MOVLW	low BlkThr7ToSym
00786 12ED 2AF5 		GOTO	ThrottleToSybol
00787 12EE 	;
00788 12EE 3008 	Throttle8ToSybol	MOVLW	High BlkThr8ToSym
00789 12EF 009E 		MOVWF	SRAM_Addr1
00790 12F0 3030 		MOVLW	low BlkThr8ToSym
00791 12F1 2AF5 		GOTO	ThrottleToSybol
00792 12F2 	;
00793 12F2 3008 	Throttle9ToSybol	MOVLW	High BlkThr9ToSym
00794 12F3 009E 		MOVWF	SRAM_Addr1
00795 12F4 307F 		MOVLW	low BlkThr9ToSym
00796 12F5 	;
00797 12F5 0772 	ThrottleToSybol	ADDWF	XReg,W	;BlkNum
00798 12F6 009D 		MOVWF	SRAM_Addr0
00799 12F7 		ADDCF	SRAM_Addr1,F
00800 12F9 3010 		MOVLW	low evDataROM
00801 12FA 079E 		ADDWF	SRAM_Addr1,F
00802 12FB 286E 		GOTO	GetGet_Read_D10
00803 12FC 	;
00804 12FC 	;=================================================================================================
00805 12FC 	;===============================================================================================
00806 12FC 	; Read 32,64 or 96 Btn inputs, convert to a 0..96 number (none, 1..64)
00807 12FC 	; If a block button is pressed, covert it to a block number and
00808 12FC 	;  set block number.
00809 12FC 	;
00810 12FC 	; Entry: None
00811 12FC 	; Exit: LastBtn
00812 12FC 	;
00813 12FC 3000 	ProccessButtons	MOVLW	0x00	;Board 0x00
00814 12FD 2106 		CALL	PM_ReadInputs	;Param74..Param77
00815 12FE 	;
00816 12FE 3020 		MOVLW	d'32'	;last btn #
00817 12FF 00F8 		MOVWF	Param78	;Btn#=Module#+1
00818 1300 3020 		MOVLW	0x20	;test 32 btns
00819 1301 00F9 		MOVWF	Param79
00820 1302 0DF4 	ProccessButtons_L1	RLF	Param74,F
00821 1303 0DF5 		RLF	Param75,F
00822 1304 0DF6 		RLF	Param76,F
00823 1305 0DF7 		RLF	Param77,F
00824 1306 1C03 		BTFSS	_C	;Button Active?
00825 1307 2B0C 		GOTO	ProccessButtons_1	; Yes
00826 1308 	;
00827 1308 03F8 		DECF	Param78,F
00828 1309 0BF9 		DECFSZ	Param79,F
00829 130A 2B02 		GOTO	ProccessButtons_L1
00830 130B 	;
00831 130B 		if BlockToBrainBds>1
00850 130B 		endif
00851 130B 	;
00852 130B 		if BlockToBrainBds>2
00871 130B 		endif
00872 130B 	;
00873 130B 2B78 		GOTO	NoBtn
00874 130C 	;
00875 130C 	;Found one Param78=Btn#
00876 130C 	;	
00877 130C 0878 	ProccessButtons_1	MOVF	Param78,W
00878 130D 0250 		SUBWF	LastBtn,W	;Compare to the last btn found
00879 130E 		SKPNZ
00880 130F 2B79 		GOTO	Debounce_Btn
00881 1310 	;
00882 1310 1CD2 		BTFSS	TestModeFlag	;Test mode?
00883 1311 2B15 		GOTO	ProccessButtons_2	; No
00884 1312 	;
00885 1312 	;------------------
00886 1312 	; Do Test
00887 1312 0378 		DECF	Param78,W	;Module#
00888 1313 00DC 		MOVWF	BlockModuleNum
00889 1314 2922 		GOTO	TestDispModule
00890 1315 	;------------------
00891 1315 	;
00892 1315 0878 	ProccessButtons_2	MOVF	Param78,W
00893 1316 00D0 		MOVWF	LastBtn	;1..64
00894 1317 	; convert Btn to block number
00895 1317 3007 		MOVLW	high BtnToBlkNum
00896 1318 3E10 		ADDLW	low evDataROM
00897 1319 009E 		MOVWF	SRAM_Addr1
00898 131A 3071 		MOVLW	low BtnToBlkNum
00899 131B 0778 		ADDWF	Param78,W	;1..64
00900 131C 009D 		MOVWF	SRAM_Addr0
00901 131D 		ADDCF	SRAM_Addr1,F
00902 131F 206E 		CALL	GetGet_Read_D10
00903 1320 	;
00904 1320 1BF8 		BTFSC	Param78,7	;Valid block?
00905 1321 2B7A 		GOTO	DoBeep	; No
00906 1322 	;
00907 1322 00F2 		MOVWF	XReg	;XReg=Block Number
00908 1323 	;
00909 1323 	; Handle the btn for this block
00910 1323 	; If this block is used by another then do nothing
00911 1323 	; If this block is not in use then take it.
00912 1323 	; If this block is in use by us turn it off.
00913 1323 	;
00914 1323 	;XReg=BlockNum
00915 1323 	;LastCabVal 1..9, cab 1..DT
00916 1323 	;BPTemp2>>BlockCmdTable, BPTemp2+1>>BlockCmdTable2
00917 1323 	;
00918 1323 0849 		MOVF	LastCabVal,W
00919 1324 		SKPNZ
CastleGate.asm   "PanelControl.asm"                                      Page: 150
/HPRR Electrical Dept/HPRR.ASM/MasterFiles/

00920 1325 2B35 		GOTO	MainLoop_7_NotValid	;handle no cab selected
00921 1326 00F8 		MOVWF	Param78	;Cab #
00922 1327 		mCall2To3	XlateCabToThr	;if Cab>5 translate to throttle#
00923 132B 08F8 		MOVF	Param78,F	;Throttle #
00924 132C 		SKPNZ
00925 132D 2B35 		GOTO	MainLoop_7_NotValid	;If it's on and ours clr blk else beep.
00926 132E 	;	
00927 132E 		mCall2To3	ThrToRlyBits	;Param78>>BPTemp2
00928 1332 	;
00929 1332 2096 		CALL	GetBlockPwrTableX_D10
00930 1333 1FF8 		BTFSS	Param78,7	;In use?
00931 1334 2B41 		GOTO	MainLoop_7_BlkSet	;No
00932 1335 	;
00933 1335 	;If the block in XReg is on and ours clearr the block else beep.
00934 1335 	;
00935 1335 2082 	MainLoop_7_NotValid	CALL	GetBlockCmdTableX_D10
00936 1336 00C0 		MOVWF	BPTemp
00937 1337 208C 		CALL	GetBlockCmdTable2X_D10
00938 1338 00C1 		MOVWF	BPTemp+1
00939 1339 	;
00940 1339 1BC0 		BTFSC	BPTemp,7	;Is it ours?
00941 133A 2B3D 		GOTO	MainLoop_7_BlkClr	; Yes, turn it off. was MainLoop_7_Ours	
00942 133B 1FC1 		BTFSS	BPTemp+1,7	;Is it ours?
00943 133C 2B7A 		GOTO	DoBeep	; No
00944 133D 	;
00945 133D 3080 	MainLoop_7_BlkClr	MOVLW	0x80
00946 133E 00C2 		MOVWF	BPTemp2
00947 133F 00C3 		MOVWF	BPTemp2+1
00948 1340 2B65 		GOTO	MainLoop_7_BlkSet_1
00949 1341 	;
00950 1341 	;---------------------------------
00951 1341 	; Test to see if a parallel block is commanded to the same throttle, if not then assign the block else beep.
00952 1341 	;
00953 1341 	; Entry: XReg=BlkNum, BPTemp2=BlockCMD, LastCabVal=Cab#
00954 1341 	;
00955 1341 237F 	MainLoop_7_BlkSet	CALL	GetParallelBlkID
00956 1342 1BF8 		BTFSC	Param78,7	;Has a parallel block?
00957 1343 2B65 		GOTO	MainLoop_7_BlkSet_1	; No
00958 1344 	;check the parallel blocks
00959 1344 0872 		MOVF	XReg,W
00960 1345 00FA 		MOVWF	Param7A	;Save the real block number.
00961 1346 0878 		MOVF	Param78,W
00962 1347 00F2 		MOVWF	XReg	;Parallel Blk ID# (aka first blknum of set)
00963 1348 00FB 		MOVWF	Param7B
00964 1349 	;
00965 1349 2096 	MainLoop_7_BlkSet_L1	CALL	GetBlockPwrTableX_D10
00966 134A 1FF8 		BTFSS	Param78,7
00967 134B 2B5E 		GOTO	MainLoop_7_BlkSet_Nxt
00968 134C 00C0 		MOVWF	BPTemp
00969 134D 20A5 		CALL	GetBlockPwrTable2X_D10
00970 134E 00C1 		MOVWF	BPTemp+1
00971 134F 		mCall2To3	RlyBitsToThr	;BPTemp>>Param78
00972 1353 08F8 		MOVF	Param78,F	;In use?
00973 1354 		SKPNZ
00974 1355 2B5E 		GOTO	MainLoop_7_BlkSet_Nxt	; No
00975 1356 	;
00976 1356 		mCall2To3	XlateThrToCab	;RAM used: Param78, Param79
00977 135A 0878 		MOVF	Param78,W	;Cab using this block
00978 135B 0249 		SUBWF	LastCabVal,W	;Cab to be assigned
00979 135C 		SKPNZ
00980 135D 2B7A 		GOTO	DoBeep	;This cab has another block
00981 135E 	;
00982 135E 0AF2 	MainLoop_7_BlkSet_Nxt	INCF	XReg,F
00983 135F 237F 		CALL	GetParallelBlkID
00984 1360 027B 		SUBWF	Param7B,W	;Parallel Block ID#
00985 1361 		SKPNZ
00986 1362 2B49 		GOTO	MainLoop_7_BlkSet_L1
00987 1363 	;
00988 1363 087A 		MOVF	Param7A,W
00989 1364 00F2 		MOVWF	XReg
00990 1365 	;
00991 1365 	;Dump duplicate commands
00992 1365 208C 	MainLoop_7_BlkSet_1	CALL	GetBlockCmdTable2X_D10
00993 1366 0243 		SUBWF	BPTemp2+1,W
00994 1367 		SKPZ
00995 1368 2B6D 		GOTO	MainLoop_7_BlkSet_2
00996 1369 2082 		CALL	GetBlockCmdTableX_D10
00997 136A 0242 		SUBWF	BPTemp2,W
00998 136B 		SKPNZ
00999 136C 0008 		RETURN
01000 136D 	;
01001 136D 0843 	MainLoop_7_BlkSet_2	MOVF	BPTemp2+1,W
01002 136E 2091 		CALL	SetBlockCmdTable2X_D10
01003 136F 0842 		MOVF	BPTemp2,W
01004 1370 2087 		CALL	SetBlockCmdTableX_D10
01005 1371 16DA 		BSF	BlockCmdChngFlag
01006 1372 175A 		BSF	BlockCmdChngFlag2
01007 1373 		mCall2To3	CLICK
01008 1377 0008 		RETURN
01009 1378 	;
01010 1378 01D0 	NoBtn	CLRF	LastBtn
01011 1379 	Debounce_Btn
01012 1379 	;
01013 1379 0008 		RETURN
01014 137A 	;
01015 137A 	DoBeep	mCall2To3	Beep
01016 137E 0008 		RETURN
01017 137F 	;==============================================================================================
01018 137F 	;
01019 137F 3007 	GetParallelBlkID	MOVLW	high ParallelBlks
CastleGate.asm   "PanelControl.asm"                                      Page: 151
/HPRR Electrical Dept/HPRR.ASM/MasterFiles/

01020 1380 3E10 		ADDLW	low evDataROM
01021 1381 009E 		MOVWF	SRAM_Addr1
01022 1382 3024 		MOVLW	low ParallelBlks
01023 1383 0772 		ADDWF	XReg,W
01024 1384 009D 		MOVWF	SRAM_Addr0
01025 1385 		ADDCF	SRAM_Addr1,F
01026 1387 286E 		GOTO	GetGet_Read_D10
01027 1388 	;
01028 1388 	;
00988 1388 		include	CG IO.ASM
00001 1388 		subtitle	CG IO.asm
00002 1388 	;
00003 1388 	;
00004 1388 	;
00005 1388 	;in SMTable each Byte represents one Switch Machine
00006 1388 	; bit0 = Has been sent to TCC Com I/O
00007 1388 	; bit1 = unused
00008 1388 	; bit2 = unused
00009 1388 	; bit3 = unused
00010 1388 	; bit4 = unused
00011 1388 	; bit5 = Feed Back
00012 1388 	; bit6 = Command if 1 then bit 7 will also be 1
00013 1388 	; bit7 = Control
00014 1388 	;
00015 1388 	;SMControlMask	EQU	0x7F
00016 1388 	;SMFBMask	EQU	0xDF
00017 1388 	;SMChangedMask	EQU	0xFE
00018 1388 	;SMCnFMask	EQU	0xA0
00019 1388 	;SMCMDMask	EQU	0x40
00020 1388 	;
00021 1388 	;
00022 1388 	OutputC_D10	mCall2To3	OutputC
00023 138C 0008 		RETURN
00024 138D 	;
00025 138D 	InputC_D10	mCall2To3	InputC
00026 1391 0008 		RETURN
00027 1392 	;
00028 1392 	OutputB_D10	mCall2To3	OutputB
00029 1396 0008 		RETURN
00030 1397 	;
00031 1397 	InputB_D10	mCall2To3	InputB
00032 139B 0008 		RETURN
00033 139C 	;
00034 139C 	OutputA_D10	mCall2To3	OutputA
00035 13A0 0008 		RETURN
00036 13A1 	;
00037 13A1 	InputA_D10	mCall2To3	InputA
00038 13A5 0008 		RETURN
00039 13A6 	;
00040 13A6 	Output_D10	mCall2To3	Output
00041 13AA 0008 		RETURN
00042 13AB 	;
00043 13AB 	;CONSTANTS ******************************************
00044 13AB 	;
00045 13AB 0005 	kMaxRetry	EQU	0x05
00046 13AB 	;
00047 13AB 0002 	LastSMNumber	EQU	0x0002
00048 13AB 0040 	EastBound	EQU	0x40
00049 13AB 0020 	WestBound	EQU	0x20
00050 13AB 	;
00051 13AB 0010 	Cab1Mask	EQU	0x10
00052 13AB 0008 	Cab2Mask	EQU	0x08
00053 13AB 0004 	Cab3Mask	EQU	0x04
00054 13AB 0002 	Cab4Mask	EQU	0x02
00055 13AB 0001 	Cab5Mask	EQU	0x01
00056 13AB 000F 	Cab1InvertMask	EQU	0x0F
00057 13AB 0017 	Cab2InvertMask	EQU	0x17
00058 13AB 001B 	Cab3InvertMask	EQU	0x1B
00059 13AB 001D 	Cab4InvertMask	EQU	0x1D
00060 13AB 001E 	Cab5InvertMask	EQU	0x1E
00061 13AB 	;
00062 13AB 	;=============================================================
00063 13AB 	;         ********** MAIN ***********
00064 13AB 	;=============================================================
00065 13AB 	;
00066 13AB 	DoDMFEIO
00067 13AB 		if UsePsuedoReset
00070 13AB 		endif
00071 13AB 	;
00072 13AB 	;
00073 13AB 		mBank3
00074 13AD 1C1C 		BTFSS	UDP_DataReceived	;Any UDP data?
00075 13AE 2BE4 		GOTO	MainLoop_E2	; No
00076 13AF 101C 		BCF	UDP_DataReceived
00077 13B0 	;
00078 13B0 		include RecBlkPwr.inc
00001 13B0 	;====================================
00002 13B0 	;
00003 13B0 0817 	Receive_BlockPwr	MOVF	SRAM_UDP_Rx_DT,W
00004 13B1 3C03 		SUBLW	kUDP_DataType_BkPwr
00005 13B2 		SKPZ
00006 13B3 2BBD 		GOTO	Receive_BlockPwr_End
00007 13B4 	;
00008 13B4 081A 		MOVF	SRAM_DestAddr1_Rx,W
00009 13B5 3C04 		SUBLW	low evUDP_BlockPwrTable
00010 13B6 		SKPZ
00011 13B7 2BE4 		GOTO	MainLoop_E2
00012 13B8 	;
00013 13B8 		mCall2To0	CopyUDPBlockPwrTable
00014 13BC 2BE4 		GOTO	MainLoop_E2
CastleGate.asm   CG IO.asm                                               Page: 152
/HPRR Electrical Dept/HPRR.ASM/MasterFiles/

00015 13BD 	;
00016 13BD 	Receive_BlockPwr_End
00017 13BD 	;====================================
00018 13BD 	;
00019 13BD 0817 	Receive_BlockPwr2	MOVF	SRAM_UDP_Rx_DT,W
00020 13BE 3C06 		SUBLW	kUDP_DataType_BkPwr2
00021 13BF 		SKPZ
00022 13C0 2BCA 		GOTO	Receive_BlockPwr2_End
00023 13C1 	;
00024 13C1 081A 		MOVF	SRAM_DestAddr1_Rx,W
00025 13C2 3C06 		SUBLW	low evUDP_BlockPwrTable2
00026 13C3 		SKPZ
00027 13C4 2BE4 		GOTO	MainLoop_E2
00028 13C5 	;
00029 13C5 		mCall2To0	CopyUDPBlockPwrTable2
00030 13C9 2BE4 		GOTO	MainLoop_E2
00031 13CA 	;
00032 13CA 	;
00033 13CA 	Receive_BlockPwr2_End
00034 13CA 	;===================================
00035 13CA 	;
00036 13CA 0817 	Receive_SMLow	MOVF	SRAM_UDP_Rx_DT,W
00037 13CB 3C01 		SUBLW	kUDP_DataType_LoSM
00038 13CC 		SKPZ
00039 13CD 2BD7 		GOTO	Receive_SMLow_End
00040 13CE 	;
00041 13CE 081A 		MOVF	SRAM_DestAddr1_Rx,W
00042 13CF 3C02 		SUBLW	low evUDP_SMTable
00043 13D0 		SKPZ
00044 13D1 2BE4 		GOTO	MainLoop_E2
00045 13D2 	;
00046 13D2 		mCall2To0	CopyUDPSMTable
00047 13D6 2BE4 		GOTO	MainLoop_E2
00048 13D7 	;
00049 13D7 	Receive_SMLow_End
00050 13D7 	;=====================================
00051 13D7 	;
00052 13D7 0817 	Receive_SMHigh	MOVF	SRAM_UDP_Rx_DT,W
00053 13D8 3C02 		SUBLW	kUDP_DataType_HiSM
00054 13D9 		SKPZ
00055 13DA 2BE4 		GOTO	Receive_SMHigh_End
00056 13DB 	;
00057 13DB 081A 		MOVF	SRAM_DestAddr1_Rx,W
00058 13DC 3C03 		SUBLW	low evUDP_SMTableHigh
00059 13DD 		SKPZ
00060 13DE 2BE4 		GOTO	MainLoop_E2
00061 13DF 	;
00062 13DF 		mCall2To0	CopyUDPSMTableHigh
00063 13E3 2BE4 		GOTO	MainLoop_E2
00064 13E4 	;
00065 13E4 	Receive_SMHigh_End
00066 13E4 	;======================================================================================
00079 13E4 	;
00080 13E4 	;======================================================================================
00081 13E4 	; Enters here when no UDP packet was received
00082 13E4 	;
00083 13E4 	MainLoop_E2	mBank3
00084 13E6 	;
00085 13E6 		if UsesSpeaker
00086 13E6 	; turn off beeper
00087 13E6 1D53 		BTFSS	BeepOn
00088 13E7 2BF2 		GOTO	MainLoop_1
00089 13E8 08AA 		MOVF	BeepTimer,F
00090 13E9 		SKPZ
00091 13EA 2BF2 		GOTO	MainLoop_1
00092 13EB 1153 		BCF	BeepOn
00093 13EC 301D 		MOVLW	low SPKR	;#<SPKR or / =Low byte
00094 13ED 00B3 		MOVWF	CurBlk
00095 13EE 3004 		MOVLW	high SPKR	;#>SPKR or mod =Hi byte
00096 13EF 00B4 		MOVWF	CurBlk+1
00097 13F0 13AD 		BCF	OActive,7
00098 13F1 2392 		CALL	OutputB_D10
00099 13F2 	;
00100 13F2 		endif
00101 13F2 	;
00102 13F2 	;
00103 13F2 	MainLoop_1	mCall2To0	SyncBlkPwr	;kill old 0x00 block cmds
00104 13F6 		mCall2To0	SyncSMs	;kill Valid bits if Cmd = Ctrl
00105 13FA 	;
00106 13FA 		mBank0
00107 13FC 1828 		BTFSC	ServiceMode
00108 13FD 0008 		RETURN
00109 13FE 	;
00110 13FE 		mBank3
00111 1400 0846 		MOVF	DisplayBlkNum,W
00112 1401 217A 		CALL	LightBlkDisplay
00113 1402 0846 		MOVF	DisplayBlkNum,W
00114 1403 0AC6 		INCF	DisplayBlkNum,F
00115 1404 	;
00116 1404 3C4B 		SUBLW	kMaxBlockNum
00117 1405 		SKPNZ		;All blocks done?
00118 1406 01C6 		CLRF	DisplayBlkNum	; Yes
00119 1407 	;
00120 1407 	; look for any active block module button and set the block data
00121 1407 22FC 		CALL	ProccessButtons
00122 1408 	;
00123 1408 	;
00124 1408 		mCall2To0	SetBlockPwr
00125 140C 		mCall2To0	ScanBlockPwr	;test next 5 blocks
00126 1410 		mCall2To3	Loop7	;Light Odd LEDs not in SM data
CastleGate.asm   CG IO.asm                                               Page: 153
/HPRR Electrical Dept/Castlegate/Firmware/

00127 1414 	;
00128 1414 		mCall2To3	ScanCabBtns
00129 1418 	;
00130 1418 	; Fall through to MainLoop5 ;Set SMs for one route
00131 1418 		include MainLoop5.inc
00001 1418 	;===========================================================================================
00002 1418 	; Set SMs based on block power selections
00003 1418 	;
00004 1418 	; If Root Block and Normal Blocks are powered by the same cab turn SM's OFF
00005 1418 	; else if Root and Reverse Blocks are powered by the same cab turn SM's ON
00006 1418 	; else if Root is powered by a different cab than Reverse block turn SM's ON
00007 1418 	; else if neither Root or Reverce Blocks are powered and RevBlkRegFlag turn SM's OFF
00008 1418 	;
00009 1418 	; Entry:SMDispPtr>>MLSMData
00010 1418 	; Exit: SMDispPtr unchanged, (Param75,Param76,Param77 Cab#'s for Root, Norm, Rev blocks)
00011 1418 	; RAM used: XReg, YReg, Param74, Param78, Param79, Param7A, Param7C
00012 1418 	; Calls:
00013 1418 	;
00014 1418 01F5 	MainLoop5	CLRF	Param75	;Root blk's cab
00015 1419 01F6 		CLRF	Param76	;Normal blk's cab
00016 141A 01F7 		CLRF	Param77	;Reverse blk's cab
00017 141B 3075 		MOVLW	Param75
00018 141C 0084 		MOVWF	FSR
00019 141D 	;
00020 141D 3006 		MOVLW	SMRootBlk
00021 141E 00F3 		MOVWF	YReg
00022 141F 207D 	ML5_BlkCab_L1	CALL	GetSMDispPtrY_D10
00023 1420 1BF8 		BTFSC	Param78,7	;<128? Is there a Root?
00024 1421 2C26 		GOTO	ML5_BlkCab_Next	; No
00025 1422 00F2 		MOVWF	XReg
00026 1423 205F 		CALL	GetCabNumX_D10	;returns W=0..9, Z
00027 1424 0080 		MOVWF	INDF
00028 1425 1780 		BSF	INDF,7	; Yes, this block exists
00029 1426 	;
00030 1426 0A84 	ML5_BlkCab_Next	INCF	FSR,F
00031 1427 0AF3 		INCF	YReg,F
00032 1428 0AF3 		INCF	YReg,F
00033 1429 300C 		MOVLW	SMRevBlk+2
00034 142A 0273 		SUBWF	YReg,W
00035 142B 		SKPZ
00036 142C 2C1F 		GOTO	ML5_BlkCab_L1
00037 142D 	;
00038 142D 	;
00039 142D 		if UsesAutoSMCtrl
00040 142D 	; If we don't control this section then MainLoop5_SMLEDs
00041 142D 	;
00042 142D 3013 		MOVLW	SMEnable+1
00043 142E 00F3 		MOVWF	YReg	;MSB of SMEnable
00044 142F 207D 		CALL	GetSMDispPtrY_D10
00045 1430 1BF8 		BTFSC	Param78,7	;Valid psuedo SM?
00046 1431 2C3C 		GOTO	MainLoop5_NoEnable	; No
00047 1432 	;
00048 1432 00F4 		MOVWF	Param74	;Save for later
00049 1433 03F3 		DECF	YReg,F	; SMEnable (LSB)
00050 1434 207D 		CALL	GetSMDispPtrY_D10	; a psuedo SM in SMTableHigh
00051 1435 00F2 		MOVWF	XReg
00052 1436 2064 		CALL	GetSMTableHighX_D10
00053 1437 3080 		MOVLW	0x80
00054 1438 1B74 		BTFSC	Param74,6	;Invert bit?
00055 1439 06F8 		XORWF	Param78,F	; Yes
00056 143A 1FF8 		BTFSS	Param78,7	;We have this section?
00057 143B 2C77 		GOTO	MainLoop5_SMLEDs	; No, Just do LEDs
00058 143C 	;
00059 143C 	;Check for a toggle switch
00060 143C 3011 	MainLoop5_NoEnable	MOVLW	SMToggle+1
00061 143D 00F3 		MOVWF	YReg
00062 143E 207D 		CALL	GetSMDispPtrY_D10	;MSB of Toggle input
00063 143F 00F4 		MOVWF	Param74	;Save for later
00064 1440 1BF8 		BTFSC	Param78,7	;Has a toggle SW?
00065 1441 2C4E 		GOTO	MainLoop5_AutoSet	; No, no toggle sw
00066 1442 				;High Byte of Toggle input
00067 1442 				; decodes as:
00068 1442 				; NotUsedFlag, InvertFlag, Slot1, Slot0,
00069 1442 				; not used, Bd2, Bd1, Bd0
00070 1442 03F3 		DECF	YReg,F
00071 1443 0835 		MOVF	SMDispPtr,W
00072 1444 00B8 		MOVWF	CurSM
00073 1445 0836 		MOVF	SMDispPtr+1,W
00074 1446 00B9 		MOVWF	CurSM+1
00075 1447 238D 		CALL	InputC_D10	;Read Toggle SW, (CurSM),Y
00076 1448 	;
00077 1448 3080 		MOVLW	0x80
00078 1449 1B74 		BTFSC	Param74,6	;Invert Flag?
00079 144A 06B1 		XORWF	IActive,F	;Invert Value as needed
00080 144B 	;	
00081 144B 1FB1 		BTFSS	IActive,7
00082 144C 2C66 		GOTO	MainLoop5_SMOFF	;disable this sm
00083 144D 2C64 		GOTO	MainLoop5_SMON
00084 144E 	;
00085 144E 	;	
00086 144E 	;--------------------------------------------
00087 144E 	;
00088 144E 1FF5 	MainLoop5_AutoSet	BTFSS	Param75,7	;Is there a Root?
00089 144F 2C77 		GOTO	MainLoop5_SMLEDs	; No
00090 1450 300F 		MOVLW	0x0F
00091 1451 0575 		ANDWF	Param75,W	;SMRootBlk Cab
00092 1452 		SKPNZ		;any cab on?
00093 1453 2CC5 		GOTO	MainLoop5_RNP	; No, root block not pwrd
00094 1454 	;
00095 1454 	; Get Normal Block's power
CastleGate.asm   CG IO.asm                                               Page: 154
/HPRR Electrical Dept/HPRR.ASM/MasterFiles/

00096 1454 	;
00097 1454 300F 		MOVLW	0x0F
00098 1455 0576 		ANDWF	Param76,W	;NormBlk, returns W=0..9, Z
00099 1456 		SKPNZ		;any cab on?
00100 1457 2C5C 		GOTO	MainLoop5_1	; No, Check the reverse block
00101 1458 	;
00102 1458 	; If Root and Normal Blocks share the same cab turn off SMs
00103 1458 	;
00104 1458 0876 		MOVF	Param76,W	;Normal block's cab
00105 1459 0275 		SUBWF	Param75,W	;Root block's cab
00106 145A 		SKPNZ		;Same Cab On?
00107 145B 2C66 		GOTO	MainLoop5_SMOFF	; Yes, turn off SMs
00108 145C 	;
00109 145C 	; Get Reverse Block's power
00110 145C 	;
00111 145C 0877 	MainLoop5_1	MOVF	Param77,W	;Reverse Block, returns W=0..9, Z
00112 145D 390F 		ANDLW	0x0F
00113 145E 		SKPNZ		;any cab on?
00114 145F 2CD0 		GOTO	MainLoop5_TRBR	; No, Skip it
00115 1460 	;
00116 1460 	; If Root and Reverse Blocks share the same cab turn on SMs
00117 1460 	;
00118 1460 0877 		MOVF	Param77,W	;Rev block's cab
00119 1461 0275 		SUBWF	Param75,W	;Root block's cab
00120 1462 		SKPZ		;Same Cab On?
00121 1463 2C77 		GOTO	MainLoop5_SMLEDs	; No
00122 1464 	;
00123 1464 3040 	MainLoop5_SMON	MOVLW	SMCMDMask	;SM CMD Bit
00124 1465 2C67 		GOTO	MainLoop5_SM_E2
00125 1466 0103 	MainLoop5_SMOFF	CLRW		; No, SM CMD Bit
00126 1467 00FC 	MainLoop5_SM_E2	MOVWF	Param7C
00127 1468 3001 		MOVLW	SMNumOff+1	; First SM
00128 1469 00F3 		MOVWF	YReg
00129 146A 	;
00130 146A 207D 	MainLoop5_SM_L1	CALL	GetSMDispPtrY_D10	;MSB of SM#
00131 146B 03F3 		DECF	YReg,F	;YReg>>LSB of SM#
00132 146C 1BF8 		BTFSC	Param78,7	;Valid SM#?
00133 146D 2C71 		GOTO	MainLoop5_SM_Next	; No
00134 146E 00F9 		MOVWF	Param79	;Save MSB of SM#
00135 146F 207D 		CALL	GetSMDispPtrY_D10	;Get LSB of SM
00136 1470 24D6 		CALL	DoSMSet
00137 1471 3003 	MainLoop5_SM_Next	MOVLW	0x03
00138 1472 07F3 		ADDWF	YReg,F	;point to MSB of next SM 
00139 1473 3007 		MOVLW	SMNum3Off+3
00140 1474 0273 		SUBWF	YReg,W
00141 1475 		SKPZ
00142 1476 2C6A 		GOTO	MainLoop5_SM_L1
00143 1477 	;
00144 1477 		endif		;UsesAutoSMCtrl=1
00145 1477 	;
00146 1477 	;======================================================================================================
00147 1477 	; Set SM LEDs
00148 1477 	;
00149 1477 	; Entry:SMDispPtr>>MLSMData (Param75,Param76,Param77 Cab#'s for Root, Norm, Rev blocks)
00150 1477 	; Exit: SMDispPtr++, 
00151 1477 	; RAM used: XReg, YReg, Param74, Param75, Param78, Param79
00152 1477 	; Calls: GetSMDispPtrY, GetSMDataSMDispY, GetCabNumX
00153 1477 	;
00154 1477 3014 	MainLoop5_SMLEDs	MOVLW	SMFlagsWord
00155 1478 00F3 		MOVWF	YReg
00156 1479 207D 		CALL	GetSMDispPtrY_D10
00157 147A 00F4 		MOVWF	Param74	;save flags for later
00158 147B 	;
00159 147B 	;	GOTO	MainLoop5_Next	;tc
00160 147B 	;
00161 147B 		if LightUnusedSMLEDs
00162 147B 		else
00175 147B 		endif
00176 147B 	;
00177 147B 3001 		MOVLW	SMNumOff+1	;High Byte of Address
00178 147C 24ED 		CALL	GetSMDataSMDispY	; Get SM Data
00179 147D 13AD 		BCF	OActive,7
00180 147E 1BF8 		BTFSC	Param78,7	;SM is ON? Conrol Bit
00181 147F 17AD 		BSF	OActive,7	; Yes, LEDs On
00182 1480 	;
00183 1480 	; The SM2InvFlag and SM2ReqFlag are only used for Zone control psuedo SMs
00184 1480 	;
00185 1480 1D74 		BTFSS	Param74,SM2InvFlag
00186 1481 2C8A 		GOTO	MainLoop5_SMLEDs_3
00187 1482 19F4 		BTFSC	Param74,SM2ReqFlag
00188 1483 2C91 		GOTO	MainLoop5_SMLEDs_6
00189 1484 	; if 2nd SM is on invert the bit
00190 1484 3003 		MOVLW	SMNum2Off+1	;High Byte of Address
00191 1485 24ED 		CALL	GetSMDataSMDispY	; Get SM Data
00192 1486 3080 		MOVLW	0x80
00193 1487 1BF8 		BTFSC	Param78,7	;SM2 is ON?
00194 1488 06AD 		XORWF	OActive,F	; Yes, Invert the bit
00195 1489 2C96 		GOTO	MainLoop5_SMLEDs_5
00196 148A 	;
00197 148A 	; 2nd SM also required
00198 148A 1DF4 	MainLoop5_SMLEDs_3	BTFSS	Param74,SM2ReqFlag	;Second SM required?
00199 148B 2C96 		GOTO	MainLoop5_SMLEDs_5	; No
00200 148C 3003 		MOVLW	SMNum2Off+1	;High Byte of Address
00201 148D 24ED 		CALL	GetSMDataSMDispY	; Get SM Data
00202 148E 1FF8 		BTFSS	Param78,7	;SM2 is ON?
00203 148F 13AD 		BCF	OActive,7	; No
00204 1490 2C96 		GOTO	MainLoop5_SMLEDs_5
00205 1491 	;
00206 1491 	; Inverted 2nd SM Required
00207 1491 3003 	MainLoop5_SMLEDs_6	MOVLW	SMNum2Off+1	;High Byte of Address
CastleGate.asm   CG IO.asm                                               Page: 155
/HPRR Electrical Dept/HPRR.ASM/MasterFiles/

00208 1492 24ED 		CALL	GetSMDataSMDispY	; Get SM Data
00209 1493 3080 		MOVLW	0x80
00210 1494 1BF8 		BTFSC	Param78,7	;SM2 is ON?
00211 1495 17AD 		BSF	OActive,7	; No
00212 1496 	;
00213 1496 300D 	MainLoop5_SMLEDs_5	MOVLW	SMLamp+1	;First SM LED
00214 1497 00F3 	MainLoop5_SMLEDs_L1	MOVWF	YReg
00215 1498 207D 		CALL	GetSMDispPtrY_D10	;Block #
00216 1499 03F3 		DECF	YReg,F	;point to output# SMLamp or SMLamp2
00217 149A 1BF8 		BTFSC	Param78,7	;Valid Block# or Output?
00218 149B 2CAB 		GOTO	MainLoop5_SMLEDs_4	; No
00219 149C 	;
00220 149C 1AF4 		BTFSC	Param74,SMLampIsOBFlag	;Output Board or Block Module?
00221 149D 2CA6 		GOTO	ML5_SMLEDs_OB	; Output Board
00222 149E 	;
00223 149E 00F2 		MOVWF	XReg	;Put Block# in XReg
00224 149F 224C 		CALL	RestoreBlkModBits	;Move the block's LED bits into ram.
00225 14A0 207D 		CALL	GetSMDispPtrY_D10	;Bit#
00226 14A1 		mCall2To3	SetBlockModuleLED
00227 14A5 	;
00228 14A5 	;
00229 14A5 2CAB 		GOTO	MainLoop5_SMLEDs_4
00230 14A6 	;
00231 14A6 	; This SMs lamps are connected to an output board
00232 14A6 0835 	ML5_SMLEDs_OB	MOVF	SMDispPtr,W
00233 14A7 00B8 		MOVWF	CurSM
00234 14A8 0836 		MOVF	SMDispPtr+1,W
00235 14A9 00B9 		MOVWF	CurSM+1
00236 14AA 2388 		CALL	OutputC_D10	;(CurSM),Y
00237 14AB 	;
00238 14AB 300E 	MainLoop5_SMLEDs_4	MOVLW	SMLamp2
00239 14AC 0273 		SUBWF	YReg,W
00240 14AD 		SKPNZ
00241 14AE 2CB6 		GOTO	MainLoop5_SMLEDs_2
00242 14AF 	;
00243 14AF 300F 		MOVLW	SMLamp2+1
00244 14B0 1CF4 		BTFSS	Param74,SML2InvFlag
00245 14B1 2C97 		GOTO	MainLoop5_SMLEDs_L1
00246 14B2 3080 		MOVLW	0x80
00247 14B3 06AD 		XORWF	OActive,F
00248 14B4 300F 		MOVLW	SMLamp2+1
00249 14B5 2C97 		GOTO	MainLoop5_SMLEDs_L1
00250 14B6 	;
00251 14B6 	MainLoop5_SMLEDs_2	
00252 14B6 	;
00253 14B6 	;==================================================
00254 14B6 	;
00255 14B6 01F3 	MainLoop5_Next	CLRF	YReg
00256 14B7 3016 		MOVLW	SMAddBlk
00257 14B8 07B5 		ADDWF	SMDispPtr,F
00258 14B9 		ADDCF	SMDispPtr+1,F
00259 14BB 207D 		CALL	GetSMDispPtrY_D10
00260 14BC 3CFF 		SUBLW	EOD
00261 14BD 		SKPZ
00262 14BE 0008 		RETURN
00263 14BF 	;
00264 14BF 3046 		MOVLW	low MLSM1
00265 14C0 00B5 		MOVWF	SMDispPtr
00266 14C1 300B 		MOVLW	high MLSM1
00267 14C2 3E10 		ADDLW	low evDataROM
00268 14C3 00B6 		MOVWF	SMDispPtr+1
00269 14C4 0008 		RETURN
00270 14C5 	;
00271 14C5 		if UsesAutoSMCtrl
00272 14C5 	; Turn off SMs if Root and Reverse blocks are not used by any cab
00273 14C5 3014 	MainLoop5_RNP	MOVLW	SMFlagsWord
00274 14C6 00F3 		MOVWF	YReg
00275 14C7 207D 		CALL	GetSMDispPtrY_D10
00276 14C8 1B78 		BTFSC	Param78,RootCabReqFlag	;Is the root blk req?
00277 14C9 2C77 		GOTO	MainLoop5_SMLEDs	; Yes, Skip it
00278 14CA 0875 		MOVF	Param75,W	;Root
00279 14CB 0477 		IORWF	Param77,W	;Rev
00280 14CC 390F 		ANDLW	0x0F
00281 14CD 		SKPZ		;any cab on?
00282 14CE 2C77 		GOTO	MainLoop5_SMLEDs	; Yes, Skip it
00283 14CF 2C66 		GOTO	MainLoop5_SMOFF	; No, turn off SMs
00284 14D0 	;
00285 14D0 3014 	MainLoop5_TRBR	MOVLW	SMFlagsWord
00286 14D1 00F3 		MOVWF	YReg
00287 14D2 207D 		CALL	GetSMDispPtrY_D10
00288 14D3 1E78 		BTFSS	Param78,RevBlkReqFlag
00289 14D4 2C77 		GOTO	MainLoop5_SMLEDs
00290 14D5 2C66 		GOTO	MainLoop5_SMOFF
00291 14D6 	;
00292 14D6 	;=======================================================================================
00293 14D6 	; Entry:W= SM #, Param79=MSB of SM#, Param7C=SMCMDMask or 0x00
00294 14D6 	;
00295 14D6 00F2 	DoSMSet	MOVWF	XReg
00296 14D7 1C79 		BTFSS	Param79,0	;High SM?
00297 14D8 20AF 		CALL	GetSMTableX_D10	; No
00298 14D9 1879 		BTFSC	Param79,0	;High SM?
00299 14DA 2064 		CALL	GetSMTableHighX_D10	; Yes
00300 14DB 39A0 		ANDLW	SMCnFMask	;Keep CMD and FB bits
00301 14DC 047C 		IORWF	Param7C,W	;Combine w/ Ctrl bit
00302 14DD 3801 		IORLW	b'00000001'	;Set Valid Data Flag
00303 14DE 00F8 		MOVWF	Param78
00304 14DF 39C0 		ANDLW	0xC0	;Ctrl and Cmd
00305 14E0 		SKPNZ		;Both off?
00306 14E1 0008 		RETURN		; Yes
00307 14E2 3AC0 		XORLW	0xC0	;Ctrl and Cmd
CastleGate.asm   CG IO.asm                                               Page: 156
/HPRR Electrical Dept/HPRR.ASM/MasterFiles/

00308 14E3 		SKPNZ		;Both on?
00309 14E4 0008 		RETURN		; Yes
00310 14E5 0878 		MOVF	Param78,W
00311 14E6 1C79 		BTFSS	Param79,0	;High SM?
00312 14E7 15DA 		BSF	SMTableLowChngFlag	; No
00313 14E8 1879 		BTFSC	Param79,0	;High SM?
00314 14E9 165A 		BSF	SMTableHiChngFlag	; No
00315 14EA 1C79 		BTFSS	Param79,0	;High SM?
00316 14EB 28B4 		GOTO	SetSMTableX_D10	; No
00317 14EC 2873 		GOTO	SetSMTableHighX_D10	; Yes
00318 14ED 	;
00319 14ED 		endif
00320 14ED 	;
00321 14ED 	; Entry: W=ptr to MSB of SM#
00322 14ED 	; Exit: W & Param78 SM Data or None(test Param78,1 = 1 if None)
00323 14ED 	;       Param79:XReg = SM#
00324 14ED 	;
00325 14ED 00F3 	GetSMDataSMDispY	MOVWF	YReg
00326 14EE 207D 		CALL	GetSMDispPtrY_D10	;MSB of SM#
00327 14EF 1BF8 		BTFSC	Param78,7	;None?
00328 14F0 0008 		RETURN		; No It's not valid
00329 14F1 00F9 		MOVWF	Param79
00330 14F2 03F3 		DECF	YReg,F
00331 14F3 207D 		CALL	GetSMDispPtrY_D10	;LSB of SM#
00332 14F4 00F2 		MOVWF	XReg
00333 14F5 1C79 		BTFSS	Param79,0	;High SM?
00334 14F6 28AF 		GOTO	GetSMTableX_D10	; No
00335 14F7 2864 		GOTO	GetSMTableHighX_D10	; Yes
00336 14F8 	;
00132 14F8 	;
00133 14F8 	;===================================================================================================
00134 14F8 	;
00135 14F8 	;
00136 14F8 	;
00989 14F8 		include	Dispatch.asm
00001 14F8 		subtitle	"Dispatch.asm"

00002 14F8 		page
00003 14F8 	;============================================================================================
00004 14F8 	;
00005 14F8 	;  FileName: Dispatch.asm
00006 14F8 	;  Date: 5/5/2008
00007 14F8 	;  File Version: 1.2.2
00008 14F8 	;  
00009 14F8 	;  Author: David M. Flynn
00010 14F8 	;  Company: Oxford V.U.E., Inc.
00011 14F8 	;
00012 14F8 	;============================================================================================
00013 14F8 	; Notes:
00014 14F8 	;        This file is the menu dispatcher for use with the buttons on the GP CPU board.
00015 14F8 	;
00016 14F8 	;  In a file at the end of segment 2 you must add the following custom routines:
00017 14F8 	;
00018 14F8 	;	RunOrService
00019 14F8 	;	SvsMdTtlXtras
00020 14F8 	;   and constants:
00021 14F8 	;	kLastSvsScrn
00022 14F8 	;	kLastNormScrn
00023 14F8 	;
00024 14F8 	; Indirect Service Modes:
00025 14F8 	;  	constant	UsesIndirectSvsMd=1
00026 14F8 	;  SvsModeSet	EQU	Mode_Metal	;0..7 value used to select mode set
00027 14F8 	;   must be in bank 3
00028 14F8 	; 
00029 14F8 	;  SvsMdTblPtr	;First svs md of each set, 8 word table (big engien, MSB first)
00030 14F8 	;  SvsMdTblLENum	;Last Entry of each set, (SvsMdTblPtr+(SvsModeSet*2)) + (SvsMdTblLENum+SvsModeSet)
00031 14F8 	;
00032 14F8 	;============================================================================================
00033 14F8 	; Revision History
00034 14F8 	;
00035 14F8 	; 1.2.2 4/5/2008	Added UseVUE8Btns LDI2 Btns
00036 14F8 	; 1.2.1 6/2/2007	Added conditional assm's (opt-in)
00037 14F8 	; 1.2   11/9/2004	Added indirect servive mode support.  UsesIndirectSvsMd, SvsModeSet
00038 14F8 	; 1.1.2 10/22/2004	Added range checking of ScrnNumber to StartSvsMode and StartRunMode
00039 14F8 	; 1.1.1 8/27/2004	Added UsesBootloader test for BL_SetCode and call SetUIPBit.
00040 14F8 	; 1.1   7/9/2004	Added IdleR2C7, IdleR2C9, etc.
00041 14F8 	; 1.0   3/17/2004	Copied from VUE-7.
00042 14F8 	;
00043 14F8 	;============================================================================================
00044 14F8 	;
00045 14F8 	; Name	(additional stack words required) Description
00046 14F8 	;============================================================================================
00047 14F8 	;
00048 14F8 	; ButtonDispatch	(0+) User Button Command Intrerpeter
00049 14F8 	;
00050 14F8 	; PrevSvsMode	() Previous Service mode screen
00051 14F8 	; NextSvsMode	() Next Service mode screen
00052 14F8 	; StartSvsMode	() Start service mode
00053 14F8 	;  StartSvsModeX
00054 14F8 	; PrevRunMode	() Previous Run mode screen
00055 14F8 	; NextRunMode	() Next Run mode screen
00056 14F8 	; StartRunMode	() Start Run mode
00057 14F8 	;  StartRunModeX
00058 14F8 	;
00059 14F8 	; lcd_gotoW2	(0+2) Goto the char W on the 3rd line
00060 14F8 	; IdleHexByte	(0+4) Display Byte at (W) in bank 2 or 3 w/ Disp_Hex_Byte_D10
00061 14F8 	; Idle2plDec	(0+4) Display Byte at (W) in bank 2 or 3 w/ Disp_decbyteW2pl_D10
00062 14F8 	; Idle3plDec	(0+4) Display Byte at (W) in bank 2 or 3 w/ Disp_decbyteW3pl_D10
00063 14F8 	; IdleR2C1	() lcd Goto Row 2 (3rd line) Col 1
00064 14F8 	; IdleR2C4	() lcd Goto Row 2 (3rd line) Col 4
CastleGate.asm   "Dispatch.asm"                                          Page: 157
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

00065 14F8 	; IdleR2C6	() lcd Goto Row 2 (3rd line) Col 6
00066 14F8 	; IdleR2C7	() lcd Goto Row 2 (3rd line) Col 7
00067 14F8 	; IdleR2C8	() lcd Goto Row 2 (3rd line) Col 8
00068 14F8 	; IdleR2C9	() lcd Goto Row 2 (3rd line) Col 9
00069 14F8 	; IdleR2C12	() lcd Goto Row 2 (3rd line) Col 12
00070 14F8 	; IdleR2C14	() lcd Goto Row 2 (3rd line) Col 14
00071 14F8 	; IdleR2C15	() lcd Goto Row 2 (3rd line) Col 15
00072 14F8 	; IdleR2C16	() lcd Goto Row 2 (3rd line) Col 16
00073 14F8 	; IdleR2C17	() lcd Goto Row 2 (3rd line) Col 18
00074 14F8 	; 
00075 14F8 	;
00076 14F8 	;============================================================================================
00077 14F8 	;
00078 14F8 		ifndef	UsesIndirectSvsMd
00080 14F8 		endif
00081 14F8 	;
00082 14F8 		ifndef	BtnDebounceTime
00084 14F8 		endif
00085 14F8 		ifndef	CGIBtnDebounceTime
00087 14F8 		endif
00088 14F8 		ifndef	BtnDeBounceTimer
00090 14F8 		endif
00091 14F8 		ifndef	UseVUE8Btns
00093 14F8 		endif
00094 14F8 	;
00095 14F8 	;============================================================================================
00096 14F8 	;User Button Command Intrerpeter
00097 14F8 	;
00098 14F8 	; Entry: evPtrAcid
00099 14F8 	; Exit: none
00100 14F8 	; RAM used: Param78,Param79,Param7A
00101 14F8 	; Calls:(0+) RunOrService
00102 14F8 	;
00103 14F8 	ButtonDispatch	
00104 14F8 		if UseVUE8Btns
00142 14F8 		else
00143 14F8 	;
00144 14F8 		mBank3
00145 14FA 0825 		MOVF	CurrentLDI_0,W
00146 14FB 3A3F 		XORLW	0x3F	; make btns pos logic
00147 14FC 393F 		ANDLW	0x3F
00148 14FD 00F8 		MOVWF	Param78
00149 14FE 		endif
00150 14FE 	;
00151 14FE 		mBank0
00152 1500 08F8 		MOVF	Param78,F
00153 1501 		SKPNZ
00154 1502 2D1D 		GOTO	NoButton
00155 1503 	; a button is down so reset the debounce timer
00156 1503 		mBank3
00157 1505 3002 		MOVLW	BtnDebounceTime
00158 1506 00A8 		MOVWF	BtnDeBounceTimer
00159 1507 	;
00160 1507 		if UsesBootloader
00161 1507 	;Bootloader trigger, if the correct buttons are down then set the bit to trigger
00162 1507 	; loading next time a reset occures.
00163 1507 3018 		MOVLW	BL_SetCode	;BootLoader button combo
00164 1508 0278 		SUBWF	Param78,W	;Button bits (positive logic)
00165 1509 		SKPZ
00166 150A 2D12 		GOTO	NoBootload
00167 150B 		mCall2To3	SetUIPBit
00168 150F 302F 		MOVLW	StrResetNowPtr
00169 1510 20F1 		CALL	DispStrLine3
00170 1511 2D11 	BD_Stop	GOTO	BD_Stop
00171 1512 	NoBootload
00172 1512 		endif
00173 1512 	;
00174 1512 		mBank0
00175 1514 	;
00176 1514 1925 		BTFSC	BtnDebounce
00177 1515 0008 		RETURN
00178 1516 1525 		BSF	BtnDebounce
00179 1517 	;
00180 1517 	; Convert button bits to a number 0..5
00181 1517 01F9 		CLRF	Param79
00182 1518 0CF8 	BD_L1	RRF	Param78,F
00183 1519 1803 		BTFSC	STATUS,C
00184 151A 2FE3 		GOTO	RunOrService
00185 151B 0AF9 		INCF	Param79,F
00186 151C 2D18 		GOTO	BD_L1
00187 151D 	;
00188 151D 	NoButton	mBank3
00189 151F 		TSTF	BtnDeBounceTimer
00190 1520 		mBank0
00191 1522 		SKPZ
00192 1523 2D32 		GOTO	DoDebounceCGI
00193 1524 1125 		BCF	BtnDebounce
00194 1525 08A9 		MOVF	CGI_BtnQueued,F
00195 1526 		SKPNZ
00196 1527 0008 		RETURN
00197 1528 	; a CGI button is down so reset the debounce timer
00198 1528 		mBank3
00199 152A 300A 		MOVLW	CGIBtnDebounceTime
00200 152B 00A8 		MOVWF	BtnDeBounceTimer
00201 152C 		mBank0
00202 152E 	;	
00203 152E 0329 		DECF	CGI_BtnQueued,W
00204 152F 01A9 		CLRF	CGI_BtnQueued
00205 1530 00F9 		MOVWF	Param79
00206 1531 2FE3 		GOTO	RunOrService
CastleGate.asm   "Dispatch.asm"                                          Page: 158
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

00207 1532 	;
00208 1532 01A9 	DoDebounceCGI	CLRF	CGI_BtnQueued
00209 1533 0008 		RETURN
00210 1534 	;
00211 1534 	;===========================================================================================
00212 1534 	; Previous Service mode screen
00213 1534 	;
00214 1534 	; Entry: ScrnNumber
00215 1534 	; Exit: ScrnNumber-- wraped
00216 1534 	; RAM used: Param78
00217 1534 	; Calls:(1+2) SaveSvsScrnNumber, SRAM_Read_D10
00218 1534 	;
00219 1534 	PrevSvsMode	mBank0
00220 1536 		TSTF	ScrnNumber
00221 1537 		SKPNZ
00222 1538 2D3B 		GOTO	PrevIsLast
00223 1539 03A3 		DECF	ScrnNumber,F
00224 153A 2D46 		GOTO	SaveSvsScrnNumber
00225 153B 	;
00226 153B 	PrevIsLast
00227 153B 		if UsesIndirectSvsMd
00231 153B 		else
00232 153B 	;
00233 153B 300C 		MOVLW	kLastSvsScrn
00234 153C 	;
00235 153C 		endif
00236 153C 	;
00237 153C 00A3 		MOVWF	ScrnNumber
00238 153D 2D46 		GOTO	SaveSvsScrnNumber
00239 153E 	;
00240 153E 		if UsesIndirectSvsMd
00280 153E 		endif
00281 153E 	;
00282 153E 	;===========================================================================================
00283 153E 	; Next Service mode screen
00284 153E 	;
00285 153E 	; Entry: ScrnNumber
00286 153E 	; Exit: ScrnNumber++ wraped
00287 153E 	; RAM used:
00288 153E 	; Calls:(1+) StartSvsModeX,WriteEEP79W_D10
00289 153E 	;
00290 153E 	NextSvsMode	
00291 153E 		if UsesIndirectSvsMd
00295 153E 		else
00296 153E 	;
00297 153E 		mBank0
00298 1540 300C 		MOVLW	kLastSvsScrn
00299 1541 	;
00300 1541 		endif
00301 1541 	;
00302 1541 0223 		SUBWF	ScrnNumber,W	;Current scrn - last
00303 1542 30FF 		MOVLW	0xFF
00304 1543 		SKPB		;skip if index<last
00305 1544 00A3 		MOVWF	ScrnNumber	;-1
00306 1545 0AA3 		INCF	ScrnNumber,F	;add 1
00307 1546 	;
00308 1546 300D 	SaveSvsScrnNumber	MOVLW	eSvsScrnNumber
00309 1547 00F9 		MOVWF	Param79
00310 1548 0823 		MOVF	ScrnNumber,W
00311 1549 2028 		CALL	WriteEEP79W_D10	;1+0
00312 154A 2D54 		GOTO	StartSvsModeX
00313 154B 	;	
00314 154B 	;===========================================================================================
00315 154B 	; Start service mode
00316 154B 	;
00317 154B 	; Entry: ScrnNumber
00318 154B 	; Exit: ScrnNumber++ wraped
00319 154B 	; RAM used: Param7C
00320 154B 	; Calls:(1+) StartSvsModeX,ReadEEwW_D10,DispStrLine0,Disp_decbyteW2pl_D10,SRAM_ReadDR_D10,
00321 154B 	;	DispStrLine1,SvsMdTtlXtras,DispStrLine2,DispStrLine3,PrintString_D10
00322 154B 	;
00323 154B 300D 	StartSvsMode	MOVLW	eSvsScrnNumber
00324 154C 2037 		CALL	ReadEEwW_D10	;1+0
00325 154D 00A3 		MOVWF	ScrnNumber
00326 154E 	;
00327 154E 		if UsesIndirectSvsMd
00329 154E 		else
00330 154E 300C 		MOVLW	kLastSvsScrn
00331 154F 		endif
00332 154F 	;
00333 154F 00F8 		MOVWF	Param78
00334 1550 0A78 		INCF	Param78,W
00335 1551 0223 		SUBWF	ScrnNumber,W	;Current scrn - last+1
00336 1552 		SKPB		;skip if index < last+1
00337 1553 01A3 		CLRF	ScrnNumber
00338 1554 	;
00339 1554 1428 	StartSvsModeX	BSF	ServiceMode
00340 1555 		mLED5_ON		; Service LED on
00341 155A 	;
00342 155A 3019 		MOVLW	SvsModeStrPtr	;'Service Mode '
00343 155B 20E8 		CALL	DispStrLine0	;Display the SvsMode string
00344 155C 	;
00345 155C 		if UsesIndirectSvsMd
00347 155C 		else
00348 155C 		MOVFW	ScrnNumber
00349 155D 		endif
00350 155D 	;
00351 155D 00FC 		MOVWF	Param7C	;Param7C=Service Mode Number
00352 155E 25A5 		CALL	Disp_decbyteW2pl_D10
00353 155F 	;
CastleGate.asm   "Dispatch.asm"                                          Page: 159
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

00354 155F 087C 		MOVF	Param7C,W
00355 1560 3E00 		ADDLW	SvsModeTitles	;offset to title's str ptr
00356 1561 2050 		CALL	SRAM_ReadDR_D10	;get str ptr
00357 1562 3800 		IORLW	0x00
00358 1563 		SKPZ		;was the ptr zero
00359 1564 20EB 		CALL	DispStrLine1	; No, display it
00360 1565 	;
00361 1565 271A 		CALL	SvsMdTtlXtras
00362 1566 	;
00363 1566 087C 		MOVF	Param7C,W
00364 1567 3E0D 		ADDLW	SvsModeInfoLines	;offset to info's str ptr
00365 1568 2050 		CALL	SRAM_ReadDR_D10	;get str ptr
00366 1569 3800 		IORLW	0x00
00367 156A 		SKPZ		;was the ptr zero
00368 156B 20EE 		CALL	DispStrLine2
00369 156C 	;
00370 156C 301B 		MOVLW	Str_NextPtr
00371 156D 20F1 		CALL	DispStrLine3
00372 156E 087C 		MOVF	Param7C,W
00373 156F 3E1A 		ADDLW	SvsModeCmdLines
00374 1570 2050 		CALL	SRAM_ReadDR_D10	;get str ptr
00375 1571 		SKPNZ
00376 1572 2D74 		GOTO	SSM_NextOnly
00377 1573 2016 		CALL	PrintString_D10
00378 1574 0008 	SSM_NextOnly	RETURN
00379 1575 	;
00380 1575 	;===========================================================================================
00381 1575 	; Previous Run mode screen
00382 1575 	;
00383 1575 	; Entry: ScrnNumber
00384 1575 	; Exit: ScrnNumber-- wraped
00385 1575 	; RAM used:
00386 1575 	; Calls:(0+) SaveRunScrnNumber
00387 1575 	;
00388 1575 	PrevRunMode	TSTF	ScrnNumber
00389 1576 		SKPNZ
00390 1577 2D7A 		GOTO	PrevIsLastR
00391 1578 03A3 		DECF	ScrnNumber,F
00392 1579 2D85 		GOTO	SaveRunScrnNumber
00393 157A 3001 	PrevIsLastR	MOVLW	kLastNormScrn
00394 157B 00A3 		MOVWF	ScrnNumber
00395 157C 2D85 		GOTO	SaveRunScrnNumber
00396 157D 	;
00397 157D 	;===========================================================================================
00398 157D 	; Next Run mode screen
00399 157D 	;
00400 157D 	; Entry: ScrnNumber
00401 157D 	; Exit: ScrnNumber++ wraped
00402 157D 	; RAM used:
00403 157D 	; Calls:(1+) StartRunModeX,WriteEEP79W_D10
00404 157D 	;
00405 157D 	NextRunMode	mBank0
00406 157F 0823 		MOVF	ScrnNumber,W
00407 1580 3C01 		SUBLW	kLastNormScrn
00408 1581 30FF 		MOVLW	0xFF
00409 1582 		SKPNZ
00410 1583 00A3 		MOVWF	ScrnNumber	;-1
00411 1584 0AA3 		INCF	ScrnNumber,F	;add 1
00412 1585 300C 	SaveRunScrnNumber	MOVLW	eScrnNumber
00413 1586 00F9 		MOVWF	Param79
00414 1587 0823 		MOVF	ScrnNumber,W
00415 1588 2028 		CALL	WriteEEP79W_D10
00416 1589 2D90 		GOTO	StartRunModeX
00417 158A 	;	
00418 158A 	;============================================================================================
00419 158A 	; Start Run mode
00420 158A 	;
00421 158A 	; Entry: none
00422 158A 	; Exit: ScrnNumber=0, ServiceMode=False
00423 158A 	; RAM used:
00424 158A 	; Calls:(1+) ReadEEwW_D10,DispStrLine0,DispIP,lcd_GotoLineW_D10,Disp_Hex_Byte_D10
00425 158A 	;
00426 158A 300C 	StartRunMode	MOVLW	eScrnNumber
00427 158B 2037 		CALL	ReadEEwW_D10
00428 158C 00A3 		MOVWF	ScrnNumber
00429 158D 3C01 		SUBLW	kLastNormScrn	;kLastNormScrn-ScrnNumber
00430 158E 		SKPNB
00431 158F 01A3 		CLRF	ScrnNumber
00432 1590 1028 	StartRunModeX	BCF	ServiceMode
00433 1591 		mLED5_OFF		; Service LED OFF
00434 1596 300F 		MOVLW	SIGNONStrPtr	;'Baume Limiter v1.0d1'
00435 1597 20E8 		CALL	DispStrLine0
00436 1598 2DB8 		GOTO	RunMdTtlXtras
00437 1599 	;
00438 1599 	;===========================================================================================
00439 1599 	; Goto the char W on the 3rd line
00440 1599 	;
00441 1599 	; Entry: Char Position in W (0..19)
00442 1599 	; Exit: none
00443 1599 	; RAM Used:Param78, Param79 (Verified 2/1/04)
00444 1599 	; Calls:(0+2) lcd_gotoxy_D10
00445 1599 	;
00446 1599 00F9 	lcd_gotoW2	MOVWF	Param79
00447 159A 3002 		MOVLW	d'2'	;3rd line
00448 159B 00F8 		MOVWF	Param78
00449 159C 0879 		MOVF	Param79,W
00450 159D 2811 		GOTO	lcd_gotoxy_D10
00451 159E 	;
00452 159E 	;===========================================================================================
00453 159E 	; Display the hex byte at (W) in bank 2 or 3
CastleGate.asm   "Dispatch.asm"                                          Page: 160
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

00454 159E 	;
00455 159E 	; Entry: W = address of byte to display
00456 159E 	; Exit: none
00457 159E 	; RAM Used:Param76, Param79, FSR
00458 159E 	; Calls:(0+4) Disp_Hex_Byte_D10
00459 159E 	;
00460 159E 0084 	IdleHexByte	MOVWF	FSR
00461 159F 1783 		BSF	_IRP
00462 15A0 0800 		MOVF	INDF,W
00463 15A1 281B 		GOTO	Disp_Hex_Byte_D10
00464 15A2 	;
00465 15A2 	;===========================================================================================
00466 15A2 	; Display the Decimal byte at (W) in bank 2 or 3
00467 15A2 	;
00468 15A2 	; Entry: W = address of byte to display
00469 15A2 	; Exit: none
00470 15A2 	; RAM Used: Param71:0, Param77, Param78, Param79, FSR
00471 15A2 	; Calls:(0+4) Disp_decbyteW2pl_D10
00472 15A2 	;
00473 15A2 0084 	Idle2plDec	MOVWF	FSR
00474 15A3 1783 		BSF	_IRP
00475 15A4 0800 		MOVF	INDF,W
00476 15A5 	Disp_decbyteW2pl_D10	mCall2To0	Disp_decbyteW2pl
00477 15A9 0008 		RETURN
00478 15AA 	;
00479 15AA 	;===========================================================================================
00480 15AA 	; Display the Decimal byte at (W) in bank 2 or 3
00481 15AA 	;
00482 15AA 	; Entry: W = address of byte to display
00483 15AA 	; Exit: none
00484 15AA 	; RAM Used: Param71:0, Param77, Param78, Param79, FSR
00485 15AA 	; Calls:(0+4) Disp_decbyteW3pl_D10
00486 15AA 	;
00487 15AA 0084 	Idle3plDec	MOVWF	FSR
00488 15AB 1783 		BSF	_IRP
00489 15AC 0800 		MOVF	INDF,W
00490 15AD 	Disp_decbyteW3pl_D10	mCall2To0	Disp_decbyteW3pl
00491 15B1 0008 		RETURN
00492 15B2 	;
00493 15B2 	;===========================================================================================
00494 15B2 		ifndef UsesIdleR2C1
00496 15B2 		endif
00497 15B2 		if UsesIdleR2C1
00509 15B2 		endif
00510 15B2 	;===========================================================================================
00511 15B2 	; lcd Goto Row 2 (3rd line) Col 4
00512 15B2 	;
00513 15B2 	; Entry: none
00514 15B2 	; Exit: none
00515 15B2 	; RAM Used: Param78, Param79 (Verified 2/1/04)
00516 15B2 	; Calls:(0+2) lcd_gotoW2
00517 15B2 	;
00518 15B2 3004 	IdleR2C4	MOVLW	d'4'
00519 15B3 2D99 		GOTO	lcd_gotoW2
00520 15B4 	;
00521 15B4 	;===========================================================================================
00522 15B4 		ifndef UsesIdleR2C6
00524 15B4 		endif
00525 15B4 		if UsesIdleR2C6
00537 15B4 		endif
00538 15B4 	;===========================================================================================
00539 15B4 		ifndef UsesIdleR2C7
00541 15B4 		endif
00542 15B4 		if UsesIdleR2C7
00554 15B4 		endif
00555 15B4 	;===========================================================================================
00556 15B4 		ifndef UsesIdleR2C8
00558 15B4 		endif
00559 15B4 		if UsesIdleR2C8
00571 15B4 		endif
00572 15B4 	;===========================================================================================
00573 15B4 		ifndef UsesIdleR2C9
00575 15B4 		endif
00576 15B4 		if UsesIdleR2C9
00588 15B4 		endif
00589 15B4 	;===========================================================================================
00590 15B4 	; lcd Goto Row 2 (3rd line) Col 12
00591 15B4 	;
00592 15B4 	; Entry: none
00593 15B4 	; Exit: none
00594 15B4 	; RAM Used: Param78, Param79 (Verified 2/1/04)
00595 15B4 	; Calls:(0+2) lcd_gotoW2
00596 15B4 	;
00597 15B4 300C 	IdleR2C12	MOVLW	d'12'
00598 15B5 2D99 		GOTO	lcd_gotoW2
00599 15B6 	;
00600 15B6 	;===========================================================================================
00601 15B6 		ifndef UsesIdleR2C14
00603 15B6 		endif
00604 15B6 		if UsesIdleR2C14
00616 15B6 		endif
00617 15B6 	;===========================================================================================
00618 15B6 		ifndef UsesIdleR2C15
00620 15B6 		endif
00621 15B6 		if UsesIdleR2C15
00633 15B6 		endif
00634 15B6 	;===========================================================================================
00635 15B6 	; lcd Goto Row 2 (3rd line) Col 16
00636 15B6 	;
00637 15B6 	; Entry: none
CastleGate.asm   "Dispatch.asm"                                          Page: 161
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

00638 15B6 	; Exit: none
00639 15B6 	; RAM Used: Param78, Param79 (Verified 2/1/04)
00640 15B6 	; Calls:(0+2) lcd_gotoW2
00641 15B6 	;
00642 15B6 3010 	IdleR2C16	MOVLW	d'16'
00643 15B7 2D99 		GOTO	lcd_gotoW2
00644 15B8 	;
00645 15B8 	;===========================================================================================
00646 15B8 		ifndef UsesIdleR2C17
00648 15B8 		endif
00649 15B8 		if UsesIdleR2C17
00661 15B8 		endif
00662 15B8 	;
00663 15B8 	;
00664 15B8 	;
00990 15B8 		include	DispatchHPRR.asm
00001 15B8 		subtitle	"DispatchComIO.asm"

00002 15B8 		page
00003 15B8 	;============================================================================================
00004 15B8 	;
00005 15B8 	;  FileName: DispatchComIO.asm
00006 15B8 	;  Date: 6/2/07
00007 15B8 	;  File Version: 1.1
00008 15B8 	;  
00009 15B8 	;  Author: David M. Flynn
00010 15B8 	;  Company: HPRR
00011 15B8 	;  Project: TCC Communications Computer
00012 15B8 	;
00013 15B8 	;============================================================================================
00014 15B8 	; Notes:
00015 15B8 	;        This file is the menu dispatcher for use with the buttons on the GP CPU board.
00016 15B8 	;
00017 15B8 	;
00018 15B8 	;============================================================================================
00019 15B8 	; Revision History
00020 15B8 	;
00021 15B8 	; 1.1   6/2/2007	Added service mode 11
00022 15B8 	; 1.0   9/5/2004	First code
00023 15B8 	;
00024 15B8 	;============================================================================================
00025 15B8 	;
00026 15B8 	; Name	(additional stack words required) Description
00027 15B8 	;============================================================================================
00028 15B8 	; 
00029 15B8 	; RunMdTtlXtras	() Part of starting a Run Mode, Displays the IP numbers, etc.
00030 15B8 	; 
00031 15B8 	; NormalMd03_SW5	() Run Mode Error Screen Clear Hard Error
00032 15B8 	; 
00033 15B8 	; SvsMd00Idle	() Idler routine for service mode 00 'Switch Machine''Num=     Value='
00034 15B8 	; SvsMd01Idle	() Idler routine for service mode 01 'High Switch Machine''Num=     Value='
00035 15B8 	; SvsMd02Idle	() Idler routine for service mode 02 'Block Data''Num=     Value='
00036 15B8 	; SvsMd03Idle	() Idler routine for service mode 03 'MAC Address'
00037 15B8 	; SvsMd04Idle	() Idler routine for service mode 04 'IP Address'
00038 15B8 	; SvsMd05Idle	() Idler routine for service mode 05 'Show Inputs'
00039 15B8 	; SvsMd08Idle	() Idler routine for service mode 08 'Test Scanner''Slot/Board='
00040 15B8 	; SvsMd09Idle	() Idler routine for service mode 09 'Test Scanner'
00041 15B8 	; SvsMd10Idle	() Idler routine for service mode 10 'Block Data Cab#'
00042 15B8 	; SvsMd11Idle	() Idler routine for service mode 11 'Block Module Tester'
00043 15B8 	;
00044 15B8 	; SvsMd00Sw3	() 'Switch Machine''Num=     Value=' Down
00045 15B8 	; SvsMd00Sw4	() 'Switch Machine''Num=     Value=' Up
00046 15B8 	; SvsMd00Sw5	() 'Switch Machine''Num=     Value=' Change
00047 15B8 	;
00048 15B8 	; SvsMd01Sw3	() 'High Switch Machine''Num=     Value=' Down
00049 15B8 	; SvsMd01Sw4	() 'High Switch Machine''Num=     Value=' Up
00050 15B8 	; SvsMd01Sw5	() 'High Switch Machine''Num=     Value=' Change
00051 15B8 	;
00052 15B8 	; SvsMd02Sw3	() 'Block Data''Num=     Value=' Down
00053 15B8 	; SvsMd02Sw4	() 'Block Data''Num=     Value=' Up
00054 15B8 	; SvsMd02Sw5	() 'Block Data''Num=     Value=' Change
00055 15B8 	;
00056 15B8 	; SvsMd03Sw3	() 'MAC Address' Down
00057 15B8 	; SvsMd03Sw4	() 'MAC Address' Up
00058 15B8 	; SvsMd03Sw5	() 'MAC Address' Fact
00059 15B8 	;
00060 15B8 	; SvsMd04Sw3	() 'IP Address' Down
00061 15B8 	; SvsMd04Sw4	() 'IP Address' Up
00062 15B8 	; SvsMd04Sw5	() 'IP Address' Fact
00063 15B8 	;
00064 15B8 	; SvsMd06Sw3	() Bootloader Sw3 Yes
00065 15B8 	;
00066 15B8 	; SvsMd08Sw3	() 'Test Scanner' Down
00067 15B8 	; SvsMd08Sw4	() 'Test Scanner' Up
00068 15B8 	; SvsMd08Sw5	() 'Test Scanner' Fact
00069 15B8 	;
00070 15B8 	; SvsMd10Sw3	() 'Block Data Cab#' Down
00071 15B8 	; SvsMd10Sw4	() 'Block Data Cab#' Up
00072 15B8 	; SvsMd10Sw5	() 'Block Data Cab#' Fact
00073 15B8 	;
00074 15B8 	; SvsMd11Sw3	() 'Block Module Tester''Num=     Value=' Down
00075 15B8 	; SvsMd11Sw4	() 'Block Module Tester''Num=     Value=' Up
00076 15B8 	; SvsMd11Sw5	() 'Block Module Tester''Num=     Value=' Change
00077 15B8 	;
00078 15B8 	; DispIdleDispatch	() Called every 1/2 second to update data on shown on LCD
00079 15B8 	;
00080 15B8 	;
00081 15B8 	; SvsMdTtlXtras	() not used
00082 15B8 	;
00083 15B8 	; SvsModeDispatch	() Goto the current Service mode's button handler
CastleGate.asm   "DispatchComIO.asm"                                     Page: 162
/HPRR Electrical Dept/HPRR.ASM/MasterFiles/

00084 15B8 	;
00085 15B8 	; RunModeDispatch	() Goto the current Run mode's button handler
00086 15B8 	;
00087 15B8 	; RunOrService	() Route to the correct handler for this screen/button
00088 15B8 	;
00089 15B8 	; SvsModeIdler	() Called every 1/2 second to update data for Service screens
00090 15B8 	; RunModeIdler	() Called every 1/2 second to update data for Run screens
00091 15B8 	;
00092 15B8 	;============================================================================================
00093 15B8 	; constants
00094 15B8 	;
00095 15B8 	;
00096 15B8 	;============================================================================================
00097 15B8 	;===========================================================================================
00098 15B8 	; Part of starting a Run Mode, Displays the IP numbers, etc.
00099 15B8 	;
00100 15B8 3002 	RunMdTtlXtras	MOVLW	0x02	;erase lines 3 and 4
00101 15B9 200C 		CALL	lcd_GotoLineW_D10
00102 15BA 3003 		MOVLW	0x03
00103 15BB 200C 		CALL	lcd_GotoLineW_D10
00104 15BC 		TSTF	ScrnNumber	;ScrnNumber=0
00105 15BD 		SKPNZ
00106 15BE 283C 		GOTO	DispIP_D10	;'192.168.1.123'
00107 15BF 3001 		MOVLW	0x01	;erase line 1
00108 15C0 200C 		CALL	lcd_GotoLineW_D10
00109 15C1 3001 		MOVLW	d'1'
00110 15C2 0223 		SUBWF	ScrnNumber,W
00111 15C3 		SKPZ
00112 15C4 0008 		RETURN		;blank line only
00113 15C5 	;
00114 15C5 3025 		MOVLW	Str_SNPtr	;Run Mode Scrn 2
00115 15C6 2016 		CALL	PrintString_D10	;'S/N:' 7004
00116 15C7 300A 		MOVLW	eSN0
00117 15C8 2037 		CALL	ReadEEwW_D10
00118 15C9 00F6 		MOVWF	Param76
00119 15CA 300B 		MOVLW	eSN1
00120 15CB 2037 		CALL	ReadEEwW_D10
00121 15CC 00F7 		MOVWF	Param77
00122 15CD 14A7 		BSF	Disp_LZO
00123 15CE 2800 		GOTO	Disp_decword_D10
00124 15CF 	;
00125 15CF 	;===========================================================================================
00126 15CF 	; Run Mode Screen 0
00127 15CF 	;
00128 15CF 	; Entry: Bank3
00129 15CF 	; Exit:
00130 15CF 	;
00131 15CF 28F6 	NormalMd00_SW4	GOTO	MainB0Rtn
00132 15D0 	;===========================================================================================
00133 15D0 	; Run Mode Screen 0
00134 15D0 	;
00135 15D0 	; Entry: Bank3
00136 15D0 	; Exit:
00137 15D0 	;
00138 15D0 28F6 	NormalMd00_SW5	GOTO	MainB0Rtn
00139 15D1 	;
00140 15D1 	;===========================================================================================
00141 15D1 	; Run Mode Screen 3 Clear Hard Error
00142 15D1 	;
00143 15D1 	; Entry: Bank3
00144 15D1 	; Exit:
00145 15D1 	;
00146 15D1 	NormalMd03_SW5
00147 15D1 	;	BCF	HardErrorLatch
00148 15D1 2D8A 		GOTO	StartRunMode	;return to user selected run screen
00149 15D2 	;
00150 15D2 	;===========================================================================================
00151 15D2 	; Idler routine for service mode 00 'Switch Machine''Num=     Value='
00152 15D2 	;
00153 15D2 25B2 	SvsMd00Idle	CALL	IdleR2C4
00154 15D3 30B7 		MOVLW	SMSvsPtr
00155 15D4 25AA 		CALL	Idle3plDec
00156 15D5 25B6 		CALL	IdleR2C16
00157 15D6 		mBank3
00158 15D8 		MOVFW	SMSvsPtr
00159 15D9 00F2 		MOVWF	XReg
00160 15DA 20AF 		CALL	GetSMTableX_D10
00161 15DB 281B 		GOTO	Disp_Hex_Byte_D10
00162 15DC 	;
00163 15DC 	;===========================================================================================
00164 15DC 	; Idler routine for service mode 01 'High Switch Machine''Num=     Value='
00165 15DC 	;
00166 15DC 25B2 	SvsMd01Idle	CALL	IdleR2C4
00167 15DD 30D5 		MOVLW	SMHighSvsPtr
00168 15DE 25AA 		CALL	Idle3plDec
00169 15DF 25B6 		CALL	IdleR2C16
00170 15E0 		mBank3
00171 15E2 		MOVFW	SMHighSvsPtr
00172 15E3 00F2 		MOVWF	XReg
00173 15E4 2064 		CALL	GetSMTableHighX_D10
00174 15E5 281B 		GOTO	Disp_Hex_Byte_D10
00175 15E6 	;
00176 15E6 	;===========================================================================================
00177 15E6 	; Idler routine for service mode 02 'Block Data''Num=     Value='
00178 15E6 	;
00179 15E6 25B2 	SvsMd02Idle	CALL	IdleR2C4
00180 15E7 30BA 		MOVLW	SvsBlkNum
00181 15E8 25AA 		CALL	Idle3plDec
00182 15E9 25B4 		CALL	IdleR2C12
00183 15EA 	;
CastleGate.asm   "DispatchComIO.asm"                                     Page: 163
/HPRR Electrical Dept/HPRR.ASM/MasterFiles/

00184 15EA 		if UsesBlockCmdTable
00185 15EA 		mBank3
00186 15EC 		MOVFW	SvsBlkNum
00187 15ED 00F2 		MOVWF	XReg
00188 15EE 208C 		CALL	GetBlockCmdTable2X_D10
00189 15EF 201B 		CALL	Disp_Hex_Byte_D10
00190 15F0 		mBank3
00191 15F2 2082 		CALL	GetBlockCmdTableX_D10
00192 15F3 201B 		CALL	Disp_Hex_Byte_D10
00193 15F4 		endif
00194 15F4 	;
00195 15F4 		mBank3
00196 15F6 		MOVFW	SvsBlkNum
00197 15F7 00F2 		MOVWF	XReg
00198 15F8 20A5 		CALL	GetBlockPwrTable2X_D10
00199 15F9 201B 		CALL	Disp_Hex_Byte_D10
00200 15FA 		mBank3
00201 15FC 2096 		CALL	GetBlockPwrTableX_D10
00202 15FD 281B 		GOTO	Disp_Hex_Byte_D10
00203 15FE 	;
00204 15FE 	;===========================================================================================
00205 15FE 	; Idler routine for service mode 03 'MAC Address'
00206 15FE 	;
00207 15FE 2007 	SvsMd03Idle	CALL	lcd_GotoLine2
00208 15FF 	DispMAC_E2_D10	mCall2To0	DispMAC_E2
00209 1603 0008 		RETURN
00210 1604 	;
00211 1604 	;===========================================================================================
00212 1604 	; Idler routine for service mode 04 'IP Address'
00213 1604 	;
00214 1604 2007 	SvsMd04Idle	CALL	lcd_GotoLine2
00215 1605 	DispIP_E2_D10	mCall2To0	DispIP_E2
00216 1609 0008 		RETURN
00217 160A 	;
00218 160A 		if UsesShowInputs
00219 160A 	;===========================================================================================
00220 160A 	; Idler routine for service mode 05 'Show Inputs'
00221 160A 	;
00222 160A 2007 	SvsMd05Idle	CALL	lcd_GotoLine2
00223 160B 3030 		MOVLW	'0'
00224 160C 2023 		CALL	DisplaysW_D10
00225 160D 2022 		CALL	Disp_Colon
00226 160E 30A5 		MOVLW	CurrentLDI_0
00227 160F 259E 		CALL	IdleHexByte
00228 1610 	;
00229 1610 		if UsesLDI1
00236 1610 		endif
00237 1610 	;
00238 1610 		if UsesLDI2
00245 1610 		endif
00246 1610 0008 		RETURN
00247 1611 		endif
00248 1611 	;
00249 1611 		if UsesInputTester|UsesOutputTester
00250 1611 	;===========================================================================================
00251 1611 	; Idler routine for service mode 08 'Test Scanner''Slot/Board='
00252 1611 	;
00253 1611 25B4 	SvsMd08Idle	CALL	IdleR2C12
00254 1612 		mBank3
00255 1614 0854 		MOVF	SvsInSlotBoard,W
00256 1615 281B 		GOTO	Disp_Hex_Byte_D10
00257 1616 	;
00258 1616 		endif
00259 1616 		if UsesInputTester
00260 1616 	;===========================================================================================
00261 1616 	; Idler routine for service mode 09 'Test Scanner'
00262 1616 2007 	SvsMd09Idle	CALL	lcd_GotoLine2
00263 1617 		mBank3
00264 1619 0833 		MOVF	CurBlk,W	;Save CurBlk
00265 161A 00D6 		MOVWF	SvsCurBlk
00266 161B 0834 		MOVF	CurBlk+1,W
00267 161C 00D7 		MOVWF	SvsCurBlk+1
00268 161D 3080 		MOVLW	0x80
00269 161E 00B3 		MOVWF	CurBlk
00270 161F 0854 		MOVF	SvsInSlotBoard,W
00271 1620 00B4 		MOVWF	CurBlk+1
00272 1621 201B 		CALL	Disp_Hex_Byte_D10
00273 1622 2022 		CALL	Disp_Colon
00274 1623 2634 	Show8Bytes_L1	CALL	Show8Inputs
00275 1624 		mBank3
00276 1626 3040 		MOVLW	0x40
00277 1627 0233 		SUBWF	CurBlk,W
00278 1628 		SKPNZ
00279 1629 2020 		CALL	Disp_Space
00280 162A 		mBank3
00281 162C 08B3 		MOVF	CurBlk,F
00282 162D 		SKPZ
00283 162E 2E23 		GOTO	Show8Bytes_L1
00284 162F 0856 		MOVF	SvsCurBlk,W	;Restore CurBlk
00285 1630 00B3 		MOVWF	CurBlk
00286 1631 0857 		MOVF	SvsCurBlk+1,W
00287 1632 00B4 		MOVWF	CurBlk+1
00288 1633 28F6 		GOTO	MainB0Rtn
00289 1634 	;
00290 1634 3008 	Show8Inputs	MOVLW	0x08	;get 8 bits
00291 1635 00FA 		MOVWF	Param7A
00292 1636 	Show8Inputs_L1	mBank3
00293 1638 03B3 		DECF	CurBlk,F
00294 1639 		mCall2To3	InputB
00295 163D 0D31 		RLF	IActive,W
CastleGate.asm   "DispatchComIO.asm"                                     Page: 164
/HPRR Electrical Dept/HPRR.ASM/MasterFiles/

00296 163E 0DF9 		RLF	Param79,F
00297 163F 0BFA 		DECFSZ	Param7A,F
00298 1640 2E36 		GOTO	Show8Inputs_L1
00299 1641 0879 		MOVF	Param79,W
00300 1642 281B 		GOTO	Disp_Hex_Byte_D10
00301 1643 	;
00302 1643 		endif
00303 1643 	;===========================================================================================
00304 1643 	;Idler routine for service mode 10 'Block Data Cab#'
00305 1643 	;
00306 1643 25B6 	SvsMd10Idle	CALL	IdleR2C16
00307 1644 		mBank3
00308 1646 0A3B 		INCF	SvsCabNum,W
00309 1647 281B 		GOTO	Disp_Hex_Byte_D10
00310 1648 	;
00311 1648 	;===========================================================================================
00312 1648 	; Idler routine for service mode 11 'Block Module Tester''Num=     Value='
00313 1648 	;
00314 1648 		if UsesBlockModules
00315 1648 25B2 	SvsMd11Idle	CALL	IdleR2C4
00316 1649 30D8 		MOVLW	SvsBMdlNum
00317 164A 25A2 		CALL	Idle2plDec
00318 164B 25B6 		CALL	IdleR2C16
00319 164C 		mBank3
00320 164E 0859 		MOVF	SvsBMdlVal,W
00321 164F 201B 		CALL	Disp_Hex_Byte_D10
00322 1650 2934 		GOTO	SvsTestOneModule
00323 1651 		endif
00324 1651 	;
00325 1651 	;===========================================================================================
00326 1651 	; Idler routine for service mode 12 'Output Board Tester''Num=     Value='
00327 1651 	;
00328 1651 		if UsesOutputTester
00329 1651 25B2 	SvsMd12Idle	CALL	IdleR2C4
00330 1652 		mBank3
00331 1654 0854 		MOVF	SvsInSlotBoard,W
00332 1655 201B 		CALL	Disp_Hex_Byte_D10
00333 1656 		mBank3
00334 1658 0858 		MOVF	SvsBMdlNum,W
00335 1659 397F 		ANDLW	0x7F
00336 165A 201B 		CALL	Disp_Hex_Byte_D10
00337 165B 	;
00338 165B 25B6 		CALL	IdleR2C16
00339 165C 		mBank3
00340 165E 0859 		MOVF	SvsBMdlVal,W
00341 165F 3980 		ANDLW	0x80
00342 1660 201B 		CALL	Disp_Hex_Byte_D10
00343 1661 	;
00344 1661 		mBank3
00345 1663 0833 		MOVF	CurBlk,W	;Save CurBlk
00346 1664 00D6 		MOVWF	SvsCurBlk
00347 1665 0834 		MOVF	CurBlk+1,W
00348 1666 00D7 		MOVWF	SvsCurBlk+1
00349 1667 	;
00350 1667 3080 		MOVLW	0x80
00351 1668 00B3 		MOVWF	CurBlk
00352 1669 0854 		MOVF	SvsInSlotBoard,W
00353 166A 00B4 		MOVWF	CurBlk+1
00354 166B 03B3 	SvsTOB_L1	DECF	CurBlk,F
00355 166C 13AD 		BCF	OActive,7
00356 166D 1BD9 		BTFSC	SvsBMdlVal,7
00357 166E 17AD 		BSF	OActive,7
00358 166F 0858 		MOVF	SvsBMdlNum,W
00359 1670 397F 		ANDLW	0x7F
00360 1671 0233 		SUBWF	CurBlk,W
00361 1672 		SKPZ
00362 1673 13AD 		BCF	OActive,7
00363 1674 		mCall2To3	OutputB
00364 1678 08B3 		MOVF	CurBlk,F
00365 1679 		SKPZ
00366 167A 2E6B 		GOTO	SvsTOB_L1
00367 167B 	;
00368 167B 0856 		MOVF	SvsCurBlk,W	;Restore CurBlk
00369 167C 00B3 		MOVWF	CurBlk
00370 167D 0857 		MOVF	SvsCurBlk+1,W
00371 167E 00B4 		MOVWF	CurBlk+1
00372 167F 28F6 		GOTO	MainB0Rtn
00373 1680 	;
00374 1680 	;
00375 1680 		endif
00376 1680 	;
00377 1680 	;===========================================================================================
00378 1680 	;*******************************************************************************************
00379 1680 	;===========================================================================================
00380 1680 	; 'Switch Machine''Num=     Value=' Down
00381 1680 03B7 	SvsMd00Sw3	DECF	SMSvsPtr,F
00382 1681 28F6 		GOTO	MainB0Rtn
00383 1682 	;===========================================================
00384 1682 	; 'Switch Machine''Num=     Value=' Up
00385 1682 0AB7 	SvsMd00Sw4	INCF	SMSvsPtr,F
00386 1683 28F6 		GOTO	MainB0Rtn
00387 1684 	;===========================================================
00388 1684 	; 'Switch Machine''Num=     Value=' Change
00389 1684 0837 	SvsMd00Sw5	MOVF	SMSvsPtr,W
00390 1685 00F2 		MOVWF	XReg
00391 1686 20AF 		CALL	GetSMTableX_D10
00392 1687 3040 		MOVLW	SMCMDMask
00393 1688 0678 		XORWF	Param78,W
00394 1689 20B4 		CALL	SetSMTableX_D10
00395 168A 15DA 		BSF	SMTableLowChngFlag
CastleGate.asm   "DispatchComIO.asm"                                     Page: 165
/HPRR Electrical Dept/HPRR.ASM/MasterFiles/

00396 168B 28F6 		GOTO	MainB0Rtn
00397 168C 	;
00398 168C 	;===========================================================================================
00399 168C 	; 'High Switch Machine''Num=     Value=' Down
00400 168C 03D5 	SvsMd01Sw3	DECF	SMHighSvsPtr,F
00401 168D 28F6 		GOTO	MainB0Rtn
00402 168E 	;===========================================================
00403 168E 	; 'High Switch Machine''Num=     Value=' Up
00404 168E 0AD5 	SvsMd01Sw4	INCF	SMHighSvsPtr,F
00405 168F 28F6 		GOTO	MainB0Rtn
00406 1690 	;===========================================================
00407 1690 	; 'High Switch Machine''Num=     Value=' Change
00408 1690 0855 	SvsMd01Sw5	MOVF	SMHighSvsPtr,W
00409 1691 00F2 		MOVWF	XReg
00410 1692 2064 		CALL	GetSMTableHighX_D10
00411 1693 3040 		MOVLW	SMCMDMask
00412 1694 0678 		XORWF	Param78,W
00413 1695 2073 		CALL	SetSMTableHighX_D10
00414 1696 165A 		BSF	SMTableHiChngFlag
00415 1697 28F6 		GOTO	MainB0Rtn
00416 1698 	;
00417 1698 	;===========================================================================================
00418 1698 	; 'Block Data''Num=     V=' Down
00419 1698 03BA 	SvsMd02Sw3	DECF	SvsBlkNum,F
00420 1699 304B 		MOVLW	kMaxBlockNum
00421 169A 1BBA 		BTFSC	SvsBlkNum,7
00422 169B 00BA 		MOVWF	SvsBlkNum
00423 169C 28F6 		GOTO	MainB0Rtn
00424 169D 	;===========================================================
00425 169D 	; 'Block Data''Num=     V=' Up
00426 169D 304B 	SvsMd02Sw4	MOVLW	kMaxBlockNum
00427 169E 023A 		SUBWF	SvsBlkNum,W
00428 169F 		SKPZ
00429 16A0 0A3A 		INCF	SvsBlkNum,W
00430 16A1 00BA 		MOVWF	SvsBlkNum
00431 16A2 28F6 		GOTO	MainB0Rtn
00432 16A3 		if UsesBlockCmdTest
00433 16A3 		if UsesBlockCmdTable
00434 16A3 	;===========================================================
00435 16A3 	; 'Block Data''Num=     V=' Change SvsCabNum
00436 16A3 083A 	SvsMd02Sw5	MOVF	SvsBlkNum,W
00437 16A4 00F2 		MOVWF	XReg
00438 16A5 083B 		MOVF	SvsCabNum,W
00439 16A6 3C04 		SUBLW	0x04	;4-cab
00440 16A7 		SKPNB
00441 16A8 2EB6 		GOTO	SvsMd02Sw5_1
00442 16A9 	;
00443 16A9 0A3B 		INCF	SvsCabNum,W
00444 16AA 00F9 		MOVWF	Param79
00445 16AB 3020 		MOVLW	0x20
00446 16AC 00FA 		MOVWF	Param7A
00447 16AD 1003 		BCF	_C
00448 16AE 0CFA 	SvsMd02Sw5_L1	RRF	Param7A,F
00449 16AF 0BF9 		DECFSZ	Param79,F
00450 16B0 2EAE 		GOTO	SvsMd02Sw5_L1
00451 16B1 2082 		CALL	GetBlockCmdTableX_D10
00452 16B2 067A 		XORWF	Param7A,W	;cab
00453 16B3 3880 		IORLW	0x80
00454 16B4 2087 		CALL	SetBlockCmdTableX_D10
00455 16B5 28F6 		GOTO	MainB0Rtn
00456 16B6 	;
00457 16B6 3004 	SvsMd02Sw5_1	MOVLW	0x04
00458 16B7 023B 		SUBWF	SvsCabNum,W
00459 16B8 00F9 		MOVWF	Param79
00460 16B9 3010 		MOVLW	0x10
00461 16BA 00FA 		MOVWF	Param7A
00462 16BB 1003 		BCF	_C
00463 16BC 0CFA 	SvsMd02Sw5_L2	RRF	Param7A,F
00464 16BD 0BF9 		DECFSZ	Param79,F
00465 16BE 2EBC 		GOTO	SvsMd02Sw5_L2
00466 16BF 208C 		CALL	GetBlockCmdTable2X_D10
00467 16C0 067A 		XORWF	Param7A,W	;cab
00468 16C1 3880 		IORLW	0x80
00469 16C2 2091 		CALL	SetBlockCmdTable2X_D10
00470 16C3 28F6 		GOTO	MainB0Rtn
00471 16C4 		else
00507 16C4 		endif
00508 16C4 		endif
00509 16C4 	;
00510 16C4 	;===========================================================================================
00511 16C4 	;===========================================================================================
00512 16C4 	; 'MAC Address' Down
00513 16C4 	;
00514 16C4 	SvsMd03Sw3	mBank0
00515 16C6 03AF 		DECF	myeth5,F
00516 16C7 	write_nonvol_D10	mCall2To0	write_nonvol
00517 16CB 0008 		RETURN
00518 16CC 	;
00519 16CC 	;=========================================================
00520 16CC 	; 'MAC Address' Up
00521 16CC 	;
00522 16CC 	SvsMd03Sw4	mBank0
00523 16CE 0AAF 		INCF	myeth5,F
00524 16CF 2EC7 		GOTO	write_nonvol_D10
00525 16D0 	;
00526 16D0 	;=========================================================
00527 16D0 	; 'MAC Address' Fact
00528 16D0 	;
00529 16D0 	SvsMd03Sw5	mBank0
00530 16D2 3023 		MOVLW	low kMAClsw
CastleGate.asm   "DispatchComIO.asm"                                     Page: 166
/HPRR Electrical Dept/HPRR.ASM/MasterFiles/

00531 16D3 00AF 		MOVWF	myeth5
00532 16D4 2EC7 		GOTO	write_nonvol_D10
00533 16D5 	;
00534 16D5 	;===========================================================================================
00535 16D5 	; 'IP Address' Down
00536 16D5 	;
00537 16D5 	SvsMd04Sw3	mBank0
00538 16D7 03B3 		DECF	myip_b0,F
00539 16D8 2EC7 		GOTO	write_nonvol_D10
00540 16D9 	;
00541 16D9 	;=========================================================
00542 16D9 	; 'IP Address' Up
00543 16D9 	;
00544 16D9 	SvsMd04Sw4	mBank0
00545 16DB 0AB3 		INCF	myip_b0,F
00546 16DC 2EC7 		GOTO	write_nonvol_D10
00547 16DD 	;
00548 16DD 	;=========================================================
00549 16DD 	; 'IP Address' Fact
00550 16DD 	;
00551 16DD 	SvsMd04Sw5	mBank0
00552 16DF 308F 		MOVLW	kIPlsb
00553 16E0 00B3 		MOVWF	myip_b0
00554 16E1 2EC7 		GOTO	write_nonvol_D10
00555 16E2 	;
00556 16E2 	;===========================================================================================
00557 16E2 	; Bootloader Sw3 Yes
00558 16E2 	SvsMd06Sw3	mCall2To3	SetUIPBit
00559 16E6 018A 	SvsMd07Sw3	CLRF	PCLATH	;Reset
00560 16E7 2800 		GOTO	0x0000
00561 16E8 	;
00562 16E8 		if UsesInputTester|UsesOutputTester
00563 16E8 	;===========================================================================================
00564 16E8 	; 'Test Scanner' Down
00565 16E8 	;
00566 16E8 0354 	SvsMd08Sw3	DECF	SvsInSlotBoard,W
00567 16E9 3937 		ANDLW	0x37
00568 16EA 00D4 		MOVWF	SvsInSlotBoard
00569 16EB 28F6 		GOTO	MainB0Rtn
00570 16EC 	;
00571 16EC 	;=========================================================
00572 16EC 	; 'Test Scanner' Up
00573 16EC 	;
00574 16EC 0AD4 	SvsMd08Sw4	INCF	SvsInSlotBoard,F
00575 16ED 1DD4 		BTFSS	SvsInSlotBoard,3
00576 16EE 28F6 		GOTO	MainB0Rtn
00577 16EF 0854 		MOVF	SvsInSlotBoard,W
00578 16F0 3E10 		ADDLW	0x10
00579 16F1 3930 		ANDLW	0x30
00580 16F2 00D4 		MOVWF	SvsInSlotBoard
00581 16F3 28F6 		GOTO	MainB0Rtn
00582 16F4 	;
00583 16F4 	;=========================================================
00584 16F4 	; 'Test Scanner' Fact
00585 16F4 	;
00586 16F4 01D4 	SvsMd08Sw5	CLRF	SvsInSlotBoard
00587 16F5 28F6 		GOTO	MainB0Rtn
00588 16F6 	;
00589 16F6 		endif
00590 16F6 	;===========================================================================================
00591 16F6 	; 'Block Data Cab#' Down
00592 16F6 	;
00593 16F6 03BB 	SvsMd10Sw3	DECF	SvsCabNum,F
00594 16F7 3008 		MOVLW	0x08
00595 16F8 1BBB 		BTFSC	SvsCabNum,7
00596 16F9 00BB 		MOVWF	SvsCabNum
00597 16FA 28F6 		GOTO	MainB0Rtn
00598 16FB 	;
00599 16FB 	;=========================================================
00600 16FB 	; 'Block Data Cab#' Up
00601 16FB 	;
00602 16FB 19BB 	SvsMd10Sw4	BTFSC	SvsCabNum,3
00603 16FC 2EFF 		GOTO	SvsMd10Sw5
00604 16FD 0ABB 		INCF	SvsCabNum,F
00605 16FE 28F6 		GOTO	MainB0Rtn
00606 16FF 	;
00607 16FF 	;=========================================================
00608 16FF 	; 'Block Data Cab#' Fact
00609 16FF 	;
00610 16FF 01BB 	SvsMd10Sw5	CLRF	SvsCabNum
00611 1700 28F6 		GOTO	MainB0Rtn
00612 1701 	;
00613 1701 	;===========================================================================================
00614 1701 		if UsesBlockModules
00615 1701 	; 'Block Module Tester''Num=     Value=' Down
00616 1701 2155 	SvsMd11Sw3	CALL	SvsTestModuleOFF
00617 1702 03D8 		DECF	SvsBMdlNum,F
00618 1703 301F 		MOVLW	kLastBlkModule
00619 1704 1BD8 		BTFSC	SvsBMdlNum,7
00620 1705 00D8 		MOVWF	SvsBMdlNum
00621 1706 28F6 		GOTO	MainB0Rtn
00622 1707 	;===========================================================
00623 1707 	; 'Block Module Tester''Num=     Value=' Up
00624 1707 2155 	SvsMd11Sw4	CALL	SvsTestModuleOFF
00625 1708 0AD8 		INCF	SvsBMdlNum,F
00626 1709 0858 		MOVF	SvsBMdlNum,W
00627 170A 3C20 		SUBLW	kLastBlkModule+1
00628 170B 		SKPNZ
00629 170C 01D8 		CLRF	SvsBMdlNum
00630 170D 28F6 		GOTO	MainB0Rtn
CastleGate.asm   "DispatchComIO.asm"                                     Page: 167
/HPRR Electrical Dept/HPRR.ASM/MasterFiles/

00631 170E 	;===========================================================
00632 170E 	; 'Block Module Tester''Num=     Value=' Change
00633 170E 0AD9 	SvsMd11Sw5	INCF	SvsBMdlVal,F
00634 170F 0859 		MOVF	SvsBMdlVal,W
00635 1710 3C19 		SUBLW	d'25'	;24=test all
00636 1711 		SKPNZ
00637 1712 01D9 		CLRF	SvsBMdlVal
00638 1713 		else
00642 1713 		endif
00643 1713 28F6 		GOTO	MainB0Rtn
00644 1714 	;===========================================================================================
00645 1714 		if UsesOutputTester
00646 1714 	; 'Output Board Tester''Num=     Value=' Down
00647 1714 03D8 	SvsMd12Sw3	DECF	SvsBMdlNum,F
00648 1715 28F6 		GOTO	MainB0Rtn
00649 1716 	;===========================================================
00650 1716 	; 'Output Board Tester''Num=     Value=' Up
00651 1716 0AD8 	SvsMd12Sw4	INCF	SvsBMdlNum,F
00652 1717 28F6 		GOTO	MainB0Rtn
00653 1718 	;===========================================================
00654 1718 	; 'Output Board Tester''Num=     Value=' Change
00655 1718 3080 	SvsMd12Sw5	MOVLW	0x80
00656 1719 06D9 		XORWF	SvsBMdlVal,F
00657 171A 		endif
00658 171A 28F6 	SvsMdTtlXtras	GOTO	MainB0Rtn
00659 171B 	;
00660 171B 	;===========================================================================================
00661 171B 	;===========================================================================================
00662 171B 00F9 	DecAndSave	MOVWF	Param79
00663 171C 2055 		CALL	ReadEE79_D10
00664 171D 00F8 		MOVWF	Param78
00665 171E 0378 		DECF	Param78,W
00666 171F 2828 		GOTO	WriteEEP79W_D10
00667 1720 	;
00668 1720 	;=============================================================
00669 1720 00F9 	IncAndSave	MOVWF	Param79
00670 1721 2055 		CALL	ReadEE79_D10
00671 1722 00F8 		MOVWF	Param78
00672 1723 0A78 		INCF	Param78,W
00673 1724 2828 		GOTO	WriteEEP79W_D10
00674 1725 	;
00675 1725 	;=============================================================
00676 1725 	;
00677 1725 00F9 	Save7879	MOVWF	Param79
00678 1726 		MOVFW	Param78
00679 1727 2828 		GOTO	WriteEEP79W_D10
00680 1728 	;
00681 1728 	;===========================================================================================
00682 1728 	;*******************************************************************************************
00683 1728 	;===========================================================================================
00684 1728 	; Branch Tables
00685 1728 		ORG	0x1780
00686 1780 	;============================================================================================
00687 1780 	;
00688 1780 	; Entry: Bank0 selected
00689 1780 	;
00690 1780 	DispIdleDispatch	mBank0
00691 1782 140A 		BSF	PCLATH,0	;0xX7XX
00692 1783 148A 		BSF	PCLATH,1
00693 1784 150A 		BSF	PCLATH,2
00694 1785 0823 		MOVF	ScrnNumber,W
00695 1786 1C28 		BTFSS	ServiceMode
00696 1787 2FF7 		GOTO	RunModeIdler
00697 1788 2FE9 		GOTO	SvsModeIdler
00698 1789 	;
00699 1789 	;===========================================================================================
00700 1789 	;============================================================================================
00701 1789 	; Part of starting a Svs Mode, Displays the ID numbers, etc.
00702 1789 	;
00703 1789 	;SvsMdTtlXtras	RETURN ;;;;; moved up to save a word
00704 1789 	;
00705 1789 	;===========================================================================================
00706 1789 	; Goto the current Service mode's button handler
00707 1789 	;
00708 1789 	; Entry: W=ScrnNumber
00709 1789 	; Exit: none
00710 1789 	;
00711 1789 	SvsModeDispatch	TSTF	Param79
00712 178A 		SKPNZ		;Button = 0 'Next"?
00713 178B 2D3E 		GOTO	NextSvsMode	; Yes
00714 178C 3004 		MOVLW	0x04
00715 178D 0279 		SUBWF	Param79,W
00716 178E 		SKPNZ		;Button = 4 'Service Mode/Run Mode'
00717 178F 2D8A 		GOTO	StartRunMode	; Yes
00718 1790 3005 		MOVLW	0x05
00719 1791 0279 		SUBWF	Param79,W
00720 1792 		SKPNZ		;Button = 5 'Previous'
00721 1793 2D34 		GOTO	PrevSvsMode	; Yes
00722 1794 	;
00723 1794 	; Calculate offset as ScrnNumber x 3 + (Button - 1)
00724 1794 	;
00725 1794 03F9 		DECF	Param79,F	;0..2
00726 1795 0823 		MOVF	ScrnNumber,W	;0..63
00727 1796 0723 		ADDWF	ScrnNumber,W	; x 3
00728 1797 0723 		ADDWF	ScrnNumber,W	;0..189 + 0..2
00729 1798 0779 		ADDWF	Param79,W
00730 1799 		mBank3
00731 179B 0782 		ADDWF	PCL,F
00732 179C 	;00 'Switch Machine''Num=     Value='  next, prev, Down, Up, Chng
00733 179C 2E80 		GOTO	SvsMd00Sw3	;SW3 Down
CastleGate.asm   "DispatchComIO.asm"                                     Page: 168
/HPRR Electrical Dept/HPRR.ASM/MasterFiles/

00734 179D 2E82 		GOTO	SvsMd00Sw4	;SW4 Up
00735 179E 2E84 		GOTO	SvsMd00Sw5	;SW5 Change
00736 179F 	;01 'High Switch Machine''Num=     Value='  next, prev, Down, Up, Chng
00737 179F 2E8C 		GOTO	SvsMd01Sw3	;SW3 Down
00738 17A0 2E8E 		GOTO	SvsMd01Sw4	;SW4 Up
00739 17A1 2E90 		GOTO	SvsMd01Sw5	;SW5 Change
00740 17A2 	;02 'Block Data''Num=     Value='  next, prev, Down, Up, Chng
00741 17A2 2E98 		GOTO	SvsMd02Sw3	;SW3 Down
00742 17A3 2E9D 		GOTO	SvsMd02Sw4	;SW4 Up
00743 17A4 		if UsesBlockCmdTest
00744 17A4 2EA3 		GOTO	SvsMd02Sw5	;SW5 Change
00745 17A5 		else
00747 17A5 		endif
00748 17A5 	;03 'MAC Address'
00749 17A5 2EC4 		GOTO	SvsMd03Sw3	;SW3 Down
00750 17A6 2ECC 		GOTO	SvsMd03Sw4	;SW4 Up
00751 17A7 2ED0 		GOTO	SvsMd03Sw5	;SW5 Fact
00752 17A8 	;04 'IP Address'
00753 17A8 2ED5 		GOTO	SvsMd04Sw3	;SW3 Down
00754 17A9 2ED9 		GOTO	SvsMd04Sw4	;SW4 Up
00755 17AA 2EDD 		GOTO	SvsMd04Sw5	;SW5 Fact
00756 17AB 	;05 'Show Inputs'
00757 17AB 28F6 		GOTO	MainB0Rtn
00758 17AC 28F6 		GOTO	MainB0Rtn
00759 17AD 28F6 		GOTO	MainB0Rtn
00760 17AE 	;06 'Bootloader'
00761 17AE 2EE2 		GOTO	SvsMd06Sw3	;SW3 Yes
00762 17AF 2D3E 		GOTO	NextSvsMode	;SW4 No
00763 17B0 28F6 		GOTO	MainB0Rtn
00764 17B1 	;07 'Reset'
00765 17B1 2EE6 		GOTO	SvsMd07Sw3	;SW3 Yes
00766 17B2 2D3E 		GOTO	NextSvsMode	;SW4 No
00767 17B3 28F6 		GOTO	MainB0Rtn
00768 17B4 	;08 'Test Scanner'
00769 17B4 		if UsesInputTester|UsesOutputTester
00770 17B4 2EE8 		GOTO	SvsMd08Sw3	;SW3 Down
00771 17B5 2EEC 		GOTO	SvsMd08Sw4	;SW4 Up
00772 17B6 2EF4 		GOTO	SvsMd08Sw5	;SW5 Fact
00773 17B7 		else
00777 17B7 		endif
00778 17B7 	;09 'Test Scanner'
00779 17B7 28F6 		GOTO	MainB0Rtn	;SW3 Down
00780 17B8 28F6 		GOTO	MainB0Rtn	;SW4 Up
00781 17B9 28F6 		GOTO	MainB0Rtn	;SW5 Fact
00782 17BA 	;10 'Block Data Cab#'
00783 17BA 2EF6 		GOTO	SvsMd10Sw3	;SW3 Down
00784 17BB 2EFB 		GOTO	SvsMd10Sw4	;SW4 Up
00785 17BC 2EFF 		GOTO	SvsMd10Sw5	;SW5 Fact
00786 17BD 	;
00787 17BD 	;11 'Block Module Tester''Num=     Value='  next, prev, Down, Up, Chng
00788 17BD 2F01 		GOTO	SvsMd11Sw3	;SW3 Down
00789 17BE 2F07 		GOTO	SvsMd11Sw4	;SW4 Up
00790 17BF 2F0E 		GOTO	SvsMd11Sw5	;SW5 Change
00791 17C0 	;
00792 17C0 	;12 'Output Board Tester''Num=     Value='  next, prev, Down, Up, Chng
00793 17C0 		if UsesOutputTester
00794 17C0 2F14 		GOTO	SvsMd12Sw3	;SW3 Down
00795 17C1 2F16 		GOTO	SvsMd12Sw4	;SW4 Up
00796 17C2 2F18 		GOTO	SvsMd12Sw5	;SW5 Change
00797 17C3 		else
00801 17C3 		endif
00802 17C3 	;
00803 17C3 	;============================================================================================
00804 17C3 	; Goto the current Run mode's button handler
00805 17C3 	;
00806 17C3 	; Entry: Param79 btn num (0..5)
00807 17C3 	; Exit: none
00808 17C3 	;
00809 17C3 3004 	RunModeDispatch	MOVLW	0x04
00810 17C4 0279 		SUBWF	Param79,W
00811 17C5 		SKPNZ		;SW6?
00812 17C6 2D4B 		GOTO	StartSvsMode	; yes
00813 17C7 3005 		MOVLW	0x05
00814 17C8 0279 		SUBWF	Param79,W
00815 17C9 		SKPNZ		;SW7?
00816 17CA 2D75 		GOTO	PrevRunMode	; yes
00817 17CB 	; Calculate offset as ScrnNumber x 3 + (Button - 1)
00818 17CB 	;
00819 17CB 0823 		MOVF	ScrnNumber,W	;0..63
00820 17CC 0723 		ADDWF	ScrnNumber,W	;x2=0..126
00821 17CD 0723 		ADDWF	ScrnNumber,W	;x3=0..189
00822 17CE 0723 		ADDWF	ScrnNumber,W	;x4=0..252 + 0..3
00823 17CF 0779 		ADDWF	Param79,W
00824 17D0 		mBank3
00825 17D2 0782 		ADDWF	PCL,F
00826 17D3 	;Screen 0, SIGNONStrPtr, IP
00827 17D3 2D7D 		GOTO	NextRunMode	;SW2 Next
00828 17D4 28F6 		GOTO	MainB0Rtn	;SW3
00829 17D5 2DCF 		GOTO	NormalMd00_SW4	;SW4
00830 17D6 2DD0 		GOTO	NormalMd00_SW5	;SW5
00831 17D7 	;Screen 1, SIGNONStrPtr, S/N
00832 17D7 2D7D 		GOTO	NextRunMode	;SW2 Next
00833 17D8 28F6 		GOTO	MainB0Rtn	;SW3
00834 17D9 28F6 		GOTO	MainB0Rtn	;SW4
00835 17DA 28F6 		GOTO	MainB0Rtn	;SW5
00836 17DB 	;Screen 2, SIGNONStrPtr
00837 17DB 2D7D 		GOTO	NextRunMode	;SW2 Next
00838 17DC 28F6 		GOTO	MainB0Rtn	;SW3
00839 17DD 2DCF 		GOTO	NormalMd00_SW4	;SW4
00840 17DE 2DD0 		GOTO	NormalMd00_SW5	;SW5
CastleGate.asm   "DispatchComIO.asm"                                     Page: 169
/HPRR Electrical Dept/HPRR.ASM/MasterFiles/

00841 17DF 	;Screen 3, (Err | Login),SW2 to clear
00842 17DF 2DD1 		GOTO	NormalMd03_SW5	;SW2 Cancel
00843 17E0 28F6 		GOTO	MainB0Rtn	;SW3
00844 17E1 28F6 		GOTO	MainB0Rtn	;SW4
00845 17E2 28F6 		GOTO	MainB0Rtn	;SW5
00846 17E3 	;	
00847 17E3 	;============================================================================================
00848 17E3 	; Route to the correct handler for this screen/button
00849 17E3 	;
00850 17E3 	; Entry: Param79 is now the normalized button number.
00851 17E3 	;        ScrnNumber is the Current Screen Number SW2..SW7 = 0..5
00852 17E3 	; Exit:
00853 17E3 	;
00854 17E3 140A 	RunOrService	BSF	PCLATH,0	;0xX7XX
00855 17E4 148A 		BSF	PCLATH,1
00856 17E5 150A 		BSF	PCLATH,2
00857 17E6 1C28 		BTFSS	ServiceMode
00858 17E7 2FC3 		GOTO	RunModeDispatch
00859 17E8 2F89 		GOTO	SvsModeDispatch
00860 17E9 	;
00861 17E9 	;============================================================================================
00862 17E9 	;
00863 17E9 0782 	SvsModeIdler	ADDWF	PCL,F
00864 17EA 2DD2 		GOTO	SvsMd00Idle	;Scrn #00'Switch Machine'
00865 17EB 2DDC 		GOTO	SvsMd01Idle	;Scrn #01'High Switch Machine'
00866 17EC 2DE6 		GOTO	SvsMd02Idle	;Scrn #02'Block Data'
00867 17ED 2DFE 		GOTO	SvsMd03Idle	;Scrn #03'MAC Address'
00868 17EE 2E04 		GOTO	SvsMd04Idle	;Scrn #04'IP Address'
00869 17EF 		if UsesShowInputs
00870 17EF 2E0A 		GOTO	SvsMd05Idle	;Scrn #05'Input '
00871 17F0 		else
00873 17F0 		endif
00874 17F0 28F6 		GOTO	MainB0Rtn	;Scrn #06'Bootloader'
00875 17F1 28F6 		GOTO	MainB0Rtn	;Scrn #07'Remote Reset'
00876 17F2 	;
00877 17F2 		if UsesInputTester|UsesOutputTester
00878 17F2 2E11 		GOTO	SvsMd08Idle	;Scrn #08'Test Scanner'
00879 17F3 		else
00881 17F3 		endif
00882 17F3 	;
00883 17F3 		if UsesInputTester
00884 17F3 2E16 		GOTO	SvsMd09Idle	;Scrn #09'Test Scanner'
00885 17F4 		else
00887 17F4 		endif
00888 17F4 	;
00889 17F4 2E43 		GOTO	SvsMd10Idle	;Scrn #10'Block Data Cab#'
00890 17F5 		if UsesBlockModules
00891 17F5 2E48 		GOTO	SvsMd11Idle	;Scrn #11'Block Module Tester'
00892 17F6 		else
00894 17F6 		endif
00895 17F6 		if UsesOutputTester
00896 17F6 2E51 		GOTO	SvsMd12Idle	;Scrn #12'Output Board Tester'
00897 17F7 		else
00899 17F7 		endif
00900 17F7 	;
00901 17F7 	;============================================================================================
00902 17F7 	;
00903 17F7 3903 	RunModeIdler	ANDLW	0x03
00904 17F8 0782 		ADDWF	PCL,F
00905 17F9 28F9 		GOTO	ShowRunScrn00	;Scrn #00 SIGNONStrPtr,IP
00906 17FA 28F9 		GOTO	ShowRunScrn00	;Scrn #01 SIGNONStrPtr,SN
00907 17FB 28F9 		GOTO	ShowRunScrn00	;Scrn #02 SIGNONStrPtr
00908 17FC 28F6 		GOTO	DoErrorDisplay	;Scrn #03
00909 17FD 	;
00910 17FD 	;
00911 17FD 	;
00912 17FD 	;
00913 17FD 	;
00914 17FD 	;
00915 17FD 	;
00916 17FD 	;
00917 17FD 	;
00918 17FD 	;
00919 17FD 	;
00920 17FD 	;
00991 17FD 		include	Ether.asm	; 0x1800
00001 17FD 		subtitle	"Ether.asm"

00002 17FD 		page
00003 17FD 	;===========================================================================================
00004 17FD 	;
00005 17FD 	;  FileName: Ether.asm (HPRR version)
00006 17FD 	;  Date: 9/17/02
00007 17FD 	;  File Version: 1.0.2
00008 17FD 	;  
00009 17FD 	;  Author: David M. Flynn
00010 17FD 	;  Company: Oxford V.U.E., Inc.
00011 17FD 	;
00012 17FD 	;============================================================================================
00013 17FD 	; Notes:
00014 17FD 	;
00015 17FD 	;  This file is handler routines for IP and TCP
00016 17FD 	;
00017 17FD 	;============================================================================================
00018 17FD 	; Revision History
00019 17FD 	;
00020 17FD 	; 1.0.2     12/20/02   Deleted all Resist.asm stuff.
00021 17FD 	;	Moved Div16 routines to LowStuff.asm
00022 17FD 	; 1.0.1     9/17/02	Fisrt rev'd version
00023 17FD 	;
CastleGate.asm   "Ether.asm"                                             Page: 170
/HPRR Electrical Dept/HPRR.ASM/MasterFiles/

00024 17FD 	;============================================================================================
00025 17FD 	; Conditionals
00026 17FD 	;
00027 17FD 	;============================================================================================
00028 17FD 		ORG	0x1800
00029 1800 	;
00030 1800 	; Name	(additional stack words required) Description
00031 1800 	;================================================================================================
00032 1800 	;calls outside this segment
00033 1800 	;
00034 1800 	;match_byteW_D18	(1+1+2)
00035 1800 	;getch_net_D18	(1+1+1)
00036 1800 	;setnic_addr_D18	(1+1+0)
00037 1800 	;putnic_checkbyte_D18	(1+1+1)
00038 1800 	;Dec_Put_n_Check_D18	(1+1+2)
00039 1800 	;DecWPut_n_Check_D18	(1+1+2)
00040 1800 	;Dec3BPut_n_Check_D18	(1+1+2)
00041 1800 	;PutString_D18
00042 1800 	;MemMove_Low_L_D18	(1+0) Param78, Param79, Param7A, Param7B, FSR
00043 1800 	;
00044 1800 	;lcd_GotoLine3_3
00045 1800 	;lcd_GotoLine2_3
00046 1800 	;lcd_GotoLine1_3
00047 1800 	;lcd_GotoLine0_3
00048 1800 	;lcd_GotoLineW_D18
00049 1800 	;lcd_gotoxy_D18
00050 1800 	;Disp_Hex_Byte_D18
00051 1800 	;PrintString_D18
00052 1800 	;Fix_decbyte_D18
00053 1800 	;Disp_decword_D18
00054 1800 	;Disp_decbyteW_D18
00055 1800 	;Disp_dec3B_D18
00056 1800 	;Disp_Space_3
00057 1800 	;Disp_Colon_3
00058 1800 	;DisplaysW_D18
00059 1800 	;find_file_D18
00060 1800 	;ReadEEROM_D18 (1+2) Param78, Param79, FSR
00061 1800 	;WriteEEROM_D18 (1+2) Param78, FSR
00062 1800 	;i2c_read_D18
00063 1800 	;i2c_read1_D18
00064 1800 	;open_file_D18
00065 1800 	;close_file_D18
00066 1800 	;set_rtc_D18
00067 1800 	;ReadEEwW_D18 (1+0) RAM:none
00068 1800 	;WriteEEP79W_D18
00069 1800 	;WriteEEP79WPI_D18
00070 1800 	;SRAM_ReadDR_D18	(1+1+0)
00071 1800 	;
00072 1800 	;=======================================================================================
00073 1800 	;segment 3 routines
00074 1800 	;
00075 1800 	; CGI's
00076 1800 	; "a=" Action Number	"GET /page.html?a=1"
00077 1800 	;
00078 1800 	; Hash EGI's
00079 1800 	; DoHashEGI_A	<!--#A--> not used, sample code
00080 1800 	; DoHashEGI_B	<!--#B--> not used
00081 1800 	;
00082 1800 	;SendAdcsByIP
00083 1800 	;check_formargs	Check for arguments in HTTP request string 
00084 1800 	;
00085 1800 	; EGI's
00086 1800 	; DoEGI_a	@a Firmware rev. 'VUE-Ferric v1.0d6'
00087 1800 	; DoEGI_b	@b Unit's S/N '7001'
00088 1800 	;
00089 1800 	;=========================================================================
00090 1800 	;=========================================================================
00091 1800 	; These routines are used by the bootloaded, their callers must not be moved.
00092 1800 	; i2c_read1 is a special case and the routine itself must not move.
00093 1800 	;
00094 1800 	i2c_read1_D18	mCall3To0	i2c_read1
00095 1805 0008 		RETURN
00096 1806 	;
00097 1806 	ZeroFName_D18	mCall3To0	ZeroFName
00098 180B 0008 		RETURN
00099 180C 	;
00100 180C 0080 	DOP_Ram_D18	MOVWF	INDF
00101 180D 0A84 		INCF	FSR,F
00102 180E 0008 		RETURN
00103 180F 	;
00104 180F 	find_file_D18	mCall3To0	find_file
00105 1814 0008 		RETURN
00106 1815 	;
00107 1815 	open_file_D18	mCall3To0	open_file
00108 181A 0008 		RETURN
00109 181B 	;
00110 181B 	close_file_D18	mCall3To0	close_file
00111 1820 0008 		RETURN
00112 1821 	;
00113 1821 	ReadEE79_D18	mCall3To0	ReadEE79
00114 1826 0008 		RETURN
00115 1827 	;
00116 1827 	WriteEEP79W_D18	mCall3To0	WriteEEP79W
00117 182C 0008 		RETURN
00118 182D 	;
00119 182D 	;
00120 182D 3003 	lcd_GotoLine3_3	MOVLW	0x03
00121 182E 2834 		GOTO	lcd_GotoLineW_D18
00122 182F 3002 	lcd_GotoLine2_3	MOVLW	0x02
00123 1830 2834 		GOTO	lcd_GotoLineW_D18
CastleGate.asm   "Ether.asm"                                             Page: 171
/HPRR Electrical Dept/HPRR.ASM/MasterFiles/

00124 1831 3001 	lcd_GotoLine1_3	MOVLW	0x01
00125 1832 2834 		GOTO	lcd_GotoLineW_D18
00126 1833 0103 	lcd_GotoLine0_3	CLRW
00127 1834 	lcd_GotoLineW_D18	mCall3To0	lcd_GotoLineW
00128 1839 0008 		RETURN
00129 183A 	;
00130 183A 	PrintString_D18	mCall3To0	PrintString
00131 183F 0008 		RETURN
00132 1840 	;
00133 1840 	;=========================================================================
00134 1840 	; EGI dispatchers
00135 1840 	;
00136 1840 0041 	LastUCEGI	EQU	'A'	;Range checking
00137 1840 	LastUCEGI	EQU	'A'	;Range checking
00138 1840 	UCEGIDispatch	mPCLGoto
00139 1844 2958 		GOTO	DoEGI_A	;@A Oxi Flow Error
00140 1845 	;
00141 1845 0067 	LastEGI	EQU	'g'
00142 1845 	;
00143 1845 	EGIDispatch	mPCLGoto
00144 1849 292B 		GOTO	DoEGI_a	;Firmware rev. 'VUE-Ferric v1.0d6'
00145 184A 2931 		GOTO	DoEGI_b	; Unit's S/N '7001'
00146 184B 2938 		GOTO	DoEGI_c	;lcd Line 0
00147 184C 293A 		GOTO	DoEGI_d	;lcd Line 1
00148 184D 293C 		GOTO	DoEGI_e	;lcd Line 2
00149 184E 293E 		GOTO	DoEGI_f	;lcd Line 3
00150 184F 294F 		GOTO	DoEGI_g	; PWAccessCode
00151 1850 	;
00152 1850 0063 	LastCGI	EQU	'c'
00153 1850 	;
00154 1850 	CGIDispatch	mPCLGoto
00155 1854 2A48 		GOTO	DoCGI_a
00156 1855 2959 		GOTO	DoCGI_b
00157 1856 2969 		GOTO	DoCGI_c
00158 1857 	;
00159 1857 0042 	LastHashEGI	EQU	'B'
00160 1857 	;
00161 1857 	HashEGIDispatch	mPCLGoto
00162 185B 2979 		GOTO	DoHashEGI_A
00163 185C 297A 		GOTO	DoHashEGI_B
00164 185D 	;
00165 185D 0007 	LastCGI_Action	EQU	0x07
00166 185D 	;
00167 185D 3907 	CGI_ActionDispatch	ANDLW	0x07
00168 185E 		mPCLGoto
00169 1862 286A 		GOTO	DoCGI_Action_1	;not used
00170 1863 286B 		GOTO	DoCGI_Action_2	;SW2
00171 1864 286D 		GOTO	DoCGI_Action_3	;SW3
00172 1865 2871 		GOTO	DoCGI_Action_4	;SW4
00173 1866 2875 		GOTO	DoCGI_Action_5	;SW5
00174 1867 2879 		GOTO	DoCGI_Action_6	;SW6
00175 1868 287B 		GOTO	DoCGI_Action_7	;SW7
00176 1869 29D9 		GOTO	http_recv_CGI
00177 186A 	;
00178 186A 29D9 	DoCGI_Action_1	GOTO	http_recv_CGI
00179 186B 3001 	DoCGI_Action_2	MOVLW	0x01	;SW2
00180 186C 287C 		GOTO	DoCGI_ActionBtn
00181 186D 1DA5 	DoCGI_Action_3	BTFSS	PWGood	;pass code must have been accepted
00182 186E 287E 		GOTO	DoCGI_Action_Rtn
00183 186F 3002 		MOVLW	0x02	;SW3
00184 1870 287C 		GOTO	DoCGI_ActionBtn
00185 1871 1DA5 	DoCGI_Action_4	BTFSS	PWGood
00186 1872 287E 		GOTO	DoCGI_Action_Rtn
00187 1873 3003 		MOVLW	0x03	;SW4
00188 1874 287C 		GOTO	DoCGI_ActionBtn
00189 1875 1DA5 	DoCGI_Action_5	BTFSS	PWGood
00190 1876 287E 		GOTO	DoCGI_Action_Rtn
00191 1877 3004 		MOVLW	0x04	;SW5
00192 1878 287C 		GOTO	DoCGI_ActionBtn
00193 1879 3005 	DoCGI_Action_6	MOVLW	0x05	;SW6
00194 187A 287C 		GOTO	DoCGI_ActionBtn
00195 187B 3006 	DoCGI_Action_7	MOVLW	0x06	;SW7
00196 187C 00A9 	DoCGI_ActionBtn	MOVWF	CGI_BtnQueued
00197 187D 	;tc
00198 187D 	;	MOVLW	d'0'	;1st line
00199 187D 	;	MOVWF	Param78
00200 187D 	;	MOVLW	d'17'
00201 187D 	;	CALL	lcd_gotoxy_D18
00202 187D 	;	MOVF	CGI_BtnQueued,W
00203 187D 	;	CALL	Disp_Hex_Byte_D18
00204 187D 	;etc
00205 187D 11A5 		BCF	PWGood
00206 187E 29D9 	DoCGI_Action_Rtn	GOTO	http_recv_CGI
00207 187F 	;
00208 187F 	;======================================================================
00209 187F 	;Dispatch routines  (this is segment 3)
00210 187F 	;segment 1 routines called
00211 187F 	;
00212 187F 	;
00213 187F 	match_word_D18	mCall3To1	match_word
00214 1883 0008 		RETURN
00215 1884 	;
00216 1884 	match_byteW_D18	mCall3To1	match_byteW
00217 1888 0008 		RETURN
00218 1889 	;
00219 1889 	getch_net_D18	mCall3To1	getch_net
00220 188D 0008 		RETURN
00221 188E 	;
00222 188E 	setnic_addr_D18	mCall3To1	setnic_addr
00223 1892 0008 		RETURN
CastleGate.asm   "Ether.asm"                                             Page: 172
/HPRR Electrical Dept/HPRR.ASM/MasterFiles/

00224 1893 	;
00225 1893 	putnic_checkbyte_D18	mCall3To1	putnic_checkbyte
00226 1897 0008 		RETURN
00227 1898 	; 
00228 1898 	putch_net_W_D18	mCall3To1	putch_net_W
00229 189C 0008 		RETURN
00230 189D 	;
00231 189D 	Dec_Put_n_Check_D18	mCall3To1	Dec_Put_n_Check
00232 18A1 0008 		RETURN
00233 18A2 	;
00234 18A2 	DecWPut_n_Check_D18	mCall3To1	DecWPut_n_Check
00235 18A6 0008 		RETURN
00236 18A7 	;
00237 18A7 		if Uses3BNums
00238 18A7 	Dec3BPut_n_Check_D18	mCall3To1	Dec3BPut_n_Check
00239 18AB 0008 		RETURN
00240 18AC 		endif
00241 18AC 	;
00242 18AC 	PutString_D18	mCall3To1	PutString
00243 18B0 0008 		RETURN
00244 18B1 	;
00245 18B1 	MemMove_Low_L_D18	mCall3To1	MemMove_Low_L
00246 18B5 0008 		RETURN
00247 18B6 	;
00248 18B6 	;Segment 0 Routines called
00249 18B6 	;
00250 18B6 	lcd_gotoxy_D18	mCall3To0	lcd_gotoxy
00251 18BB 0008 		RETURN
00252 18BC 	;
00253 18BC 	Disp_Hex_Byte_D18	mCall3To0	Disp_Hex_Byte
00254 18C1 0008 		RETURN
00255 18C2 	;
00256 18C2 	Fix_decbyte_D18	mCall3To0	Fix_decbyte
00257 18C7 0008 		RETURN
00258 18C8 	;
00259 18C8 	Disp_decword_D18	mCall3To0	Disp_decword
00260 18CD 0008 		RETURN
00261 18CE 	;
00262 18CE 	Disp_decbyteW_D18	mCall3To0	Disp_decbyteW
00263 18D3 0008 		RETURN
00264 18D4 	;
00265 18D4 		if Uses3BNums
00266 18D4 	Disp_dec3B_D18	mCall3To0	Disp_dec3B
00267 18D9 0008 		RETURN
00268 18DA 		endif
00269 18DA 	;
00270 18DA 3020 	Disp_Space_3	MOVLW	' '
00271 18DB 28DD 		GOTO	DisplaysW_D18
00272 18DC 303A 	Disp_Colon_3	MOVLW	':'
00273 18DD 	DisplaysW_D18	mCall3To0	DisplaysW
00274 18E2 0008 		RETURN
00275 18E3 	;
00276 18E3 	ReadEEROM_D18	mCall3To0	ReadEEROM
00277 18E8 0008 		RETURN
00278 18E9 	;
00279 18E9 	WriteEEROM_D18	mCall3To0	WriteEEROM
00280 18EE 0008 		RETURN
00281 18EF 	;
00282 18EF 	i2c_read_D18	mCall3To0	i2c_read
00283 18F4 0008 		RETURN
00284 18F5 	;
00285 18F5 		if HasRTC
00291 18F5 		endif
00292 18F5 	;
00293 18F5 	ReadEE79PI_D18	mCall3To0	ReadEE79PI
00294 18FA 0008 		RETURN
00295 18FB 	;
00296 18FB 	ReadEEwW_D18	mCall3To0	ReadEEwW
00297 1900 0008 		RETURN
00298 1901 	;
00299 1901 	WriteEEP79WPI_D18	mCall3To0	WriteEEP79WPI
00300 1906 0008 		RETURN
00301 1907 	;
00302 1907 	SRAM_ReadDR_D18	mCall3To0	SRAM_ReadDR
00303 190C 0008 		RETURN
00304 190D 	;
00305 190D 	SRAM_ReadPI_D18	mCall3To0	SRAM_ReadPI
00306 1912 0008 		RETURN
00307 1913 	;
00308 1913 	SRAM_WritePI_D18	mCall3To0	SRAM_WritePI
00309 1918 0008 		RETURN
00310 1919 	;
00311 1919 	SRAM_Read_D18	mCall3To0	SRAM_Read
00312 191E 0008 		RETURN
00313 191F 	;
00314 191F 	SRAM_Write_D18	mCall3To0	SRAM_Write
00315 1924 0008 		RETURN
00316 1925 	;
00317 1925 	Delay1Sec_D18	mCall3To0	Delay1Sec
00318 192A 0008 		RETURN
00319 192B 	;
00320 192B 	;============================================================================================
00321 192B 	;
00322 192B 	;todo! if fileidx=nn then do filenn EGIs else CommonEGIs
00323 192B 	;  this may become necessary later.
00324 192B 	;
00325 192B 	;========================================================================================
00326 192B 	; EGI handlers
00327 192B 	;
00328 192B 	;========================================================================================
CastleGate.asm   "Ether.asm"                                             Page: 173
/HPRR Electrical Dept/HPRR.ASM/MasterFiles/

00329 192B 	; EGI handlers
00330 192B 	;
00331 192B 	; Firmware rev. 'VUE-Ferric v1.0d6'
00332 192B 300F 	DoEGI_a	MOVLW	SIGNONStrPtr
00333 192C 		mCall3To1	PutString
00334 1930 0008 		RETURN
00335 1931 	;
00336 1931 	; Unit's S/N '7001'
00337 1931 300A 	DoEGI_b	MOVLW	eSN0
00338 1932 20FB 		CALL	ReadEEwW_D18
00339 1933 00F6 		MOVWF	Param76
00340 1934 300B 		MOVLW	eSN1
00341 1935 20FB 		CALL	ReadEEwW_D18
00342 1936 00F7 		MOVWF	Param77
00343 1937 28A2 		GOTO	DecWPut_n_Check_D18
00344 1938 	;
00345 1938 	;
00346 1938 3000 	DoEGI_c	MOVLW	0x00
00347 1939 293F 		GOTO	DoEGI_ReadLCD
00348 193A 3040 	DoEGI_d	MOVLW	0x40
00349 193B 293F 		GOTO	DoEGI_ReadLCD
00350 193C 3014 	DoEGI_e	MOVLW	0x14
00351 193D 293F 		GOTO	DoEGI_ReadLCD
00352 193E 3054 	DoEGI_f	MOVLW	0x54
00353 193F 	DoEGI_ReadLCD	mCall3To0	lcd_SetDDRamAddress
00354 1944 3014 		MOVLW	d'20'	;chars to move
00355 1945 00F9 		MOVWF	Param79
00356 1946 	DoEGI_ReadLCD_L1	mCall3To0	lcd_ReadData
00357 194B 2093 		CALL	putnic_checkbyte_D18
00358 194C 0BF9 		DECFSZ	Param79,F
00359 194D 2946 		GOTO	DoEGI_ReadLCD_L1
00360 194E 0008 		RETURN
00361 194F 	;
00362 194F 	; 
00363 194F 306C 	DoEGI_g	MOVLW	PWAccessCode	;@g PWAccessCode
00364 1950 1383 		BCF	STATUS,IRP
00365 1951 2955 		GOTO	DoEGI_DecByte_E2
00366 1952 	;
00367 1952 20FB 	DoEGI_DecByteEE	CALL	ReadEEwW_D18
00368 1953 289D 		GOTO	Dec_Put_n_Check_D18
00369 1954 	;
00370 1954 1783 	DoEGI_DecByte	BSF	STATUS,IRP
00371 1955 0084 	DoEGI_DecByte_E2	MOVWF	FSR
00372 1956 0800 		MOVF	INDF,W
00373 1957 289D 		GOTO	Dec_Put_n_Check_D18
00374 1958 	;
00375 1958 	;==============================================================================================
00376 1958 	;
00377 1958 0008 	DoEGI_A	RETURN
00378 1959 	;
00379 1959 	;==============================================================================================
00380 1959 	; CGI 'b=' action number
00381 1959 	; Convert text to an Int16 at Param77:Param76
00382 1959 	; Must match password access code, if not send back the index page
00383 1959 	;
00384 1959 2255 	DoCGI_b	CALL	GetCGIInt16
00385 195A 	;
00386 195A 	; Now do something based on the value in Param76.
00387 195A 	;
00388 195A 		TSTF	Param77
00389 195B 		SKPZ
00390 195C 2966 		GOTO	DoCGI_b_BadPW	;>255 not valid
00391 195D 		TSTF	Param76
00392 195E 		SKPNZ
00393 195F 2966 		GOTO	DoCGI_b_BadPW	;0x00 not valid
00394 1960 		MOVFW	Param76
00395 1961 026C 		SUBWF	PWAccessCode,W
00396 1962 		SKPZ
00397 1963 2966 		GOTO	DoCGI_b_BadPW
00398 1964 15A5 		BSF	PWGood
00399 1965 29D9 		GOTO	http_recv_CGI
00400 1966 	;
00401 1966 01EC 	DoCGI_b_BadPW	CLRF	PWAccessCode
00402 1967 11A5 		BCF	PWGood
00403 1968 	;	mBank2
00404 1968 	;	MOVLW	' '
00405 1968 	;	MOVWF	romdir.f.name
00406 1968 29F0 		GOTO	http_recv_1
00407 1969 	;
00408 1969 	;
00409 1969 	;==============================================================================================
00410 1969 	; CGI 'c=' action number
00411 1969 	; Convert text to an Int16 at Param77:Param76
00412 1969 	; Must match the serial number to enable password access code, if not send back the index page
00413 1969 	;
00414 1969 2255 	DoCGI_c	CALL	GetCGIInt16
00415 196A 	;
00416 196A 	; Now do something based on the value in Param76,Param77.
00417 196A 	;
00418 196A 300A 		MOVLW	eSN0
00419 196B 20FB 		CALL	ReadEEwW_D18
00420 196C 0276 		SUBWF	Param76,W
00421 196D 		SKPZ
00422 196E 2966 		GOTO	DoCGI_b_BadPW
00423 196F 	;
00424 196F 300B 		MOVLW	eSN1
00425 1970 20FB 		CALL	ReadEEwW_D18
00426 1971 0277 		SUBWF	Param77,W
00427 1972 		SKPZ
00428 1973 2966 		GOTO	DoCGI_b_BadPW
CastleGate.asm   "Ether.asm"                                             Page: 174
/HPRR Electrical Dept/HPRR.ASM/MasterFiles/

00429 1974 	;
00430 1974 1703 		BSF	_RP1	;Bank 2
00431 1975 		MOVFW	IPDatagramID
00432 1976 1303 		BCF	_RP1	;Bank 0
00433 1977 00EC 		MOVWF	PWAccessCode
00434 1978 29D9 		GOTO	http_recv_CGI
00435 1979 	;
00436 1979 	;
00437 1979 	;==============================================================================
00438 1979 	;
00439 1979 	DoHashEGI_A	;MOVLW	Str_ImgSrcPtr	;<img src="
00440 1979 		;mCall3To1	PutString
00441 1979 		;mBank3
00442 1979 		;MOVLW	Str_RedOnPtr	;redon.jpg">
00443 1979 		;BTFSS	ErrorLamp
00444 1979 		;MOVLW	Str_RedOffPtr	;redoff.jpg">
00445 1979 		;mCall3To1	PutString
00446 1979 0008 		RETURN
00447 197A 	;
00448 197A 	DoHashEGI_B
00449 197A 0008 		RETURN
00450 197B 	;
00451 197B 		if UsesUDP
00452 197B 	;========================================================================================
00453 197B 	; Handler for the incoming data at the UDP terminal port (TermPort)
00454 197B 	;
00455 197B 	; Port 57 "any private terminal access"
00456 197B 	; Entry:next NIC byte to read is first byte of UDP data field
00457 197B 	; Exit:
00458 197B 	; RAM used:
00459 197B 	; Calls:(1+)
00460 197B 	;
00461 197B 0008 	UDP_Term_Handler	RETURN
00462 197C 	;
00463 197C 		endif
00464 197C 	;========================================================================================
00465 197C 	; Handler for port IPDATAPORT
00466 197C 	; Port 87 Private data link port.
00467 197C 	; Entry:next NIC byte to read is first byte of TCP data field
00468 197C 	; Exit:
00469 197C 	; RAM used:
00470 197C 	; Calls:(1+)
00471 197C 	;
00472 197C 01CB 	DataPort_handler	CLRF	tpxdlen+1	; tpxdlen = 0;
00473 197D 01CA 		CLRF	tpxdlen
00474 197E 	;buffer the command in romdir.f.name
00475 197E 01F9 		CLRF	Param79	;i=0;
00476 197F 2089 	IPDP_handler_L1	CALL	getch_net_D18	;send one char to disp
00477 1980 1B26 		BTFSC	Flags26,atend
00478 1981 298D 		GOTO	IPDP_handler_1	;atend
00479 1982 3017 		MOVLW	low romdir.f.name
00480 1983 0779 		ADDWF	Param79,W	;i
00481 1984 0084 		MOVWF	FSR
00482 1985 1783 		BSF	STATUS,IRP
00483 1986 0878 		MOVF	Param78,W
00484 1987 0080 		MOVWF	INDF	;117+Param79
00485 1988 0AF9 		INCF	Param79,F
00486 1989 300C 		MOVLW	ROM_FNAMELEN
00487 198A 0279 		SUBWF	Param79,W
00488 198B 1D03 		BTFSS	STATUS,Z	;12 chars max
00489 198C 297F 		GOTO	IPDP_handler_L1	
00490 198D 	;
00491 198D 01CD 	IPDP_handler_1	CLRF	checklo	;checkhi = checklo = 0; 
00492 198E 01CC 		CLRF	checkhi
00493 198F 1326 		BCF	Flags26,checkflag	; checkflag = 0; 
00494 1990 3028 		MOVLW	IPHDR_LEN+TCPHDR_LEN	;txin = IPHDR_LEN + TCPHDR_LEN;  O/P data to buffer, calc checksum 
00495 1991 00D4 		MOVWF	txin
00496 1992 	;
00497 1992 	; setnic_addr((TXSTART*256)+sizeof(ETHERHEADER)+IPHDR_LEN+TCPHDR_LEN)
00498 1992 3040 		MOVLW	TXSTART
00499 1993 00FB 		MOVWF	Param7B
00500 1994 3036 		MOVLW	ETHERHEADER_LEN+IPHDR_LEN+TCPHDR_LEN
00501 1995 00FA 		MOVWF	Param7A
00502 1996 208E 		CALL	setnic_addr_D18
00503 1997 	;
00504 1997 	;send back and OK
00505 1997 304F 		MOVLW	'O'
00506 1998 2093 		CALL	putnic_checkbyte_D18
00507 1999 304B 		MOVLW	'K'
00508 199A 2093 		CALL	putnic_checkbyte_D18
00509 199B 	;
00510 199B 3011 		MOVLW	TFIN+TACK	;Close connection when sent 
00511 199C 00E7 		MOVWF	tflags
00512 199D 084C 		MOVF	checkhi,W	; d_checkhi = checkhi   Save checksum 
00513 199E 00CE 		MOVWF	d_checkhi
00514 199F 084D 		MOVF	checklo,W	; d_checklo = checklo
00515 19A0 00CF 		MOVWF	d_checklo
00516 19A1 		mCall3To1	tcp_xmit	; tcp_xmit();  ..do it 
00517 19A5 0008 		RETURN
00518 19A6 	;
00519 19A6 	;
00520 19A6 	;
00521 19A6 	;==============================================================================================
00522 19A6 	;==============================================================================
00523 19A6 	;=====================================================================================================
00524 19A6 	;
00525 19A6 	; end of segment 3
00526 19A6 	;
00527 19A6 	;=====================================================================================================
00528 19A6 	;
CastleGate.asm   "Ether.asm"                                             Page: 175
/HPRR Electrical Dept/HPRR.ASM/MasterFiles/

00529 19A6 	;
00530 19A6 	;
00992 19A6 		include	HTTPServer.asm
00001 19A6 		subtitle	"HTTPServer.asm"

00002 19A6 		page
00003 19A6 	;===========================================================================================
00004 19A6 	;
00005 19A6 	;  FileName: HTTPServer.asm
00006 19A6 	;  Date: 5/10/09
00007 19A6 	;  File Version: 1.0
00008 19A6 	;  
00009 19A6 	;  Author: David M. Flynn
00010 19A6 	;  Company: Oxford V.U.E., Inc.
00011 19A6 	;
00012 19A6 	;============================================================================================
00013 19A6 	; Notes:
00014 19A6 	;
00015 19A6 	;  This file is the HTTP server.
00016 19A6 	;  Include this file in *** Segment 3 *** after Ether.asm
00017 19A6 	;  This file contains no custom routines.
00018 19A6 	;  The file Ether.asm must have the dispater routines for this file.
00019 19A6 	;
00020 19A6 	;  Example Dispaters:
00021 19A6 	;
00022 19A6 	;========================
00023 19A6 	; EGI dispatcher
00024 19A6 	;	if UseUCEGIs
00025 19A6 	;LastUCEGI	EQU	'A'
00026 19A6 	;
00027 19A6 	;UCEGIDispatch	mPCLGoto
00028 19A6 	;	GOTO	DoEGI_A
00029 19A6 	;	endif
00030 19A6 	;
00031 19A6 	;LastEGI	EQU	'a'
00032 19A6 	;
00033 19A6 	;EGIDispatch	mPCLGoto
00034 19A6 	;	GOTO	DoEGI_a
00035 19A6 	;
00036 19A6 	;LastCGI	EQU	'a'
00037 19A6 	;
00038 19A6 	;CGIDispatch	mPCLGoto
00039 19A6 	;	GOTO	DoCGI_a
00040 19A6 	;
00041 19A6 	;LastCGI_Action	EQU	0x01
00042 19A6 	;
00043 19A6 	;CGI_ActionDispatch	mPCLGoto
00044 19A6 	;	GOTO	DoCGI_Action_1
00045 19A6 	;
00046 19A6 	;LastHashEGI	EQU	'A'
00047 19A6 	;
00048 19A6 	;HashEGIDispatch	mPCLGoto
00049 19A6 	;	GOTO	DoHashEGI_A
00050 19A6 	;
00051 19A6 	;DoCGI_Action_1	... do stuff
00052 19A6 	;	GOTO	http_recv_CGI
00053 19A6 	;
00054 19A6 	;
00055 19A6 	;==============================================================================================
00056 19A6 	; Revision History
00057 19A6 	;
00058 19A6 	; 1.0     5/10/2009	Added UsesHashEGIs.
00059 19A6 	; 1.0b1   11/30/2003	Added UseUCEGIs, support for upper case EGIs.
00060 19A6 	; 1.0a2     8/27/03	Fixed DoCGI_a calculations
00061 19A6 	; 1.0a1     6/25/03	Copied http_recv from Ether.asm.
00062 19A6 	;
00063 19A6 	;==============================================================================================
00064 19A6 	; Conditionals
00065 19A6 		ifndef usesPutNicVolts
00067 19A6 		endif
00068 19A6 		ifndef UseUCEGIs
00070 19A6 		endif
00071 19A6 	;
00072 19A6 	;==============================================================================================
00073 19A6 	;==============================================================================================
00074 19A6 	;segment 3 routines
00075 19A6 	; Name	(additional stack words required) Description
00076 19A6 	;==============================================================================================
00077 19A6 	;http_recv	Handle incoming HTTP request.
00078 19A6 	;http_recv_CGI	We found a ? after the file name, so parse the rest of the request.
00079 19A6 	;http_recv_1	The CGI's if any have been completed, continue with the filename part of the GET
00080 19A6 	;tx_file_byte	Transmit a byte from the current i2c file to the NIC
00081 19A6 	;DoCGI_a	() CGI 'a=' action number
00082 19A6 	;GetCGIInt16	(1+2) Get an Int16 from the NIC's buffer and put it in Param77:Param76
00083 19A6 	;EGIADC0Volts
00084 19A6 	;EGIADC1Volts
00085 19A6 	;putnic_volts	Send the voltage string for the given ADC to the NIC
00086 19A6 	;
00087 19A6 	;==============================================================================================
00088 19A6 	;==============================================================================================
00089 19A6 	; Handle incoming HTTP request.
00090 19A6 	;
00091 19A6 	; "GET /index.html " or "GET /index.html?"
00092 19A6 	; The current rev as of 10/22/02 ignores anything after the "?" a future
00093 19A6 	; rev should have a parser to handle CGI type data from a POST type <form>
00094 19A6 	; (i.e. "GET /page.html?a=6&b=2")
00095 19A6 	; 
00096 19A6 	;
00097 19A6 	http_recv	mBank0
00098 19A8 01CB 		CLRF	tpxdlen+1	; tpxdlen = 0; Check for 'GET' 
CastleGate.asm   "HTTPServer.asm"                                        Page: 176
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

00099 19A9 01CA 		CLRF	tpxdlen
00100 19AA 	; if (match_byte('G') && match_byte('E') && match_byte('T')) 
00101 19AA 3047 		MOVLW	'G'	;match_byte('G')
00102 19AB 2084 		CALL	match_byteW_D18
00103 19AC 1C78 		BTFSS	Param78,0
00104 19AD 0008 		RETURN
00105 19AE 	;
00106 19AE 3045 		MOVLW	'E'	;match_byte('E')
00107 19AF 2084 		CALL	match_byteW_D18
00108 19B0 1C78 		BTFSS	Param78,0
00109 19B1 0008 		RETURN
00110 19B2 	;
00111 19B2 3054 		MOVLW	'T'	;match_byte('T')
00112 19B3 2084 		CALL	match_byteW_D18
00113 19B4 1C78 		BTFSS	Param78,0
00114 19B5 0008 		RETURN
00115 19B6 	;
00116 19B6 3020 		MOVLW	' '	; match_byte(' '); 
00117 19B7 2084 		CALL	match_byteW_D18
00118 19B8 	;
00119 19B8 302F 		MOVLW	'/'	; match_byte('/'); Start of filename
00120 19B9 2084 		CALL	match_byteW_D18
00121 19BA 	;
00122 19BA 2006 		CALL	ZeroFName_D18	;zero filename
00123 19BB 	;
00124 19BB 	; for (i=0; i<ROM_FNAMELEN && get_byte(c) && c>' ' && c!='?'; i++) 
00125 19BB 01F9 		CLRF	Param79	;i=0;
00126 19BC 2089 	http_recv_L2	CALL	getch_net_D18
00127 19BD 18A6 		BTFSC	atend
00128 19BE 29F0 		GOTO	http_recv_1	;atend
00129 19BF 	; Name terminated by space or '?' 
00130 19BF 3021 		MOVLW	'!'	;"!" aka " "+1 or 0x21
00131 19C0 0278 		SUBWF	Param78,W	;Char-'!' should not barrow
00132 19C1 1C03 		BTFSS	STATUS,C
00133 19C2 29F0 		GOTO	http_recv_1	;<=' '
00134 19C3 303F 		MOVLW	'?'	;Next char = '?'
00135 19C4 0278 		SUBWF	Param78,W
00136 19C5 1903 		BTFSC	STATUS,Z
00137 19C6 29D9 		GOTO	http_recv_CGI	; yes, there should be arguments next
00138 19C7 	; romdir.f.name[i] = c; 
00139 19C7 3017 		MOVLW	low romdir.f.name
00140 19C8 0779 		ADDWF	Param79,W	;i
00141 19C9 0084 		MOVWF	FSR
00142 19CA 1783 		BSF	STATUS,IRP
00143 19CB 0878 		MOVF	Param78,W
00144 19CC 0080 		MOVWF	INDF	;(romdir.f.name+Param79)
00145 19CD 0AF9 		INCF	Param79,F
00146 19CE 300C 		MOVLW	ROM_FNAMELEN	;Have we read ROM_FNAMELEN chars?
00147 19CF 0279 		SUBWF	Param79,W
00148 19D0 1D03 		BTFSS	STATUS,Z
00149 19D1 29BC 		GOTO	http_recv_L2	; not yet
00150 19D2 	;
00151 19D2 	;Test the ROM_FNAMELEN+1 char for '?' (CGI w/ max len file name)
00152 19D2 2089 		CALL	getch_net_D18
00153 19D3 18A6 		BTFSC	atend
00154 19D4 29F0 		GOTO	http_recv_1	;atend
00155 19D5 303F 		MOVLW	'?'	;Next char = '?'
00156 19D6 0278 		SUBWF	Param78,W
00157 19D7 1D03 		BTFSS	STATUS,Z
00158 19D8 29F0 		GOTO	http_recv_1	; No
00159 19D9 	;
00160 19D9 	;
00161 19D9 	;==================================================================================
00162 19D9 	;
00163 19D9 	; We found a ? after the file name, so parse the rest of the request.
00164 19D9 	; The format should be "a=20&B=0"
00165 19D9 	; Only single characters a..z are valid
00166 19D9 	; Values are 16 bit unsigned (0..65535) or
00167 19D9 	; text "text chars" is sent as '&c=text+chars&d='
00168 19D9 	; As each param is pulled from the NICs buffer get the data and
00169 19D9 	;  process it one piece at a time.
00170 19D9 	;
00171 19D9 2089 	http_recv_CGI	CALL	getch_net_D18
00172 19DA 18A6 		BTFSC	atend
00173 19DB 29F0 		GOTO	http_recv_1
00174 19DC 	;
00175 19DC 3061 		MOVLW	'a'
00176 19DD 0278 		SUBWF	Param78,W	;Char-'a'
00177 19DE 1C03 		BTFSS	STATUS,C	;skip if Char>='a'
00178 19DF 29F0 		GOTO	http_recv_1	; chr<'a', cancel CGI
00179 19E0 3064 		MOVLW	LastCGI+1	;Last CGI +1
00180 19E1 0278 		SUBWF	Param78,W	;Char-('z'+1)
00181 19E2 1803 		BTFSC	STATUS,C	;skip if Char<('z'+1)
00182 19E3 29F0 		GOTO	http_recv_1	; chr>'z', cancel CGI
00183 19E4 	;	
00184 19E4 	; We have a char (a..LastCGI)
00185 19E4 0878 		MOVF	Param78,W
00186 19E5 00FC 		MOVWF	Param7C	;Save char for later
00187 19E6 	;
00188 19E6 	; The next char must be '=' or we skip CGIs and just work with the GET up to the '?'
00189 19E6 	;
00190 19E6 2089 		CALL	getch_net_D18
00191 19E7 18A6 		BTFSC	atend
00192 19E8 29F0 		GOTO	http_recv_1	;atend, cancel CGI
00193 19E9 303D 		MOVLW	'='	;Char = '='?
00194 19EA 0278 		SUBWF	Param78,W
00195 19EB 1D03 		BTFSS	STATUS,Z
00196 19EC 29F0 		GOTO	http_recv_1	; no, Invalid format cancel CGI
00197 19ED 	;
00198 19ED 3061 		MOVLW	'a'
CastleGate.asm   "HTTPServer.asm"                                        Page: 177
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

00199 19EE 027C 		SUBWF	Param7C,W	;CGI # 0=a, 1=b, etc.
00200 19EF 2850 		GOTO	CGIDispatch
00201 19F0 	;
00202 19F0 	;===================================================================================================
00203 19F0 	; The CGI's if any have been completed, continue with the filename part of the GET
00204 19F0 	;
00205 19F0 	; if find_file(romdir.f.name)
00206 19F0 200F 	http_recv_1	CALL	find_file_D18
00207 19F1 1878 		BTFSC	Param78,0
00208 19F2 29F6 		GOTO	http_recv_3
00209 19F3 	; 
00210 19F3 	; else File not found, get index.htm 
00211 19F3 1703 	http_recv_2	BSF	STATUS,RP1	;bank2
00212 19F4 0197 		CLRF	romdir.f.name	; romdir.f.name[0] = 0; 
00213 19F5 200F 		CALL	find_file_D18	;get index.htm
00214 19F6 	;
00215 19F6 01CD 	http_recv_3	CLRF	checklo	;checkhi = checklo = 0; 
00216 19F7 01CC 		CLRF	checkhi
00217 19F8 1126 		BCF	checkflag	; checkflag = 0; 
00218 19F9 	;
00219 19F9 3028 		MOVLW	IPHDR_LEN+TCPHDR_LEN	; txin = IPHDR_LEN + TCPHDR_LEN;
00220 19FA 00D4 		MOVWF	txin
00221 19FB 	; setnic_addr((TXSTART*256)+sizeof(ETHERHEADER)+IPHDR_LEN+TCPHDR_LEN); 
00222 19FB 3040 		MOVLW	TXSTART
00223 19FC 00FB 		MOVWF	Param7B
00224 19FD 3036 		MOVLW	ETHERHEADER_LEN+IPHDR_LEN+TCPHDR_LEN
00225 19FE 00FA 		MOVWF	Param7A
00226 19FF 208E 		CALL	setnic_addr_D18
00227 1A00 	; if (!fileidx) No files at all in ROM - disaster! 
00228 1A00 08F2 		MOVF	Param72,F	;fileidx
00229 1A01 1903 		BTFSC	STATUS,Z
00230 1A02 2A0B 		GOTO	http_recv_Err	;Z=1 File not found
00231 1A03 				;File found OK
00232 1A03 2015 		CALL	open_file_D18	; open_file() Start i2c transfer
00233 1A04 	;
00234 1A04 	; while (tx_file_byte()) Copy bytes from ROM to NIC 
00235 1A04 	;
00236 1A04 221B 	http_recv_L4	CALL	tx_file_byte	;5 (1+1+1+2)
00237 1A05 		mBank2
00238 1A07 1F96 		BTFSS	End_Of_File
00239 1A08 2A04 		GOTO	http_recv_L4
00240 1A09 201B 		CALL	close_file_D18	; close_file();
00241 1A0A 2A10 		GOTO	http_recv_4
00242 1A0B 	;
00243 1A0B 3015 	http_recv_Err	MOVLW	Str_HTTP_FAILPtr	;"HTTP/ 200 OK\r\n\r\nNo Web pages!\r\n"
00244 1A0C 		mCall3To1	PutString
00245 1A10 	;
00246 1A10 3011 	http_recv_4	MOVLW	TFIN+TACK	; tflags = TFIN+TACK;
00247 1A11 00E7 		MOVWF	tflags
00248 1A12 084C 		MOVF	checkhi,W	; d_checkhi = checkhi;Save checksum 
00249 1A13 00CE 		MOVWF	d_checkhi
00250 1A14 084D 		MOVF	checklo,W	; d_checklo = checklo; 
00251 1A15 00CF 		MOVWF	d_checklo
00252 1A16 		mCall3To1	tcp_xmit
00253 1A1A 0008 		RETURN
00254 1A1B 	;  
00255 1A1B 	;===================================================================================
00256 1A1B 	; Transmit a byte from the current i2c file to the NIC 
00257 1A1B 	; ** Return Param78:0=0 when complete file is sent else Param78:0=1
00258 1A1B 	; ** If file has EGI flag set, perform run-time variable substitution
00259 1A1B 	;
00260 1A1B 	; RAM used: Param77:0 Param78,Param79
00261 1A1B 	; Calls:(1+) i2c_read1_D18
00262 1A1B 	;
00263 1A1B 	; Check if any bytes left to send 
00264 1A1B 2237 	tx_file_byte	CALL	tfb_ReadNextB
00265 1A1C 1B96 		BTFSC	End_Of_File	;we're done with this file?
00266 1A1D 0008 		RETURN		;yes
00267 1A1E 	; Get next byte from ROM 
00268 1A1E 1C16 		BTFSS	EGI_ATVARS_bit	; This file uses EGI_ATVARS
00269 1A1F 2A35 		GOTO	tfb_NoAtEGIs	; No
00270 1A20 3040 		MOVLW	'@'
00271 1A21 0278 		SUBWF	Param78,W
00272 1A22 1D03 		BTFSS	STATUS,Z	; This char is "@"
00273 1A23 2A35 		GOTO	tfb_NoAtEGIs	;no
00274 1A24 	; If '@' and EGI var substitution.. 
00275 1A24 	; ..get 2nd byte 
00276 1A24 2237 		CALL	tfb_ReadNextB	;Param78 = i2c_read(1);
00277 1A25 1B96 		BTFSC	End_Of_File	;we're done with this file?
00278 1A26 0008 		RETURN		;yes;
00279 1A27 	;
00280 1A27 	;todo! if fileidx=nn then do filenn EGIs else CommonEGIs
00281 1A27 	;  this may become necessary later.
00282 1A27 	;
00283 1A27 	;bank 2 was selected by tfb_ReadNextB
00284 1A27 		mBank0
00285 1A29 	;
00286 1A29 		if UseUCEGIs
00298 1A29 		endif
00299 1A29 	; EGI's @a..@LastEGI
00300 1A29 	;
00301 1A29 3068 		MOVLW	LastEGI+1
00302 1A2A 0278 		SUBWF	Param78,W	;W=EGI-(LastEGI+1)
00303 1A2B 		SKPB		;EGI>LastEGI?
00304 1A2C 2A31 		GOTO	UnknownEGI	; Yes
00305 1A2D 3061 		MOVLW	'a'	;first EGI
00306 1A2E 0278 		SUBWF	Param78,W	;W=EGI-'a'
00307 1A2F 		SKPB		;EGI>='a'?
00308 1A30 2845 		GOTO	EGIDispatch	; Yes
00309 1A31 	; else Unknown variable 
CastleGate.asm   "HTTPServer.asm"                                        Page: 178
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

00310 1A31 	; putnic_checkbyte, "??" 
00311 1A31 303F 	UnknownEGI	MOVLW	'?'
00312 1A32 00F8 		MOVWF	Param78
00313 1A33 2093 		CALL	putnic_checkbyte_D18
00314 1A34 2A35 		GOTO	tx_file_byte_Send	; fall through for the second "?"
00315 1A35 	;
00316 1A35 	;
00317 1A35 		if UsesHashEGIs
00413 1A35 		else
00414 1A35 	tfb_NoAtEGIs
00415 1A35 		endif
00416 1A35 	;
00417 1A35 	; else Non-EGI byte; send out unmodified 
00418 1A35 0878 	tx_file_byte_Send	MOVF	Param78,W
00419 1A36 2893 		GOTO	putnic_checkbyte_D18
00420 1A37 	;
00421 1A37 	;=======================================
00422 1A37 	; CAUTION  Returns with Bank 2 selected
00423 1A37 	;
00424 1A37 	tfb_ReadNextB	mCall3To0	i2c_read1	;next file byte >> Param78
00425 1A3C 1703 		BSF	STATUS,RP1	; Bank 2
00426 1A3D 0810 		MOVF	romdir.f.len,W
00427 1A3E 0411 		IORWF	romdir.f.len+1,W
00428 1A3F 1D03 		BTFSS	STATUS,Z
00429 1A40 2A43 		GOTO	tfb_ReadNextB_1
00430 1A41 1796 		BSF	End_Of_File	;read past end return 0
00431 1A42 0008 		RETURN
00432 1A43 0810 	tfb_ReadNextB_1	MOVF	romdir.f.len,W	; romdir.f.len--; Decrement length
00433 1A44 1903 		BTFSC	STATUS,Z
00434 1A45 0391 		DECF	romdir.f.len+1,F
00435 1A46 0390 		DECF	romdir.f.len,F
00436 1A47 0008 		RETURN
00437 1A48 	;
00438 1A48 	;
00439 1A48 	;==============================================================================================
00440 1A48 	; CGI 'a=' action number
00441 1A48 	; Convert text to an Int16 at Param77:Param76
00442 1A48 	;
00443 1A48 2255 	DoCGI_a	CALL	GetCGIInt16
00444 1A49 	;
00445 1A49 	; Now do something based on the value in Param76.
00446 1A49 	;
00447 1A49 		TSTF	Param77
00448 1A4A 		SKPZ
00449 1A4B 29D9 		GOTO	http_recv_CGI	;>255 not valid
00450 1A4C 		TSTF	Param76
00451 1A4D 		SKPNZ
00452 1A4E 29D9 		GOTO	http_recv_CGI	;0x00 not valid
00453 1A4F 3008 		MOVLW	LastCGI_Action+1
00454 1A50 0276 		SUBWF	Param76,W	;W=CGIValue-(LastCGI_Action+1)
00455 1A51 		SKPB		;skip if action#<(LastCGI_Action+1)
00456 1A52 29D9 		GOTO	http_recv_CGI
00457 1A53 	;
00458 1A53 0376 		DECF	Param76,W	;0..N
00459 1A54 285D 		GOTO	CGI_ActionDispatch
00460 1A55 	;
00461 1A55 	;
00462 1A55 	;=========================================================================================
00463 1A55 	; Get an Int16 from the NIC's buffer and put it in Param77:Param76
00464 1A55 	; Exits when EOD or chr & or ' ' or <'0' or >'9'
00465 1A55 	;
00466 1A55 	; Entry: next char in NIC buffer is first char of data
00467 1A55 	; Exit: Int16 in Param77:Param76
00468 1A55 	;       atend=1 or the next char is the name of the next CGI
00469 1A55 	; RAM Used:Param73, Param74, Param75, Param76, Param77, Param78
00470 1A55 	; Calls: (1+2) getch_net_D18
00471 1A55 	;
00472 1A55 	; get first data char
00473 1A55 01F6 	GetCGIInt16	CLRF	Param76
00474 1A56 01F7 		CLRF	Param77
00475 1A57 2089 	GetCGIInt16_L1	CALL	getch_net_D18
00476 1A58 18A6 		BTFSC	atend
00477 1A59 0008 		RETURN		;atend, we're done with this number
00478 1A5A 	;
00479 1A5A 3026 		MOVLW	'&'	;Char = '&'?
00480 1A5B 0278 		SUBWF	Param78,W
00481 1A5C 		SKPNZ
00482 1A5D 0008 		RETURN
00483 1A5E 	;
00484 1A5E 3020 		MOVLW	' '	;Char = ' '?
00485 1A5F 0278 		SUBWF	Param78,W
00486 1A60 		SKPNZ
00487 1A61 0008 		RETURN
00488 1A62 	;
00489 1A62 3030 		MOVLW	'0'
00490 1A63 0278 		SUBWF	Param78,W	;Char-'0'
00491 1A64 		SKPNB		;skip if Char>='0'
00492 1A65 0008 		RETURN		; chr<'0', cancel CGI
00493 1A66 303A 		MOVLW	0x3A	;'9'+1
00494 1A67 0278 		SUBWF	Param78,W	;Char-('9'+1)
00495 1A68 		SKPB		;skip if Char<('9'+1)
00496 1A69 0008 		RETURN		; chr>'9', cancel CGI
00497 1A6A 	; valid char 0..9
00498 1A6A 	; val = (val * 10) + (char - '0'); 
00499 1A6A 3009 		MOVLW	0x09	;add 9 times + the original
00500 1A6B 00F3 		MOVWF	Param73	; i:=9
00501 1A6C 0876 		MOVF	Param76,W	;temp:=val
00502 1A6D 00F4 		MOVWF	Param74
00503 1A6E 0877 		MOVF	Param77,W
00504 1A6F 00F5 		MOVWF	Param75
CastleGate.asm   "HTTPServer.asm"                                        Page: 179
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

00505 1A70 0874 	GetCGIInt16_L2	MOVF	Param74,W	;val:=val+temp
00506 1A71 07F6 		ADDWF	Param76,F
00507 1A72 		ADDCF	Param77,F
00508 1A74 0875 		MOVF	Param75,W
00509 1A75 07F7 		ADDWF	Param77,F
00510 1A76 0BF3 		DECFSZ	Param73,F
00511 1A77 2A70 		GOTO	GetCGIInt16_L2
00512 1A78 	;
00513 1A78 3030 		MOVLW	'0'
00514 1A79 0278 		SUBWF	Param78,W	;Char-'0'
00515 1A7A 07F6 		ADDWF	Param76,F
00516 1A7B 		ADDCF	Param77,F
00517 1A7D 	;
00518 1A7D 2A57 		GOTO	GetCGIInt16_L1
00519 1A7E 	;
00520 1A7E 	;==============================================================================================
00521 1A7E 		if usesPutNicVolts
00574 1A7E 		endif
00575 1A7E 	;
00576 1A7E 	;
00577 1A7E 	;
00578 1A7E 	;
00579 1A7E 	;
00580 1A7E 	;
00581 1A7E 	;
00582 1A7E 	;
00583 1A7E 	;
00584 1A7E 	;
00585 1A7E 	;
00586 1A7E 	;
00587 1A7E 	;
00588 1A7E 	;
00589 1A7E 	;
00993 1A7E 		include	UDP_DataInOut.asm
00001 1A7E 		subtitle	"UDP_DataInOut.asm"

00002 1A7E 		page
00003 1A7E 	;===========================================================================================
00004 1A7E 	;
00005 1A7E 	;  FileName: UDP_DataInOut.asm
00006 1A7E 	;  Date: 6/28/05
00007 1A7E 	;  File Version: 1.0.1
00008 1A7E 	;  
00009 1A7E 	;  Author: David M. Flynn
00010 1A7E 	;  Company: Oxford V.U.E., Inc.
00011 1A7E 	;
00012 1A7E 	;============================================================================================
00013 1A7E 	; Notes:
00014 1A7E 	;
00015 1A7E 	;  This file is standard handler routines for UDP.
00016 1A7E 	;  These routines are the building blocks for UDP data handling.
00017 1A7E 	;  Used to send and modify data in one page (64KB) of SRAM.
00018 1A7E 	;
00019 1A7E 	;  Put in segment 3 after Ether.asm
00020 1A7E 	;
00021 1A7E 	;  Data Format:  (data is big endien)
00022 1A7E 	;   DataType	byte
00023 1A7E 	;   Length	word (1..1024, 0x0001..0x0400)
00024 1A7E 	;   Dest Addr	word
00025 1A7E 	;   Data Bytes	Length
00026 1A7E 	;
00027 1A7E 	;  Constants:
00028 1A7E 	;   kUDP_SRAM_Page	EQU	0x02	;SRAM_Addr2 value for receiving
00029 1A7E 	;			  Always send from page SRAM_DestAddr2
00030 1A7E 	;
00031 1A7E 	;  Ram Locations:
00032 1A7E 	;   Bank3:
00033 1A7E 	;SRAM_UDP_Tx_DT	RES	1	;Transmited data type
00034 1A7E 	;SRAM_Len	RES	1	; 2 bytes Bigendian
00035 1A7E 	;SRAM_Len_Lo	RES	1
00036 1A7E 	;SRAM_DestAddr2	RES	1	; 3 bytes Bigendian
00037 1A7E 	;SRAM_DestAddr1	RES	1
00038 1A7E 	;SRAM_DestAddr0	RES	1
00039 1A7E 	;SRAM_UDP_Rx_IP	RES	1	;Low byte of IP address
00040 1A7E 	;SRAM_UDP_Rx_DT	RES	1	;Received data type
00041 1A7E 	;SRAM_Len_Rx	RES	1	; 2 bytes Bigendian
00042 1A7E 	;SRAM_Len_Lo_Rx	RES	1
00043 1A7E 	;SRAM_DestAddr1_Rx	RES	1	; 2 bytes Bigendian
00044 1A7E 	;SRAM_DestAddr0_Rx	RES	1
00045 1A7E 	;TTFTP_Flags	RES	1
00046 1A7E 	;#Define	UDP_DataReceived	TTFTP_Flags,0
00047 1A7E 	;#Define	UDP_DataSent	TTFTP_Flags,1
00048 1A7E 	;
00049 1A7E 	;
00050 1A7E 	;============================================================================================
00051 1A7E 	; Revision History
00052 1A7E 	;
00053 1A7E 	; 1.0.1    6/28/05	Added SRAM_UDP_Rx_IP.
00054 1A7E 	; 1.0      4/24/05	Defaulted UDP_DataReceived to false in UDP_Data_Handler
00055 1A7E 	; 1.0a5    3/15/05	Changed DataType to 1 byte and made it and IP variables.
00056 1A7E 	; 1.0a4    3/13/05	Removed kUDP_SRAM_SrcPage, optimized code.
00057 1A7E 	; 1.0a3    3/9/05	Added kUDP_SRAM_SrcPage
00058 1A7E 	; 1.0a2    2/27/05	Fixed long call error.
00059 1A7E 	; 1.0a1    2/8/05	Fisrt code, copied routines from UDP_TermInOut.asm
00060 1A7E 	;
00061 1A7E 	;============================================================================================
00062 1A7E 	; Conditionals
00063 1A7E 	;
00064 1A7E 		ifndef kUDP_SRAM_Page
00066 1A7E 		endif
CastleGate.asm   "UDP_DataInOut.asm"                                     Page: 180
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

00067 1A7E 	;
00068 1A7E 	;============================================================================================
00069 1A7E 	;
00070 1A7E 	; Name	(additional stack words required) Description
00071 1A7E 	;================================================================================================
00072 1A7E 	; UDP_DataSender	Send SRAM_Len bytes at kUDP_SRAM_Page,SRAM_DestAddr1,SRAM_DestAddr0
00073 1A7E 	;	 to W:IPDATAPORT
00074 1A7E 	; UDP_Data_Handler	Handler for incoming UDP data port 87 (IPDATAPORT) data
00075 1A7E 	;
00076 1A7E 	;
00077 1A7E 	;calls outside this file
00078 1A7E 	;
00079 1A7E 	;	mCall3To1	Locate_ARP
00080 1A7E 	;	CALL	putnic_checkbyte_D18
00081 1A7E 	;	mCall3To1	UDP_Send
00082 1A7E 	;	CALL	getch_net_D18
00083 1A7E 	;	CALL	match_word_D18
00084 1A7E 	;	CALL	SRAM_ReadPI_D18
00085 1A7E 	;	CALL	SRAM_WritePI_D18
00086 1A7E 	;
00087 1A7E 	;==============================================================================
00088 1A7E 	; Setup UDP to send one page (256 bytes) from SRAM
00089 1A7E 	; Only use in segment 3
00090 1A7E 	;
00091 1A7E 	; Entry: W=IPAddress, Bank3
00092 1A7E 	; Exit: none, goto UDP_DataSender_RTN
00093 1A7E 	; RAM used:Param70, Param71, Param78, Param79, Param7A, Param7B, Param7C, FSR
00094 1A7E 	; Calls: (1+4) Locate_ARP, UDP_Send
00095 1A7E 	;
00096 1A7E      	mSendSRAM_UDPData	macro	DestPage,TheDataType
00097 1A7E      		BSF	STATUS,RP0
00098 1A7E      		BSF	STATUS,RP1	;Bank3
00099 1A7E      		MOVWF	Param78
00100 1A7E      		MOVLW	high DestPage
00101 1A7E      		MOVWF	SRAM_DestAddr2
00102 1A7E      		MOVLW	low DestPage
00103 1A7E      		MOVWF	SRAM_DestAddr1
00104 1A7E      	;
00105 1A7E      		MOVLW	TheDataType
00106 1A7E      		MOVWF	SRAM_UDP_Tx_DT
00107 1A7E      		MOVLW	0x01	;256 bytes
00108 1A7E      		MOVWF	SRAM_Len
00109 1A7E      		CLRF	SRAM_Len_Lo
00110 1A7E      		CLRF	SRAM_DestAddr0
00111 1A7E      		MOVF	Param78,W
00112 1A7E      		GOTO	UDP_DataSender
00096 1A7E 		endm
00114 1A7E 	;
00115 1A7E 	;===========================================================================================
00116 1A7E 	;===========================================================================================
00117 1A7E 	; UDP data sender
00118 1A7E 	;
00119 1A7E 	; Usually called by OnTheHalfSecond, and by some routines wanting a faster responce.
00120 1A7E 	; Send SRAM_Len bytes at kUDP_SRAM_Page,SRAM_DestAddr1,SRAM_DestAddr0.
00121 1A7E 	; 
00122 1A7E 	; Bytes sent:
00123 1A7E 	;  SRAM_UDP_Tx_DT
00124 1A7E 	;  SRAM_Len	high byte
00125 1A7E 	;  SRAM_Len_Lo
00126 1A7E 	;  SRAM_DestAddr1
00127 1A7E 	;  SRAM_DestAddr0
00128 1A7E 	;  data
00129 1A7E 	;
00130 1A7E 	; Entry: W=IP address, SRAM_Len, SRAM_Len_Lo, SRAM_DestAddr2, SRAM_DestAddr1, SRAM_DestAddr0
00131 1A7E 	; Exit: none, goto UDP_DataSender_RTN
00132 1A7E 	; RAM used:Param70, Param71, Param78, Param79, Param7A, Param7B, Param7C, FSR
00133 1A7E 	; Calls: (1+5) Locate_ARP(1+4), UDP_Send
00134 1A7E 	;
00135 1A7E 	UDP_DataSender	mBank3
00136 1A80 109C 		BCF	UDP_DataSent
00137 1A81 		mBank0
00138 1A83 00D9 		MOVWF	remip_b0
00139 1A84 	;
00140 1A84 		mCall3To1	Locate_ARP	;1+1+4
00141 1A88 	;
00142 1A88 1683 		BSF	_RP0	;bank 1
00143 1A89 3002 		MOVLW	AS_RESOLVED
00144 1A8A 0250 		SUBWF	ae_state,W
00145 1A8B 1283 		BCF	_RP0	;bank 0
00146 1A8C 		SKPZ		;skip if resolved
00147 1A8D 2C58 		GOTO	UDP_DataSender_RTN	;still pending try again later
00148 1A8E 	;
00149 1A8E 		mBank3
00150 1A90 149C 		BSF	UDP_DataSent
00151 1A91 22C9 		CALL	Std_UDP_Setup	;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
00152 1A92 01D4 		CLRF	txin
00153 1A93 	;
00154 1A93 	;Move kUDP_DataType, length and address (6 bytes) to NIC buffer
00155 1A93 	;
00156 1A93 3090 		MOVLW	low SRAM_UDP_Tx_DT
00157 1A94 0084 		MOVWF	FSR
00158 1A95 1783 		BSF	_IRP
00159 1A96 0800 		MOVF	INDF,W
00160 1A97 2093 		CALL	putnic_checkbyte_D18	;SRAM_UDP_Tx_DT
00161 1A98 0A84 		INCF	FSR,F
00162 1A99 0800 		MOVF	INDF,W
00163 1A9A 2093 		CALL	putnic_checkbyte_D18	;SRAM_Len
00164 1A9B 0A84 		INCF	FSR,F
00165 1A9C 0800 		MOVF	INDF,W
00166 1A9D 2093 		CALL	putnic_checkbyte_D18	;SRAM_Len_Lo
CastleGate.asm   "UDP_DataInOut.asm"                                     Page: 181
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

00167 1A9E 	;
00168 1A9E 0A84 		INCF	FSR,F	;skip SRAM_DestAddr2
00169 1A9F 0A84 		INCF	FSR,F
00170 1AA0 0800 		MOVF	INDF,W	;SRAM_DestAddr1
00171 1AA1 2093 		CALL	putnic_checkbyte_D18
00172 1AA2 0A84 		INCF	FSR,F
00173 1AA3 0800 		MOVF	INDF,W	;SRAM_DestAddr0
00174 1AA4 2093 		CALL	putnic_checkbyte_D18
00175 1AA5 	;
00176 1AA5 	;Move Data from SRAM to NIC Buffer
00177 1AA5 	;
00178 1AA5 		mBank3
00179 1AA7 0811 		MOVF	SRAM_Len,W
00180 1AA8 00FA 		MOVWF	Param7A
00181 1AA9 0812 		MOVF	SRAM_Len_Lo,W
00182 1AAA 00F9 		MOVWF	Param79
00183 1AAB 0813 		MOVF	SRAM_DestAddr2,W
00184 1AAC 009F 		MOVWF	SRAM_Addr2
00185 1AAD 0814 		MOVF	SRAM_DestAddr1,W
00186 1AAE 009E 		MOVWF	SRAM_Addr1
00187 1AAF 0815 		MOVF	SRAM_DestAddr0,W
00188 1AB0 009D 		MOVWF	SRAM_Addr0
00189 1AB1 	;	
00190 1AB1 210D 	UDP_DataSender_L3	CALL	SRAM_ReadPI_D18
00191 1AB2 2093 		CALL	putnic_checkbyte_D18
00192 1AB3 	;
00193 1AB3 0BF9 		DECFSZ	Param79,F
00194 1AB4 2AB1 		GOTO	UDP_DataSender_L3
00195 1AB5 	;
00196 1AB5 08FA 		MOVF	Param7A,F
00197 1AB6 		SKPNZ
00198 1AB7 2ABA 		GOTO	UDP_DataSender_1
00199 1AB8 0BFA 		DECFSZ	Param7A,F
00200 1AB9 2AB1 		GOTO	UDP_DataSender_L3
00201 1ABA 	;
00202 1ABA 	UDP_DataSender_1
00203 1ABA 	;end of data check		
00204 1ABA 		mBank3
00205 1ABC 0810 		MOVF	SRAM_UDP_Tx_DT,W
00206 1ABD 2093 		CALL	putnic_checkbyte_D18	;SRAM_UDP_DataType
00207 1ABE 	;
00208 1ABE 	; local and remote port numbers
00209 1ABE 3000 		MOVLW	high IPDATAPORT
00210 1ABF 00DB 		MOVWF	locport_b1
00211 1AC0 00DD 		MOVWF	remport_b1
00212 1AC1 3057 		MOVLW	low IPDATAPORT
00213 1AC2 00DA 		MOVWF	locport_b0
00214 1AC3 00DC 		MOVWF	remport_b0
00215 1AC4 	;
00216 1AC4 		mCall3To1	UDP_Send_E2
00217 1AC8 2C58 		GOTO	UDP_DataSender_RTN
00218 1AC9 	;
00219 1AC9 	;=====================================================================================================
00220 1AC9 	;
00221 1AC9 	Std_UDP_Setup	mBank0
00222 1ACB 01CD 		CLRF	checklo	;checkhi = checklo = 0; 
00223 1ACC 01CC 		CLRF	checkhi
00224 1ACD 1126 		BCF	checkflag	; checkflag = 0; 
00225 1ACE 01CA 		CLRF	tpxdlen
00226 1ACF 01CB 		CLRF	tpxdlen+1
00227 1AD0 	;hardware protocol
00228 1AD0 3008 		MOVLW	high PCOL_IP	;0x0800
00229 1AD1 00C8 		MOVWF	nicin.eth.pcol
00230 1AD2 3000 		MOVLW	low PCOL_IP
00231 1AD3 00C9 		MOVWF	nicin.eth.pcol+1
00232 1AD4 	;
00233 1AD4 	; setnic_addr((TXSTART*256)+sizeof(ETHERHEADER)+IPHDR_LEN+UDPHDR_LEN)
00234 1AD4 3040 		MOVLW	TXSTART
00235 1AD5 00FB 		MOVWF	Param7B
00236 1AD6 302A 		MOVLW	ETHERHEADER_LEN+IPHDR_LEN+UDPHDR_LEN
00237 1AD7 00FA 		MOVWF	Param7A
00238 1AD8 288E 		GOTO	setnic_addr_D18
00239 1AD9 	;
00240 1AD9 	;
00241 1AD9 	;========================================================================================
00242 1AD9 	; Handler for the incoming data at the UDP data port (IPDATAPORT)
00243 1AD9 	;
00244 1AD9 	; Port 87 Private data link port.
00245 1AD9 	;
00246 1AD9 	; Entry:next NIC byte to read is first byte of UDP data field
00247 1AD9 	; Exit: UDP_DataReceived is set if valid data is received
00248 1AD9 	;	SRAM_UDP_DataType, SRAM_Len, SRAM_DestAddr2, SRAM_DestAddr1, SRAM_DestAddr0
00249 1AD9 	; RAM used:
00250 1AD9 	; Calls:(1+)
00251 1AD9 	;
00252 1AD9 0859 	UDP_Data_Handler	MOVF	remip_b0,W
00253 1ADA 00F8 		MOVWF	Param78
00254 1ADB 		mBank3
00255 1ADD 101C 		BCF	UDP_DataReceived	;Default to no data
00256 1ADE 3096 		MOVLW	low SRAM_UDP_Rx_IP
00257 1ADF 0084 		MOVWF	FSR
00258 1AE0 1783 		BSF	_IRP
00259 1AE1 	;
00260 1AE1 0878 		MOVF	Param78,W	; get SRAM_UDP_Rx_IP
00261 1AE2 0080 		MOVWF	INDF
00262 1AE3 0A84 		INCF	FSR,F
00263 1AE4 	;
00264 1AE4 2089 		CALL	getch_net_D18	; get SRAM_UDP_Rx_DT
00265 1AE5 0080 		MOVWF	INDF
00266 1AE6 0A84 		INCF	FSR,F
CastleGate.asm   "UDP_DataInOut.asm"                                     Page: 182
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

00267 1AE7 2089 		CALL	getch_net_D18	; get SRAM_Len_Rx
00268 1AE8 0080 		MOVWF	INDF
00269 1AE9 0A84 		INCF	FSR,F
00270 1AEA 2089 		CALL	getch_net_D18	; get SRAM_Len_Lo_Rx
00271 1AEB 0080 		MOVWF	INDF
00272 1AEC 0A84 		INCF	FSR,F
00273 1AED 	;
00274 1AED 2089 		CALL	getch_net_D18	; get SRAM_DestAddr1_Rx
00275 1AEE 0080 		MOVWF	INDF
00276 1AEF 0A84 		INCF	FSR,F
00277 1AF0 2089 		CALL	getch_net_D18	; get SRAM_DestAddr0_Rx
00278 1AF1 0080 		MOVWF	INDF
00279 1AF2 	;
00280 1AF2 18A6 		BTFSC	atend
00281 1AF3 0008 		RETURN		; bad data, too short
00282 1AF4 	;
00283 1AF4 	; if length is 0x0000 or > 0x0400 then exit
00284 1AF4 		mBank3
00285 1AF6 		MOVFW	SRAM_Len_Rx
00286 1AF7 0419 		IORWF	SRAM_Len_Lo_Rx,W
00287 1AF8 		SKPNZ		;Length=0x0000?
00288 1AF9 2B24 		GOTO	UDP_Bank0_Rtn	; Yes
00289 1AFA 	;
00290 1AFA 3005 		MOVLW	0x05
00291 1AFB 0218 		SUBWF	SRAM_Len_Rx,W
00292 1AFC 		SKPB		;Length > 0x04FF?
00293 1AFD 2B24 		GOTO	UDP_Bank0_Rtn	; Yes
00294 1AFE 3004 		MOVLW	0x04
00295 1AFF 0218 		SUBWF	SRAM_Len_Rx,W
00296 1B00 		SKPZ		;Length < 0x0400?
00297 1B01 2B05 		GOTO	UDP_Data_Handler_1	; Yes
00298 1B02 		TSTF	SRAM_Len_Lo_Rx
00299 1B03 		SKPZ		;Length = 0x0400?
00300 1B04 2B24 		GOTO	UDP_Bank0_Rtn	; No
00301 1B05 	;
00302 1B05 	; Move SRAM_Len bytes of data into SRAM
00303 1B05 	UDP_Data_Handler_1	mBank3
00304 1B07 0818 		MOVF	SRAM_Len_Rx,W
00305 1B08 00FA 		MOVWF	Param7A
00306 1B09 0819 		MOVF	SRAM_Len_Lo_Rx,W
00307 1B0A 00F9 		MOVWF	Param79
00308 1B0B 3002 		MOVLW	kUDP_SRAM_Page
00309 1B0C 009F 		MOVWF	SRAM_Addr2
00310 1B0D 081A 		MOVF	SRAM_DestAddr1_Rx,W
00311 1B0E 009E 		MOVWF	SRAM_Addr1
00312 1B0F 081B 		MOVF	SRAM_DestAddr0_Rx,W
00313 1B10 009D 		MOVWF	SRAM_Addr0
00314 1B11 	;
00315 1B11 2089 	UDP_Data_Handler_L3	CALL	getch_net_D18	; get the next data byte
00316 1B12 18A6 		BTFSC	atend
00317 1B13 0008 		RETURN		; bad data, too short
00318 1B14 2113 		CALL	SRAM_WritePI_D18
00319 1B15 	;
00320 1B15 0BF9 		DECFSZ	Param79,F
00321 1B16 2B11 		GOTO	UDP_Data_Handler_L3
00322 1B17 	;
00323 1B17 08FA 		MOVF	Param7A,F
00324 1B18 		SKPNZ
00325 1B19 0008 		RETURN
00326 1B1A 0BFA 		DECFSZ	Param7A,F
00327 1B1B 2B11 		GOTO	UDP_Data_Handler_L3
00328 1B1C 	;
00329 1B1C 2089 		CALL	getch_net_D18
00330 1B1D 18A6 		BTFSC	atend
00331 1B1E 0008 		RETURN		; bad data, too short
00332 1B1F 		mBank3
00333 1B21 0217 		SUBWF	SRAM_UDP_Rx_DT,W
00334 1B22 		SKPNZ
00335 1B23 141C 		BSF	UDP_DataReceived	;tell the world the data has arrived
00336 1B24 	;
00337 1B24 	UDP_Bank0_Rtn	mBank0
00338 1B26 0008 		RETURN
00339 1B27 	;
00340 1B27 	;
00341 1B27 	;
00342 1B27 	;
00343 1B27 	;
00344 1B27 	;
00345 1B27 	;
00346 1B27 	;
00347 1B27 	;
00348 1B27 	;
00349 1B27 	;
00350 1B27 	;
00994 1B27 		include	DMFE_Intf.asm
00001 1B27 		subtitle	"DMFE_Intf.asm"

00002 1B27 		page
00003 1B27 	;*******************************************************************************
00004 1B27 	;
00005 1B27 	;    Filename: DMFE_Intf.asm
00006 1B27 	;    Date:11/5/2005
00007 1B27 	;    File Revision:1.0.1
00008 1B27 	;
00009 1B27 	;    Author:David M. Flynn
00010 1B27 	;    Company:Oxford V.U.E., Inc.
00011 1B27 	; 
00012 1B27 	;**********************************************************************
00013 1B27 	;
00014 1B27 	; Notes:
CastleGate.asm   "DMFE_Intf.asm"                                         Page: 183
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

00015 1B27 	;  Caution the routines called within this file return Bank3 selected.
00016 1B27 	;
00017 1B27 	;
00018 1B27 	;**********************************************************************
00019 1B27 	; Revision History
00020 1B27 	;
00021 1B27 	; 1.0.1  11/5/2005	Updated some constants
00022 1B27 	; 1.0    2/27/2005     Fixed timing and testing, first working version.
00023 1B27 	; 1.0b1  2/15/2005	Copied from HPRR Communication.ASM
00024 1B27 	;
00025 1B27 	;**********************************************************************
00026 1B27 	; Routine	Description
00027 1B27 	;=======================================================================
00028 1B27 	; DMFE_Inft_Init	Initialize
00029 1B27 	;
00030 1B27 	; OutputC	(CurSM),Y -> OBit, (CurSM),Y+1 -> high nibble=OSlot, low nibble=OBoard (3/3)
00031 1B27 	; OutputB	CurBlk -> OBit, CurBlk+1 -> high nibble=OSlot, low nibble=OBoard (3/3)
00032 1B27 	; OutputA	(CurBlk),Y -> OBit, (CurBlk),Y+1 -> high nibble=OSlot, low nibble=OBoard (3/3)
00033 1B27 	; Output	OBit=0..7F, OBoard=0..7, OSlot=0..2 (3/3)
00034 1B27 	;
00035 1B27 	; InputC	(CurSM),Y -> IBit, (CurSM),Y+1 -> high nibble=ISlot, low nibble=IBoard (3/3)
00036 1B27 	; InputB	CurBlk -> IBit, CurBlk+1 -> high nibble=ISlot, low nibble=IBoard (3/3)
00037 1B27 	; InputA	(CurBlk),Y -> IBit, (CurBlk),Y+1 -> high nibble=ISlot, low nibble=IBoard (3/3)
00038 1B27 	; Input	IBit=0..7F, IBoard=0..7, ISlot=0..2 (3/3)
00039 1B27 	;
00040 1B27 	;=======================================================================
00041 1B27 	;
00042 1B27 	;=================================================================================================
00043 1B27 	; Hardware IO routines
00044 1B27 	;
00045 1B27 	;Old Hardware (6522):
00046 1B27 	;  PB0..PB6 = Bit# 0..127 output only
00047 1B27 	;  PB7 = Data I/O
00048 1B27 	;  PA0..PA2 = Board# 0..7 output only
00049 1B27 	;  PA3 = Slot 0 Device select Active low output only
00050 1B27 	;  PA4 = Slot 1 Device select Active low output only
00051 1B27 	;  PA5 = Slot 2 Device select Active low output only
00052 1B27 	;  PA7 = R/W*  output only
00053 1B27 	;
00054 1B27 	; New Hardware (The Brain PIC16F877)
00055 1B27 	;   LDO_8..LDO_14 = Bit# 0..127 output only (J1-25..J1-31)
00056 1B27 	;   RA0 = Data I/O (J2-1)
00057 1B27 	;   RC0..RC2 = Board# 0..7 output only (J2-17..J2-19)
00058 1B27 	;   SEL12 = Slot 0 Device select Active low output only (J1-33)
00059 1B27 	;   SEL13 = Slot 1 Device select Active low output only (J1-34)
00060 1B27 	;   SEL14 = Slot 2 Device select Active low output only (J1-35)
00061 1B27 	;   LDO_15 = R/W* output only (J1-32)
00062 1B27 	;
00063 1B27 	; DMFE 16 pin connector
00064 1B27 	; 1  D0 (J1-25) LDO1-0		16  A0 (J2-17) RC0
00065 1B27 	; 2  D1 (J1-26) LDO1-1		15  A1 (J2-18) RC1
00066 1B27 	; 3  D2 (J1-27) LDO1-2		14  A2 (J2-19) RC2
00067 1B27 	; 4  D3 (J1-28) LDO1-3		13  R/W* (J1-32) LDO1-7
00068 1B27 	; 5  D4 (J1-29) LDO1-4		12  DEV* SEL12* or SEL13* or SEL14*
00069 1B27 	; 6  D5 (J1-30) LDO1-5		11  Ground
00070 1B27 	; 7  D6 (J1-31) LDO1-6		10  Ground
00071 1B27 	; 8  D7 (J2-1) RA0		9   Ground
00072 1B27 	;
00073 1B27 0000 	Slot_0_DEV_Sel	EQU	0x00
00074 1B27 0001 	Slot_1_DEV_Sel	EQU	0x01
00075 1B27 0002 	Slot_2_DEV_Sel	EQU	0x02
00076 1B27 0003 	LDO_4_Select	EQU	0x03	;D0..D6
00077 1B27 0004 	LDO_5_Select	EQU	0x04	;A0..A2
00078 1B27 	;
00079 1B27 	; New Interface Board (Double Buffered)
00080 1B27 	;  Port E bits 0..2 + Select12
00081 1B27 	;   Slot 0 DEV*
00082 1B27 	;   Slot 1 DEV*
00083 1B27 	;   Slot 2 DEV*
00084 1B27 	;   LDO 4
00085 1B27 	;   LDO 5
00086 1B27 	;
00087 1B27 	; DMFE 16 pin connector
00088 1B27 	; 1  D0  LDO4-0		16  A0 LDO5-0
00089 1B27 	; 2  D1  LDO4-1		15  A1 LDO5-1
00090 1B27 	; 3  D2  LDO4-2		14  A2 LDO5-2
00091 1B27 	; 4  D3  LDO4-3		13  R/W* LDO4-7
00092 1B27 	; 5  D4  LDO4-4		12  DEV* SEL16* or SEL17* or SEL18*
00093 1B27 	; 6  D5  LDO4-5		11  Ground
00094 1B27 	; 7  D6  LDO1-6		10  Ground
00095 1B27 	; 8  D7  Read RA1 / Write RA0 	9   Ground
00096 1B27 	;
00097 1B27 	;=================================================================================================
00098 1B27 	; Initialize
00099 1B27 	;
00100 1B27 	DMFE_Inft_Init	mBank1
00101 1B29 1005 		BCF	TRISA,0	;Data Out
00102 1B2A 1485 		BSF	TRISA,1	;Data In
00103 1B2B 1505 		BSF	TRISA,2	;Input J6-4 (Active low)
00104 1B2C 1585 		BSF	TRISA,3	;Remote Reset J6-3 (Active low)
00105 1B2D 0189 		CLRF	TRISE	; all out PSP off
00106 1B2E 1283 		BCF	_RP0	; Bank 0
00107 1B2F 0008 		RETURN
00108 1B30 	;
00109 1B30 	;
00110 1B30 		if UsesInOutC
00111 1B30 	;=================================================================================================
00112 1B30 	;
00113 1B30 	;Entry: (CurSM),Y -> OBit
00114 1B30 	;       (CurSM),Y+1 -> high nibble=OSlot, low nibble=OBoard
CastleGate.asm   "DMFE_Intf.asm"                                         Page: 184
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

00115 1B30 	;	OActive=00 or 80 (MSB only)
00116 1B30 	;Exit: 
00117 1B30 	;
00118 1B30 019F 	OutputC	CLRF	SRAM_Addr2
00119 1B31 0839 		MOVF	CurSM+1,W
00120 1B32 009E 		MOVWF	SRAM_Addr1
00121 1B33 0838 		MOVF	CurSM,W
00122 1B34 2B3D 		GOTO	OutputA_E2
00123 1B35 	;
00124 1B35 		endif
00125 1B35 	;============================================================
00126 1B35 	;Entry: CurBlk -> OBit
00127 1B35 	;       CurBlk+1 -> high nibble=OSlot, low nibble=OBoard
00128 1B35 	;	OActive=00 or 80 (MSB only)
00129 1B35 	;
00130 1B35 0833 	OutputB	MOVF	CurBlk,W
00131 1B36 00AC 		MOVWF	OBit
00132 1B37 0834 		MOVF	CurBlk+1,W
00133 1B38 2B50 		GOTO	OutputA1
00134 1B39 	;
00135 1B39 	;=================================================================================================
00136 1B39 	;Entry: (CurBlk),Y -> OBit
00137 1B39 	;       (CurBlk),Y+1 -> high nibble=OSlot, low nibble=OBoard
00138 1B39 	;	OActive=00 or 80 (MSB only)
00139 1B39 	;Exit: 
00140 1B39 	;
00141 1B39 019F 	OutputA	CLRF	SRAM_Addr2
00142 1B3A 0834 		MOVF	CurBlk+1,W
00143 1B3B 009E 		MOVWF	SRAM_Addr1
00144 1B3C 0833 		MOVF	CurBlk,W
00145 1B3D 0773 	OutputA_E2	ADDWF	YReg,W
00146 1B3E 009D 		MOVWF	SRAM_Addr0
00147 1B3F 		ADDCF	SRAM_Addr1,F
00148 1B41 		mCall3To0	SRAM_ReadPI
00149 1B46 		mBank3
00150 1B48 00AC 		MOVWF	OBit
00151 1B49 		mCall3To0	SRAM_ReadPI
00152 1B4E 		mBank3
00153 1B50 00F8 	OutputA1	MOVWF	Param78
00154 1B51 3907 		ANDLW	0x07
00155 1B52 00AE 		MOVWF	OBoard
00156 1B53 0E78 		SWAPF	Param78,W
00157 1B54 3907 		ANDLW	0x07
00158 1B55 00AB 		MOVWF	OSlot
00159 1B56 	;
00160 1B56 	; fall through to Output
00161 1B56 	;
00162 1B56 	;=====================================================================================
00163 1B56 	;OUPUT BIT
00164 1B56 	;Entry: OBit=0..7F, OBoard=0..7, OSlot=0..2
00165 1B56 	;Exit: Bank3 is selected
00166 1B56 	;	OActive=00 or 80 (MSB only)
00167 1B56 	Output	mBank1
00168 1B58 0188 		CLRF	TRISD	;output
00169 1B59 		mBank3
00170 1B5B 0D2D 		RLF	OActive,W
00171 1B5C 		mBank0
00172 1B5E 1C03 		BTFSS	_C	;Data
00173 1B5F 1005 		BCF	PORTA,0
00174 1B60 1803 		BTFSC	_C
00175 1B61 1405 		BSF	PORTA,0
00176 1B62 	;
00177 1B62 		mBank3
00178 1B64 082C 		MOVF	OBit,W	;Address 0..127
00179 1B65 397F 		ANDLW	0x7F	; R/W* = W*
00180 1B66 		mBank0
00181 1B68 0088 		MOVWF	PORTD
00182 1B69 3003 		MOVLW	LDO_4_Select
00183 1B6A 2376 		CALL	WriteSel12Data
00184 1B6B 	;
00185 1B6B 082E 		MOVF	OBoard,W
00186 1B6C 3907 		ANDLW	0x07
00187 1B6D 		mBank0
00188 1B6F 0088 		MOVWF	PORTD
00189 1B70 3004 		MOVLW	LDO_5_Select
00190 1B71 2376 		CALL	WriteSel12Data
00191 1B72 	;
00192 1B72 082B 		MOVF	OSlot,W
00193 1B73 3903 		ANDLW	0x03	;limit to 0..2
00194 1B74 		mBank0
00195 1B76 	;
00196 1B76 	; fall through to WriteSel12Data
00197 1B76 	;
00198 1B76 	;====================================================================================
00199 1B76 	; write data at port D to LDO4 or LDO5, or pulse Select16..18 (DEV0..DEV2)
00200 1B76 	;
00201 1B76 	; Entry: W=3 bit Address for port E, bank 0
00202 1B76 	; Exit: bank 3
00203 1B76 	;
00204 1B76 0089 	WriteSel12Data	MOVWF	PORTE
00205 1B77 0806 		MOVF	PORTB,W
00206 1B78 39F0 		ANDLW	AddressMask
00207 1B79 380C 		IORLW	Select12
00208 1B7A 0086 		MOVWF	PORTB
00209 1B7B 1206 		BCF	PORTB,SelectEnable
00210 1B7C 0000 		NOP
00211 1B7D 0000 		NOP
00212 1B7E 0000 		NOP
00213 1B7F 0000 		NOP
00214 1B80 0000 		NOP
CastleGate.asm   "DMFE_Intf.asm"                                         Page: 185
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

00215 1B81 1606 		BSF	PORTB,SelectEnable
00216 1B82 		mBank3
00217 1B84 0008 		RETURN
00218 1B85 	;
00219 1B85 		if UsesInOutC
00220 1B85 	;===============================================================================
00221 1B85 	;Entry: (CurSM),Y -> IBit
00222 1B85 	;       (CurSM),Y+1 -> high nibble=ISlot, low nibble=IBoard
00223 1B85 	;Exit: IActive=00 or 80 (MSB only)
00224 1B85 	;
00225 1B85 019F 	InputC	CLRF	SRAM_Addr2
00226 1B86 0839 		MOVF	CurSM+1,W
00227 1B87 009E 		MOVWF	SRAM_Addr1
00228 1B88 0838 		MOVF	CurSM,W
00229 1B89 2B92 		GOTO	InputA_E2
00230 1B8A 	;
00231 1B8A 		endif
00232 1B8A 	;==============================================================================
00233 1B8A 	;Entry: CurBlk = IBit
00234 1B8A 	;       CurBlk+1 = high nibble=ISlot, low nibble=IBoard
00235 1B8A 	;Exit: IActive=00 or 80 (MSB only)
00236 1B8A 	InputB	MOVFW	CurBlk
00237 1B8B 00B0 		MOVWF	IBit
00238 1B8C 		MOVFW	CurBlk+1
00239 1B8D 2BAC 		GOTO	InputA2
00240 1B8E 	;
00241 1B8E 	;===============================================================================
00242 1B8E 	;Entry: (CurBlk),Y -> IBit
00243 1B8E 	;       (CurBlk),Y+1 -> high nibble=ISlot, low nibble=IBoard
00244 1B8E 	;Exit: IActive=00 or 80 (MSB only)
00245 1B8E 	;
00246 1B8E 019F 	InputA	CLRF	SRAM_Addr2
00247 1B8F 0834 		MOVF	CurBlk+1,W
00248 1B90 009E 		MOVWF	SRAM_Addr1
00249 1B91 0833 		MOVF	CurBlk,W
00250 1B92 0773 	InputA_E2	ADDWF	YReg,W
00251 1B93 009D 		MOVWF	SRAM_Addr0
00252 1B94 		ADDCF	SRAM_Addr1,F
00253 1B96 		mCall3To0	SRAM_ReadPI
00254 1B9B 		mBank3
00255 1B9D 00F8 		MOVWF	Param78
00256 1B9E 3CFE 		SUBLW	0xFE
00257 1B9F 		SKPZ
00258 1BA0 2BA3 		GOTO	InputA1
00259 1BA1 01B1 		CLRF	IActive
00260 1BA2 0008 		RETURN
00261 1BA3 	;
00262 1BA3 0878 	InputA1	MOVF	Param78,W
00263 1BA4 00B0 		MOVWF	IBit
00264 1BA5 		mCall3To0	SRAM_Read
00265 1BAA 		mBank3
00266 1BAC 00F8 	InputA2	MOVWF	Param78
00267 1BAD 3907 		ANDLW	0x07
00268 1BAE 00B2 		MOVWF	IBoard
00269 1BAF 0E78 		SWAPF	Param78,W
00270 1BB0 3903 		ANDLW	0x03
00271 1BB1 00AF 		MOVWF	ISlot
00272 1BB2 	;
00273 1BB2 	; fall through to Input
00274 1BB2 	;
00275 1BB2 	;===============================================================================
00276 1BB2 	; Get input bit for ISlot,IBoard,IBit into IActive:7
00277 1BB2 	;
00278 1BB2 	; Entry: IBit=0..7F, IBoard=0..7, ISlot=0..2
00279 1BB2 	; Exit: IActive=00 or 80 (MSB only) Bank3 is selected
00280 1BB2 	;
00281 1BB2 	Input	mBank1
00282 1BB4 0188 		CLRF	TRISD	;output
00283 1BB5 	; set IBit and R/W*
00284 1BB5 		mBank3
00285 1BB7 0830 		MOVF	IBit,W	;Address 0..127
00286 1BB8 397F 		ANDLW	0x7F	; R/W* = W*
00287 1BB9 		mBank0
00288 1BBB 0088 		MOVWF	PORTD
00289 1BBC 3003 		MOVLW	LDO_4_Select	;LDO4
00290 1BBD 2376 		CALL	WriteSel12Data
00291 1BBE 	; Set IBoard
00292 1BBE 0832 		MOVF	IBoard,W
00293 1BBF 3907 		ANDLW	0x07
00294 1BC0 		mBank0
00295 1BC2 0088 		MOVWF	PORTD
00296 1BC3 3004 		MOVLW	LDO_5_Select	;LDO5
00297 1BC4 2376 		CALL	WriteSel12Data
00298 1BC5 	; Write Address
00299 1BC5 082F 		MOVF	ISlot,W
00300 1BC6 3903 		ANDLW	0x03	;limit to 0..2
00301 1BC7 		mBank0
00302 1BC9 2376 		CALL	WriteSel12Data
00303 1BCA 	; SET R/W* to Read
00304 1BCA 		mBank0
00305 1BCC 1788 		BSF	PORTD,7	; R/W* = R
00306 1BCD 3003 		MOVLW	LDO_4_Select	;LDO4
00307 1BCE 2376 		CALL	WriteSel12Data
00308 1BCF 	; Read Data	
00309 1BCF 082F 		MOVF	ISlot,W
00310 1BD0 3903 		ANDLW	0x03	;limit to 0..2
00311 1BD1 		mBank0
00312 1BD3 0089 		MOVWF	PORTE
00313 1BD4 0806 		MOVF	PORTB,W
00314 1BD5 39F0 		ANDLW	AddressMask
CastleGate.asm   "DMFE_Intf.asm"                                         Page: 186
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

00315 1BD6 380C 		IORLW	Select12
00316 1BD7 0086 		MOVWF	PORTB
00317 1BD8 1206 		BCF	PORTB,SelectEnable
00318 1BD9 0000 		NOP
00319 1BDA 0000 		NOP
00320 1BDB 0000 		NOP
00321 1BDC 0000 		NOP
00322 1BDD 0805 		MOVF	PORTA,W
00323 1BDE 1606 		BSF	PORTB,SelectEnable
00324 1BDF 		mBank3
00325 1BE1 01B1 		CLRF	IActive
00326 1BE2 3902 		ANDLW	0x02
00327 1BE3 		SKPZ
00328 1BE4 17B1 		BSF	IActive,7
00329 1BE5 0008 		RETURN
00330 1BE6 	;
00331 1BE6 	;
00332 1BE6 	;
00333 1BE6 	;
00334 1BE6 	;
00335 1BE6 	;
00995 1BE6 		include	DMFEInit.asm
00001 1BE6 		subtitle	"DMFEInit.asm"

00002 1BE6 		page
00003 1BE6 	;*******************************************************************************
00004 1BE6 	;
00005 1BE6 	;    Filename: DMFEInit.asm
00006 1BE6 	;    Date:7/11/2009
00007 1BE6 	;    File Revision:1.1
00008 1BE6 	;
00009 1BE6 	;    Author:David M. Flynn
00010 1BE6 	;    Company:Oxford V.U.E., Inc.
00011 1BE6 	;    Project: HPRR Panels
00012 1BE6 	;
00013 1BE6 	; 
00014 1BE6 	;**********************************************************************
00015 1BE6 	;
00016 1BE6 	;    Notes:
00017 1BE6 	;
00018 1BE6 	;**********************************************************************
00019 1BE6 	; Revision History
00020 1BE6 	;
00021 1BE6 	;1.1  7/11/2009	Made into standard file
00022 1BE6 	;1.0  6/25/2005	Copied from Block Power KB
00023 1BE6 	;1.0  9/6/2004	first reved Version
00024 1BE6 	;
00025 1BE6 	;===============================================================================
00026 1BE6 	; Turn off all the outputs of the current OSlot,OBoard starting w/ OBit
00027 1BE6 	;
00028 1BE6 2356 	OutsOff	CALL	Output
00029 1BE7 0AAC 		INCF	OBit,F
00030 1BE8 1FAC 		BTFSS	OBit,7	;skip if high bit = 1
00031 1BE9 2BE6 		GOTO	OutsOff	;last bit is 127 0x7F
00032 1BEA 01AC 		CLRF	OBit
00033 1BEB 0008 		RETURN
00034 1BEC 	;
00035 1BEC 	;===============================================================================
00036 1BEC 	; Entry: none
00037 1BEC 	; Exit: none, Bank0 is selected
00038 1BEC 	;
00039 1BEC 	; turn off all outputs
00040 1BEC 2327 	SetupDMFEIO	Call	DMFE_Inft_Init
00041 1BED 		if UsesBlockModules
00042 1BED 		LCALL	AllOutsOff	;All bolck module outputs
00043 1BF1 		endif
00044 1BF1 		mBank3
00045 1BF3 	;
00046 1BF3 3000 		MOVLW	0x00
00047 1BF4 00AC 		MOVWF	OBit
00048 1BF5 00AD 		MOVWF	OActive
00049 1BF6 3004 		MOVLW	kFirstOB	;Start with BD1
00050 1BF7 00AE 		MOVWF	OBoard
00051 1BF8 3000 		MOVLW	0x00	;Start with Slot0
00052 1BF9 00AB 		MOVWF	OSlot
00053 1BFA 23E6 	RLoop1	CALL	OutsOff
00054 1BFB 082E 		MOVF	OBoard,W
00055 1BFC 3C04 		SUBLW	kLastOB	;End with BD1
00056 1BFD 1903 		BTFSC	_Z
00057 1BFE 2C01 		GOTO	OutsOff_End
00058 1BFF 0AAE 		INCF	OBoard,F
00059 1C00 2BFA 		GOTO	RLoop1
00060 1C01 	;
00061 1C01 	OutsOff_End
00062 1C01 	;
00063 1C01 	;	
00064 1C01 01F2 		CLRF	XReg
00065 1C02 3000 	RLoop2	MOVLW	0x00
00066 1C03 		LCALL	SetSMTableX
00067 1C08 		LCALL	SetSMTableHighX
00068 1C0D 3000 		MOVLW	0x00
00069 1C0E 		LCALL	SetBlockPwrTableX
00070 1C13 		LCALL	SetBlockPwrTable2X
00071 1C18 0BF2 		DECFSZ	XReg,F
00072 1C19 2C02 		GOTO	RLoop2
00073 1C1A 	;
00074 1C1A 	;We don't need to send the block Commands either
00075 1C1A 01F2 		CLRF	XReg
00076 1C1B 3000 	RLoop3	MOVLW	0x00
00077 1C1C 		LCALL	SetBlockCmdTableX
CastleGate.asm   "DMFEInit.asm"                                          Page: 187
/HPRR Electrical Dept/HPRR.ASM/MasterFiles/

00078 1C21 		LCALL	SetBlockCmdTable2X
00079 1C26 0AF2 		INCF	XReg,F
00080 1C27 1F72 		BTFSS	XReg,6
00081 1C28 2C1B 		GOTO	RLoop3
00082 1C29 	;
00083 1C29 		if HasBlockDetectors
00084 1C29 	;===========================================================================================
00085 1C29 	;Setup block scanner
00086 1C29 01C5 		CLRF	ScannerBlkNum
00087 1C2A 3019 		MOVLW	low BlkPwrRDY1
00088 1C2B 00BC 		MOVWF	BlockPwrTblPtr
00089 1C2C 3001 		MOVLW	high BlkPwrRDY1
00090 1C2D 3E10 		ADDLW	low evDataROM
00091 1C2E 00BD 		MOVWF	BlockPwrTblPtr+1
00092 1C2F 	;
00093 1C2F 		endif
00094 1C2F 	;
00095 1C2F 3046 		MOVLW	low MLSM1
00096 1C30 00B5 		MOVWF	SMDispPtr
00097 1C31 300B 		MOVLW	high MLSM1
00098 1C32 3E10 		ADDLW	low evDataROM
00099 1C33 00B6 		MOVWF	SMDispPtr+1
00100 1C34 	;
00101 1C34 		if CabCount>0
00102 1C34 144F 		BSF	kDefaultCMF,CabEastFB
00103 1C35 17CF 		BSF	kDefaultCMF,CabSelectedFB
00104 1C36 3006 		MOVLW	kDefaultCab
00105 1C37 00C9 		MOVWF	LastCabVal
00106 1C38 		endif
00107 1C38 	;
00108 1C38 		if UsesDisableUHSelector
00133 1C38 		endif
00134 1C38 0008 		RETURN
00135 1C39 	;
00136 1C39 	;===========================================================================
00137 1C39 	;
00138 1C39 	;
00139 1C39 	HPRROnTheHalf	mBank3
00140 1C3B 	;
00141 1C3B 		if HasBlockDetectors
00142 1C3B 26AD 		CALL	ReadBlkDet
00143 1C3C 		endif
00144 1C3C 	;
00145 1C3C 	; Flash power on LED
00146 1C3C 3001 		MOVLW	WDLED_Mask
00147 1C3D 06D2 		XORWF	DispFlags,F
00148 1C3E 01AD 		CLRF	OActive
00149 1C3F 1852 		BTFSC	WDLED_Flag
00150 1C40 17AD 		BSF	OActive,7
00151 1C41 301C 		MOVLW	low WatchDogLED
00152 1C42 00B3 		MOVWF	CurBlk
00153 1C43 3004 		MOVLW	high WatchDogLED
00154 1C44 00B4 		MOVWF	CurBlk+1
00155 1C45 2335 		CALL	OutputB
00156 1C46 	;
00157 1C46 08A9 		MOVF	UDPTimer,F
00158 1C47 		SKPZ
00159 1C48 03A9 		DECF	UDPTimer,F
00160 1C49 	;
00161 1C49 		if Has_OB_OccLEDs
00163 1C49 		endif
00164 1C49 	;
00165 1C49 		if UsesVistaSelect
00169 1C49 		endif
00170 1C49 118A 		BCF	PCLATH,3
00171 1C4A 2905 		GOTO	HPRROnTheHalf_RTN
00172 1C4B 	;
00173 1C4B 	;=============================================================================
00174 1C4B 	;
00175 1C4B 	Do_UDP_DataXmit	mBank3
00176 1C4D 08A9 		MOVF	UDPTimer,F
00177 1C4E 		SKPZ
00178 1C4F 2C58 		GOTO	UDP_DataXmit
00179 1C50 3010 		MOVLW	kUDPTime
00180 1C51 00A9 		MOVWF	UDPTimer
00181 1C52 	;
00182 1C52 15DA 		BSF	SMTableLowChngFlag
00183 1C53 16DA 		BSF	BlockCmdChngFlag
00184 1C54 175A 		BSF	BlockCmdChngFlag2
00185 1C55 165A 		BSF	SMTableHiChngFlag
00186 1C56 		if HasBlockDetectors
00187 1C56 145B 		BSF	BlockDataChngFlag
00188 1C57 14DB 		BSF	BlockDataChngFlag2
00189 1C58 		endif
00190 1C58 	;
00191 1C58 	UDP_DataXmit
00192 1C58 	UDP_DataSender_RTN	mBank3
00193 1C5A 1DDA 		BTFSS	SMTableLowChngFlag
00194 1C5B 2C6D 		GOTO	UDP_DataXmit_1
00195 1C5C 	;
00196 1C5C 11DA 		BCF	SMTableLowChngFlag
00197 1C5D 307F 		MOVLW	UDP_RxIP_MP
00198 1C5E 		mSendSRAM_UDPData	SMTable,kUDP_DataType_LoSM
00199 1C6D 	;
00200 1C6D 1E5A 	UDP_DataXmit_1	BTFSS	SMTableHiChngFlag
00201 1C6E 2C80 		GOTO	UDP_DataXmit_2
00202 1C6F 	;
00203 1C6F 125A 		BCF	SMTableHiChngFlag
00204 1C70 307F 		MOVLW	UDP_RxIP_MP
00205 1C71 		mSendSRAM_UDPData	SMTableHigh,kUDP_DataType_HiSM	
CastleGate.asm   "DMFEInit.asm"                                          Page: 188
/HPRR Electrical Dept/HPRR.ASM/MasterFiles/

00206 1C80 	;
00207 1C80 1EDA 	UDP_DataXmit_2	BTFSS	BlockCmdChngFlag
00208 1C81 2C93 		GOTO	UDP_DataXmit_3
00209 1C82 	;
00210 1C82 12DA 		BCF	BlockCmdChngFlag
00211 1C83 307F 		MOVLW	UDP_RxIP_MP
00212 1C84 		mSendSRAM_UDPData	BlockCmdTable,kUDP_DataType_BlkCmd
00213 1C93 	;
00214 1C93 1F5A 	UDP_DataXmit_3	BTFSS	BlockCmdChngFlag2
00215 1C94 2CA6 		GOTO	UDP_DataXmit_4
00216 1C95 	;
00217 1C95 135A 		BCF	BlockCmdChngFlag2
00218 1C96 307F 		MOVLW	UDP_RxIP_MP
00219 1C97 		mSendSRAM_UDPData	BlockCmdTable2,kUDP_DataType_BlkCmd2
00220 1CA6 	;
00221 1CA6 1C5B 	UDP_DataXmit_4	BTFSS	BlockDataChngFlag
00222 1CA7 2CB9 		GOTO	UDP_DataXmit_5
00223 1CA8 	;
00224 1CA8 105B 		BCF	BlockDataChngFlag
00225 1CA9 307F 		MOVLW	UDP_RxIP_MP
00226 1CAA 		mSendSRAM_UDPData	BlockPwrTable,kUDP_DataType_BkPwr
00227 1CB9 	;
00228 1CB9 1CDB 	UDP_DataXmit_5	BTFSS	BlockDataChngFlag2
00229 1CBA 2CCC 		GOTO	UDP_DataXmit_6
00230 1CBB 	;
00231 1CBB 10DB 		BCF	BlockDataChngFlag2
00232 1CBC 307F 		MOVLW	UDP_RxIP_MP
00233 1CBD 		mSendSRAM_UDPData	BlockPwrTable2,kUDP_DataType_BkPwr2
00234 1CCC 	;
00235 1CCC 	UDP_DataXmit_6
00236 1CCC 	;
00237 1CCC 118A 		BCF	PCLATH,3
00238 1CCD 28E7 		GOTO	Do_UDP_DataXmit_Rtn
00239 1CCE 	;
00240 1CCE 	;
00241 1CCE 		if CabCount>0
00242 1CCE 	;===============================================================================================
00243 1CCE 	; Read the 1 cab button store in Param73:Param74
00244 1CCE 00B3 	ReadCabBtn	MOVWF	CurBlk
00245 1CCF 238A 		CALL	InputB
00246 1CD0 0D31 		RLF	IActive,W
00247 1CD1 0DF3 		RLF	Param73,F
00248 1CD2 0DF4 		RLF	Param74,F
00249 1CD3 1BB1 		BTFSC	IActive,7
00250 1CD4 0AF5 		INCF	Param75,F
00251 1CD5 0008 		RETURN
00252 1CD6 	;
00253 1CD6 	;===============================================================================================
00254 1CD6 	; Read the cab select buttons
00255 1CD6 	;
00256 1CD6 01F3 	ScanCabBtns	CLRF	Param73	;Cab Btns
00257 1CD7 01F4 		CLRF	Param74	; Cab Btns MSb
00258 1CD8 01F5 		CLRF	Param75	;# of Btns down
00259 1CD9 3000 		MOVLW	ButtonIBoard
00260 1CDA 00B4 		MOVWF	CurBlk+1
00261 1CDB 	;
00262 1CDB 3010 		MOVLW	Cab1Btn
00263 1CDC 24CE 		CALL	ReadCabBtn
00264 1CDD 3011 		MOVLW	Cab2Btn
00265 1CDE 24CE 		CALL	ReadCabBtn
00266 1CDF 3012 		MOVLW	Cab3Btn
00267 1CE0 24CE 		CALL	ReadCabBtn
00268 1CE1 3013 		MOVLW	Cab4Btn
00269 1CE2 24CE 		CALL	ReadCabBtn
00270 1CE3 3014 		MOVLW	Cab5Btn
00271 1CE4 24CE 		CALL	ReadCabBtn
00272 1CE5 3015 		MOVLW	Cab6Btn
00273 1CE6 24CE 		CALL	ReadCabBtn
00274 1CE7 	;
00275 1CE7 		if CabCount>6
00282 1CE7 		else
00283 1CE7 0DF3 		RLF	Param73,F	;Cab 7
00284 1CE8 0DF4 		RLF	Param74,F
00285 1CE9 0DF3 		RLF	Param73,F	;Cab 8
00286 1CEA 0DF4 		RLF	Param74,F
00287 1CEB 0DF3 		RLF	Param73,F	;Cab 9
00288 1CEC 0DF4 		RLF	Param74,F	
00289 1CED 		endif
00290 1CED 	;	
00291 1CED 	; Param[5-0] = Cab1-Cab9 Btn
00292 1CED 08F5 		MOVF	Param75,F	;# of Btns
00293 1CEE 		SKPNZ		;> 0 Btns Down?
00294 1CEF 2D50 		GOTO	ClearCabBtnDBFlag	; No
00295 1CF0 3002 		MOVLW	0x02
00296 1CF1 0275 		SUBWF	Param75,W
00297 1CF2 		SKPNZ		;Buttons pressed = 2?
00298 1CF3 14D2 		BSF	TestModeFlag	; Yes
00299 1CF4 1952 		BTFSC	CabBtnDB_Flag	;Is Debounced?
00300 1CF5 2D1B 		GOTO	LightEW_LEDs	; No
00301 1CF6 	;
00302 1CF6 10D2 		BCF	TestModeFlag
00303 1CF7 2604 		CALL	LongClick
00304 1CF8 1552 		BSF	CabBtnDB_Flag
00305 1CF9 3006 		MOVLW	kLastCab	;Cab Count
00306 1CFA 00FA 		MOVWF	Param7A
00307 1CFB 3001 		MOVLW	0x01
00308 1CFC 00F5 		MOVWF	Param75	;Cab # 1
00309 1CFD 30CA 		MOVLW	low Cab1ModeFlags
00310 1CFE 0084 		MOVWF	FSR
00311 1CFF 1783 		BSF	_IRP
CastleGate.asm   "DMFEInit.asm"                                          Page: 189
/HPRR Electrical Dept/HPRR.ASM/MasterFiles/

00312 1D00 	;
00313 1D00 1C74 	ScanCabBtns_L2	BTFSS	Param74,0	;This Cab?
00314 1D01 2D14 		GOTO	ScanCabBtns_1	; No
00315 1D02 	;
00316 1D02 0875 		MOVF	Param75,W
00317 1D03 00C9 		MOVWF	LastCabVal
00318 1D04 1F80 		BTFSS	INDF,CabSelectedFB	;This cab already selected?
00319 1D05 2D0E 		GOTO	ScanCabBtns_C_Sel	; No
00320 1D06 3003 		MOVLW	0x03
00321 1D07 0680 		XORWF	INDF,F	;Flip E/W/Off
00322 1D08 1C00 		BTFSS	INDF,CabEastFB
00323 1D09 2D15 		GOTO	ScanCabBtns_Next
00324 1D0A 1000 		BCF	INDF,CabEastFB
00325 1D0B 1380 		BCF	INDF,CabSelectedFB	;Deselect this cab
00326 1D0C 01C9 		CLRF	LastCabVal
00327 1D0D 2D15 		GOTO	ScanCabBtns_Next
00328 1D0E 	;
00329 1D0E 3003 	ScanCabBtns_C_Sel	MOVLW	0x03
00330 1D0F 0500 		ANDWF	INDF,W
00331 1D10 		SKPNZ		;Not (E or W)?
00332 1D11 1400 		BSF	INDF,CabEastFB	; No, set east (C1East)
00333 1D12 1780 		BSF	INDF,CabSelectedFB	;Select this cab
00334 1D13 2D15 		GOTO	ScanCabBtns_Next
00335 1D14 	;
00336 1D14 1380 	ScanCabBtns_1	BCF	INDF,CabSelectedFB	;Deselect this cab
00337 1D15 0A84 	ScanCabBtns_Next	INCF	FSR,F
00338 1D16 0DF3 		RLF	Param73,F	;Input bits
00339 1D17 0DF4 		RLF	Param74,F	; MSb
00340 1D18 0AF5 		INCF	Param75,F	;Cab #
00341 1D19 0BFA 		DECFSZ	Param7A,F	;Cab Counter
00342 1D1A 2D00 		GOTO	ScanCabBtns_L2
00343 1D1B 	;
00344 1D1B 	;
00345 1D1B 	;------------------------------------
00346 1D1B 	;
00347 1D1B 3000 	LightEW_LEDs	MOVLW	high Cab1EastLED
00348 1D1C 3E10 		ADDLW	low evDataROM
00349 1D1D 00B4 		MOVWF	CurBlk+1
00350 1D1E 01FA 		CLRF	Param7A	;first cab
00351 1D1F 30B4 		MOVLW	low Cab1EastLED
00352 1D20 00B3 		MOVWF	CurBlk
00353 1D21 01F3 		CLRF	YReg
00354 1D22 	;
00355 1D22 30CA 		MOVLW	low Cab1ModeFlags
00356 1D23 0084 		MOVWF	FSR
00357 1D24 1783 		BSF	_IRP
00358 1D25 	;
00359 1D25 01F8 	LightEW_LEDs_L1	CLRF	Param78
00360 1D26 1800 		BTFSC	INDF,CabEastFB	;current cab east
00361 1D27 17F8 		BSF	Param78,7
00362 1D28 1F80 		BTFSS	INDF,CabSelectedFB	;Cab is Active
00363 1D29 2D32 		GOTO	LightEW_LEDs_1	; No
00364 1D2A 1FF8 		BTFSS	Param78,7
00365 1D2B 2D32 		GOTO	LightEW_LEDs_1
00366 1D2C 		mBank0
00367 1D2E 1DA1 		BTFSS	tickcount,3	;10/20th seconds
00368 1D2F 13F8 		BCF	Param78,7
00369 1D30 		mBank3
00370 1D32 0878 	LightEW_LEDs_1	MOVF	Param78,W
00371 1D33 00AD 		MOVWF	OActive
00372 1D34 2339 		CALL	OutputA
00373 1D35 0AF3 		INCF	YReg,F	;Next LED
00374 1D36 0AF3 		INCF	YReg,F
00375 1D37 	;
00376 1D37 01F8 		CLRF	Param78
00377 1D38 1880 		BTFSC	INDF,CabWestFB
00378 1D39 17F8 		BSF	Param78,7
00379 1D3A 1F80 		BTFSS	INDF,CabSelectedFB	;Cab is Active
00380 1D3B 2D44 		GOTO	LightEW_LEDs_2	; No
00381 1D3C 1FF8 		BTFSS	Param78,7
00382 1D3D 2D44 		GOTO	LightEW_LEDs_2
00383 1D3E 		mBank0
00384 1D40 1DA1 		BTFSS	tickcount,3	;10/20th seconds
00385 1D41 13F8 		BCF	Param78,7
00386 1D42 		mBank3
00387 1D44 0878 	LightEW_LEDs_2	MOVF	Param78,W
00388 1D45 00AD 		MOVWF	OActive
00389 1D46 2339 		CALL	OutputA
00390 1D47 0AF3 		INCF	YReg,F	;Next LED
00391 1D48 0AF3 		INCF	YReg,F
00392 1D49 0A84 		INCF	FSR,F	;Next cab's flags
00393 1D4A 087A 		MOVF	Param7A,W
00394 1D4B 0AFA 		INCF	Param7A,F
00395 1D4C 3C05 		SUBLW	kLastCab-1	;last cab (0..n)
00396 1D4D 		SKPZ
00397 1D4E 2D25 		GOTO	LightEW_LEDs_L1
00398 1D4F 0008 		RETURN
00399 1D50 	;
00400 1D50 	;
00401 1D50 	;
00402 1D50 1152 	ClearCabBtnDBFlag	BCF	CabBtnDB_Flag
00403 1D51 2D1B 		GOTO	LightEW_LEDs
00404 1D52 	;
00405 1D52 		endif
00406 1D52 	;=========================================================================================
00407 1D52 		if UsesSeg0DataAccess
00408 1D52 	GetCurBlkY_D18	mCall3To0	GetCurBlkY
00409 1D57 0008 		RETURN
00410 1D58 		else
00413 1D58 		endif
CastleGate.asm   "DMFEInit.asm"                                          Page: 190
/HPRR Electrical Dept/HPRR.ASM/MasterFiles/

00414 1D58 		if CabCount>0
00415 1D58 	;==============================================================================================
00416 1D58 	; Translate a throttle # to my cab #
00417 1D58 	;
00418 1D58 	; Entry: Param78=Thr#
00419 1D58 	; Exit: Param78=Cab#
00420 1D58 	; RAM used: Param78, Param79
00421 1D58 	;
00422 1D58 3006 	XlateThrToCab	MOVLW	0x06
00423 1D59 0278 		SUBWF	Param78,W
00424 1D5A 		SKPNB		;>=6?
00425 1D5B 0008 		RETURN		; No
00426 1D5C 	;
00427 1D5C 0878 		MOVF	Param78,W	;Throttle # 1..9
00428 1D5D 00F9 		MOVWF	Param79
00429 1D5E 	;
00430 1D5E 2584 		CALL	Cab6ToThrottle
00431 1D5F 0279 		SUBWF	Param79,W
00432 1D60 3006 		MOVLW	0x06
00433 1D61 		SKPNZ		;Cab 6?
00434 1D62 2D72 		GOTO	XlateThrToCab_End
00435 1D63 	;
00436 1D63 2588 		CALL	Cab7ToThrottle
00437 1D64 0279 		SUBWF	Param79,W
00438 1D65 3007 		MOVLW	0x07
00439 1D66 		SKPNZ		;Cab 7?
00440 1D67 2D72 		GOTO	XlateThrToCab_End
00441 1D68 	;
00442 1D68 258C 		CALL	Cab8ToThrottle
00443 1D69 0279 		SUBWF	Param79,W
00444 1D6A 3008 		MOVLW	0x08
00445 1D6B 		SKPNZ		;Cab 8?
00446 1D6C 2D72 		GOTO	XlateThrToCab_End
00447 1D6D 	;
00448 1D6D 2590 		CALL	Cab9ToThrottle
00449 1D6E 0279 		SUBWF	Param79,W
00450 1D6F 3009 		MOVLW	0x09
00451 1D70 		SKPNZ		;Cab 9?
00452 1D71 2D72 		GOTO	XlateThrToCab_End
00453 1D72 	;	
00454 1D72 00F8 	XlateThrToCab_End	MOVWF	Param78
00455 1D73 0008 		RETURN
00456 1D74 	;
00457 1D74 	;==============================================================================================
00458 1D74 	; Translate my cab number to a throttle#
00459 1D74 	; Entry: Param78=Cab#, XReg=Block#
00460 1D74 	; Exit: Param78=Thr#
00461 1D74 	;
00462 1D74 3006 	XlateCabToThr	MOVLW	0x06
00463 1D75 0278 		SUBWF	Param78,W
00464 1D76 		SKPNB		;>=6?
00465 1D77 0008 		RETURN		; No
00466 1D78 	;
00467 1D78 3009 		MOVLW	0x09
00468 1D79 0278 		SUBWF	Param78,W
00469 1D7A 		SKPNZ		;Cab 9?
00470 1D7B 2D90 		GOTO	Cab9ToThrottle	; Yes
00471 1D7C 	;
00472 1D7C 3008 		MOVLW	0x08
00473 1D7D 0278 		SUBWF	Param78,W
00474 1D7E 		SKPNZ
00475 1D7F 2D8C 		GOTO	Cab8ToThrottle
00476 1D80 	;
00477 1D80 3007 		MOVLW	0x07
00478 1D81 0278 		SUBWF	Param78,W
00479 1D82 		SKPNZ		;Cab 7?
00480 1D83 2D88 		GOTO	Cab7ToThrottle	; Yes
00481 1D84 	;			  No, must be 6
00482 1D84 3008 	Cab6ToThrottle	MOVLW	High BlkCab6ToThr
00483 1D85 009E 		MOVWF	SRAM_Addr1
00484 1D86 30CE 		MOVLW	low BlkCab6ToThr
00485 1D87 2D93 		GOTO	CabToThrottle
00486 1D88 	;
00487 1D88 3009 	Cab7ToThrottle	MOVLW	High BlkCab7ToThr
00488 1D89 009E 		MOVWF	SRAM_Addr1
00489 1D8A 301D 		MOVLW	low BlkCab7ToThr
00490 1D8B 2D93 		GOTO	CabToThrottle
00491 1D8C 	;
00492 1D8C 3009 	Cab8ToThrottle	MOVLW	High BlkCab8ToThr
00493 1D8D 009E 		MOVWF	SRAM_Addr1
00494 1D8E 306C 		MOVLW	low BlkCab8ToThr
00495 1D8F 2D93 		GOTO	CabToThrottle
00496 1D90 	;
00497 1D90 3009 	Cab9ToThrottle	MOVLW	High BlkCab9ToThr
00498 1D91 009E 		MOVWF	SRAM_Addr1
00499 1D92 30BB 		MOVLW	low BlkCab9ToThr
00500 1D93 	;
00501 1D93 0772 	CabToThrottle	ADDWF	XReg,W	;BlkNum
00502 1D94 009D 		MOVWF	SRAM_Addr0
00503 1D95 		ADDCF	SRAM_Addr1,F
00504 1D97 3010 		MOVLW	low evDataROM
00505 1D98 079E 		ADDWF	SRAM_Addr1,F
00506 1D99 		if GetCurBlkY_D18
00507 1D99 		mCall3To0	GetGet_Read
00508 1D9E 		else
00510 1D9E 		endif
00511 1D9E 0008 		RETURN
00512 1D9F 	;
00513 1D9F 	;===================================================================
00514 1D9F 	; Entry: BPTemp
CastleGate.asm   "DMFEInit.asm"                                          Page: 191
/HPRR Electrical Dept/HPRR.ASM/MasterFiles/

00515 1D9F 	; Exit: Param78=Thr#
00516 1D9F 01F8 	RlyBitsToThr	CLRF	Param78
00517 1DA0 	;
00518 1DA0 3001 		MOVLW	0x01
00519 1DA1 1A40 		BTFSC	BPTemp,4
00520 1DA2 00F8 		MOVWF	Param78
00521 1DA3 	;
00522 1DA3 3002 		MOVLW	0x02
00523 1DA4 19C0 		BTFSC	BPTemp,3
00524 1DA5 00F8 		MOVWF	Param78
00525 1DA6 	;
00526 1DA6 3003 		MOVLW	0x03
00527 1DA7 1940 		BTFSC	BPTemp,2
00528 1DA8 00F8 		MOVWF	Param78
00529 1DA9 	;
00530 1DA9 3004 		MOVLW	0x04
00531 1DAA 18C0 		BTFSC	BPTemp,1
00532 1DAB 00F8 		MOVWF	Param78
00533 1DAC 	;
00534 1DAC 3005 		MOVLW	0x05
00535 1DAD 1840 		BTFSC	BPTemp,0
00536 1DAE 00F8 		MOVWF	Param78
00537 1DAF 	;
00538 1DAF 3006 		MOVLW	0x06
00539 1DB0 19C1 		BTFSC	BPTemp+1,3
00540 1DB1 00F8 		MOVWF	Param78
00541 1DB2 	;
00542 1DB2 3007 		MOVLW	0x07
00543 1DB3 1941 		BTFSC	BPTemp+1,2
00544 1DB4 00F8 		MOVWF	Param78
00545 1DB5 	;
00546 1DB5 3008 		MOVLW	0x08
00547 1DB6 18C1 		BTFSC	BPTemp+1,1
00548 1DB7 00F8 		MOVWF	Param78
00549 1DB8 	;
00550 1DB8 3009 		MOVLW	0x09
00551 1DB9 1841 		BTFSC	BPTemp+1,0
00552 1DBA 00F8 		MOVWF	Param78
00553 1DBB 	;
00554 1DBB 0008 		RETURN
00555 1DBC 	;=======================================================================
00556 1DBC 	; Translate a throttle number to block power relay bit pattern
00557 1DBC 	;
00558 1DBC 	; Entry: Param78=Thr#
00559 1DBC 	; Exit: BPTemp2=Block Pwr Data
00560 1DBC 	;
00561 1DBC 3080 	ThrToRlyBits	MOVLW	0x80	;Default to any cab Selected
00562 1DBD 03F8 		DECF	Param78,F
00563 1DBE 		SKPNZ
00564 1DBF 3090 		MOVLW	0x90	;Cab 1, Selected+Cab1
00565 1DC0 	;
00566 1DC0 03F8 		DECF	Param78,F
00567 1DC1 		SKPNZ
00568 1DC2 3088 		MOVLW	0x88	;Cab 2, Selected+Cab2
00569 1DC3 	;
00570 1DC3 03F8 		DECF	Param78,F
00571 1DC4 		SKPNZ
00572 1DC5 3084 		MOVLW	0x84	;Cab 3, Selected+Cab3
00573 1DC6 	;
00574 1DC6 03F8 		DECF	Param78,F
00575 1DC7 		SKPNZ
00576 1DC8 3082 		MOVLW	0x82	;Cab 4, Selected+Cab4
00577 1DC9 	;
00578 1DC9 03F8 		DECF	Param78,F
00579 1DCA 		SKPNZ
00580 1DCB 3081 		MOVLW	0x81	;Cab 5, Selected+Cab5
00581 1DCC 00C2 		MOVWF	BPTemp2	;BlockCmdTable
00582 1DCD 	;
00583 1DCD 3080 		MOVLW	0x80	;Default to any cab Selected
00584 1DCE 03F8 		DECF	Param78,F
00585 1DCF 		SKPNZ
00586 1DD0 3088 		MOVLW	0x88	;Cab 6, Selected+AT and Selected+CT
00587 1DD1 	;
00588 1DD1 03F8 		DECF	Param78,F
00589 1DD2 		SKPNZ
00590 1DD3 3084 		MOVLW	0x84	;Cab 7, VY, Selected+BT and Selected+DT
00591 1DD4 	;
00592 1DD4 03F8 		DECF	Param78,F
00593 1DD5 		SKPNZ
00594 1DD6 3082 		MOVLW	0x82	;Cab 8, WY, HI
00595 1DD7 	;
00596 1DD7 03F8 		DECF	Param78,F
00597 1DD8 		SKPNZ
00598 1DD9 3081 		MOVLW	0x81	;Cab 9, GY
00599 1DDA 00C3 		MOVWF	BPTemp2+1	;BlockCmdTable2
00600 1DDB 0008 		RETURN
00601 1DDC 	;
00602 1DDC 		endif
00603 1DDC 		if UsesBlockModules
00604 1DDC 	;===========================================================================================
00605 1DDC 	; Entry: OActive:7, W=Bit Number, Bank3
00606 1DDC 	; Exit: Bank3
00607 1DDC 	; RAM used:
00608 1DDC 	; Calls: () StoreBlkModBits
00609 1DDC 	;
00610 1DDC 1FAD 	SetBlockModuleLED	BTFSS	OActive,7
00611 1DDD 2DEF 		GOTO	DoLEDOff
00612 1DDE 	;
00613 1DDE 300C 		MOVLW	0x0C	;Top Left  0x0C
00614 1DDF 0278 		SUBWF	Param78,W
CastleGate.asm   "DMFEInit.asm"                                          Page: 192
/HPRR Electrical Dept/HPRR.ASM/MasterFiles/

00615 1DE0 		SKPNZ
00616 1DE1 1660 		BSF	BlkModBits1,4
00617 1DE2 300A 		MOVLW	0x0A	;Bot Left  0x0A
00618 1DE3 0278 		SUBWF	Param78,W
00619 1DE4 		SKPNZ
00620 1DE5 1560 		BSF	BlkModBits1,2
00621 1DE6 3000 		MOVLW	0x00	;Top Right 0x00
00622 1DE7 0278 		SUBWF	Param78,W
00623 1DE8 		SKPNZ
00624 1DE9 145F 		BSF	BlkModBits0,0
00625 1DEA 3002 		MOVLW	0x02	;Bot Right 0x02
00626 1DEB 0278 		SUBWF	Param78,W
00627 1DEC 		SKPNZ
00628 1DED 155F 		BSF	BlkModBits0,2
00629 1DEE 2DFF 		GOTO	SetBlockModuleLED_1
00630 1DEF 	;
00631 1DEF 300C 	DoLEDOff	MOVLW	0x0C	;Top Left  0x0C
00632 1DF0 0278 		SUBWF	Param78,W
00633 1DF1 		SKPNZ
00634 1DF2 1260 		BCF	BlkModBits1,4
00635 1DF3 300A 		MOVLW	0x0A	;Bot Left  0x0A
00636 1DF4 0278 		SUBWF	Param78,W
00637 1DF5 		SKPNZ
00638 1DF6 1160 		BCF	BlkModBits1,2
00639 1DF7 3000 		MOVLW	0x00	;Top Right 0x00
00640 1DF8 0278 		SUBWF	Param78,W
00641 1DF9 		SKPNZ
00642 1DFA 105F 		BCF	BlkModBits0,0
00643 1DFB 3002 		MOVLW	0x02	;Bot Right 0x02
00644 1DFC 0278 		SUBWF	Param78,W
00645 1DFD 		SKPNZ
00646 1DFE 115F 		BCF	BlkModBits0,2
00647 1DFF 	SetBlockModuleLED_1	mCall3To2	StoreBlkModBits
00648 1E03 0008 		RETURN
00649 1E04 	;
00650 1E04 		endif
00651 1E04 	;
00652 1E04 		if UsesSpeaker
00653 1E04 	;===================================================================================================
00654 1E04 	;
00655 1E04 3002 	LongClick	MOVLW	0x02
00656 1E05 2E09 		GOTO	Beep_E2
00657 1E06 3001 	CLICK	MOVLW	0x01
00658 1E07 2E09 		GOTO	Beep_E2
00659 1E08 	;
00660 1E08 3020 	Beep	MOVLW	kBeepTime
00661 1E09 1953 	Beep_E2	BTFSC	BeepOn	;Beep in progress?
00662 1E0A 0008 		RETURN		; Yes
00663 1E0B 00AA 		MOVWF	BeepTimer
00664 1E0C 1553 		BSF	BeepOn
00665 1E0D 301D 		MOVLW	low SPKR	;#<SPKR or / =Low byte
00666 1E0E 00B3 		MOVWF	CurBlk
00667 1E0F 3004 		MOVLW	high SPKR	;#>SPKR or mod =Hi byte
00668 1E10 00B4 		MOVWF	CurBlk+1
00669 1E11 17AD 		BSF	OActive,7
00670 1E12 2B35 		GOTO	OutputB
00671 1E13 		endif
00672 1E13 	;
00996 1E13 		include	Seg3Custom.asm
00001 1E13 	;=========================================================================================
00002 1E13 	; Vista and Delmar Occupancy LEDs 
00003 1E13 	;
00004 1E13 	; Entry: Bank3
00005 1E13 	; Exit: Bank3
00006 1E13 	; RAM used: Param78, XReg, YReg
00007 1E13 	; Calls: () GetCurBlkY, Output
00008 1E13 	;
00009 1E13 3085 	LightOccLEDs	MOVLW	low BlockOccLEDs
00010 1E14 00B3 		MOVWF	CurBlk
00011 1E15 3006 		MOVLW	high BlockOccLEDs
00012 1E16 3E10 		ADDLW	low evDataROM
00013 1E17 00B4 		MOVWF	CurBlk+1
00014 1E18 01F3 	LightOccLEDs_L1	CLRF	YReg	;Block number
00015 1E19 01AD 		CLRF	OActive
00016 1E1A 2552 		CALL	GetCurBlkY_D18
00017 1E1B 0AF8 		INCF	Param78,F	;EOD is 0xFF
00018 1E1C 		SKPNZ
00019 1E1D 0008 		RETURN
00020 1E1E 00F2 		MOVWF	XReg
00021 1E1F 		LCALL	GetBlockPwrTableX
00022 1E24 3960 		ANDLW	0x60	;Detect east and west
00023 1E25 		SKPZ
00024 1E26 17AD 		BSF	OActive,7
00025 1E27 0AF3 		INCF	YReg,F	;output bit
00026 1E28 0AF3 		INCF	YReg,F	;output slot and board
00027 1E29 2552 		CALL	GetCurBlkY_D18
00028 1E2A 1FF8 		BTFSS	Param78,7	;Output board?
00029 1E2B 2E33 		GOTO	LightOccLEDs_Bmdl
00030 1E2C 3907 		ANDLW	0x07
00031 1E2D 00AE 		MOVWF	OBoard
00032 1E2E 03F3 		DECF	YReg,F
00033 1E2F 2552 		CALL	GetCurBlkY_D18	;output bit
00034 1E30 00AC 		MOVWF	OBit
00035 1E31 2356 		CALL	Output
00036 1E32 2E3B 		GOTO	LightOccLEDs_End
00037 1E33 	;
00038 1E33 00F2 	LightOccLEDs_Bmdl	MOVWF	XReg	;Put Block# in XReg
00039 1E34 		LCALL	RestoreBlkModBits	;Move the block's LED bits into ram.
00040 1E38 03F3 		DECF	YReg,F
00041 1E39 2552 		CALL	GetCurBlkY_D18	;output bit
CastleGate.asm   "DMFEInit.asm"                                          Page: 193
/HPRR Electrical Dept/HPRR.ASM/MasterFiles/

00042 1E3A 25DC 		CALL	SetBlockModuleLED
00043 1E3B 	;
00044 1E3B 3003 	LightOccLEDs_End	MOVLW	0x03
00045 1E3C 07B3 		ADDWF	CurBlk,F
00046 1E3D 		ADDCF	CurBlk+1,F
00047 1E3F 2E18 		GOTO	LightOccLEDs_L1
00048 1E40 	;
00049 1E40 	;=========================================================================================
00050 1E40 	; Light Track 365 selected LED
00051 1E40 	;
00052 1E40 	Loop7
00053 1E40 	;=========================================================================================
00054 1E40 	; Underhill East Ladder
00055 1E40 	;
00056 1E40 	; sample data
00057 1E40 	;------------------------------------------
00058 1E40 	;AuxSMLEDsData	DW	d'76'+SMOffRouteFlag
00059 1E40 	;	DW	d'77'+SMOffRouteFlag
00060 1E40 	;	DW	None	;Marks end of SMs
00061 1E40 	;	DB	BlkNum370	;Root block
00062 1E40 	;	DW	0x370A	;LED
00063 1E40 	;	DW	None	;optional 2nd LED (Not Used)
00064 1E40 	;
00065 1E40 	;	DB	EOD
00066 1E40 	;	DB	EOD
00067 1E40 	;------------------------------------------
00068 1E40 	;
00069 1E40 300F 	OddLEDs	MOVLW	high AuxSMLEDsData
00070 1E41 3E10 		ADDLW	low evDataROM
00071 1E42 00B4 		MOVWF	CurBlk+1
00072 1E43 3051 		MOVLW	low AuxSMLEDsData
00073 1E44 00B3 		MOVWF	CurBlk
00074 1E45 01F3 	OddLEDs_L2	CLRF	YReg	;LSB of first SM
00075 1E46 	;
00076 1E46 17FA 		BSF	Param7A,7
00077 1E47 0AF3 	OddLEDs_L1	INCF	YReg,F
00078 1E48 2552 		CALL	GetCurBlkY_D18	;SM# MSB
00079 1E49 00F4 		MOVWF	Param74
00080 1E4A 3CFF 		SUBLW	EOD
00081 1E4B 		SKPNZ		;Are we past the end?
00082 1E4C 2E6F 		GOTO	OddLEDs_end	; Yes
00083 1E4D 	;
00084 1E4D 30FE 		MOVLW	high None
00085 1E4E 0278 		SUBWF	Param78,W
00086 1E4F 		SKPNZ		;Last SM already done?
00087 1E50 2E5A 		GOTO	OddLEDs_Blk	; Yes
00088 1E51 	;
00089 1E51 03F3 		DECF	YReg,F
00090 1E52 2552 		CALL	GetCurBlkY_D18	;SM# LSB
00091 1E53 1CF4 		BTFSS	Param74,SMOffRouteFlagBit
00092 1E54 267F 		CALL	AndSMwith7A
00093 1E55 18F4 		BTFSC	Param74,SMOffRouteFlagBit
00094 1E56 2688 		CALL	AndSMNotwith7A
00095 1E57 3002 		MOVLW	0x02
00096 1E58 07F3 		ADDWF	YReg,F	;next SM# LSB or None
00097 1E59 2E47 		GOTO	OddLEDs_L1
00098 1E5A 	; YReg>>MSB of None
00099 1E5A 03F3 	OddLEDs_Blk	DECF	YReg,F	;LSB of None-1
00100 1E5B 2552 		CALL	GetCurBlkY_D18
00101 1E5C 00F4 		MOVWF	Param74	;Save ON only flag
00102 1E5D 0AF3 		INCF	YReg,F	;MSB of None
00103 1E5E 0AF3 		INCF	YReg,F	;Root block
00104 1E5F 	;
00105 1E5F 		if LightUnusedSMLEDs
00106 1E5F 		else
00112 1E5F 		endif
00113 1E5F 	;
00114 1E5F 087A 		MOVF	Param7A,W
00115 1E60 00AD 		MOVWF	OActive
00116 1E61 3002 		MOVLW	0x02
00117 1E62 07F3 		ADDWF	YReg,F	;LED MSB
00118 1E63 2552 		CALL	GetCurBlkY_D18
00119 1E64 03F3 		DECF	YReg,F	;LED Bit#
00120 1E65 1BAD 		BTFSC	OActive,7	;Turning it on?
00121 1E66 2E68 		GOTO	OddLEDs_DoLight	; Yes
00122 1E67 18F4 		BTFSC	Param74,1	;ON only flag? (inverted flag)
00123 1E68 2670 	OddLEDs_DoLight	CALL	OddLEDs_LightIt	; No
00124 1E69 	;
00125 1E69 	;	MOVF	Param7A,W
00126 1E69 	;	MOVWF	OActive
00127 1E69 	;	MOVLW	0x03
00128 1E69 	;	ADDWF	YReg,F	;2nd LED MSB
00129 1E69 	;	CALL	GetCurBlkY_D18
00130 1E69 	;	DECF	YReg,F	;LED Bit#
00131 1E69 	;	BTFSS	Param78,7	;none?
00132 1E69 	;	CALL	OddLEDs_LightIt
00133 1E69 	;	
00134 1E69 3002 	OddLEDs_Next	MOVLW	0x02
00135 1E6A 0773 		ADDWF	YReg,W	;1 past end
00136 1E6B 07B3 		ADDWF	CurBlk,F
00137 1E6C 		ADDCF	CurBlk+1,F
00138 1E6E 2E45 		GOTO	OddLEDs_L2
00139 1E6F 	;
00140 1E6F 0008 	OddLEDs_end	RETURN
00141 1E70 	;	
00142 1E70 	;---------------------------------	
00143 1E70 	;	
00144 1E70 1F78 	OddLEDs_LightIt	BTFSS	Param78,OddSMOBFlagBit
00145 1E71 2E78 		GOTO	OddLEDs_BlkMdlBit
00146 1E72 	;
CastleGate.asm   "DMFEInit.asm"                                          Page: 194
/HPRR Electrical Dept/HPRR.ASM/MasterFiles/

00147 1E72 3907 		ANDLW	0x07
00148 1E73 00AE 		MOVWF	OBoard
00149 1E74 2552 		CALL	GetCurBlkY_D18
00150 1E75 00AC 		MOVWF	OBit
00151 1E76 2356 		CALL	Output
00152 1E77 0008 		RETURN
00153 1E78 	;
00154 1E78 00F2 	OddLEDs_BlkMdlBit	MOVWF	XReg	;Put Block# in XReg
00155 1E79 		LCALL	RestoreBlkModBits	;Move the block's LED bits into ram.
00156 1E7D 2552 		CALL	GetCurBlkY_D18
00157 1E7E 2DDC 		GOTO	SetBlockModuleLED
00158 1E7F 	;
00159 1E7F 	;----------------------------------------------------
00160 1E7F 	;
00161 1E7F 00F2 	AndSMwith7A	MOVWF	XReg
00162 1E80 		LCALL	GetSMTableX
00163 1E85 1FF8 		BTFSS	Param78,7	;SM is active?
00164 1E86 13FA 		BCF	Param7A,7	;No
00165 1E87 0008 		RETURN
00166 1E88 	;
00167 1E88 00F2 	AndSMNotwith7A	MOVWF	XReg
00168 1E89 		LCALL	GetSMTableX
00169 1E8E 1BF8 		BTFSC	Param78,7	;SM is inactive?
00170 1E8F 13FA 		BCF	Param7A,7	;No
00171 1E90 0008 		RETURN
00172 1E91 	;
00173 1E91 	;
00174 1E91 3000 	SetOutputFromParam7A	MOVLW	high evDataROM
00175 1E92 009F 		MOVWF	SRAM_Addr2
00176 1E93 		MOVFW	LampTblPtr+1
00177 1E94 009E 		MOVWF	SRAM_Addr1
00178 1E95 		MOVFW	LampTblPtr
00179 1E96 009D 		MOVWF	SRAM_Addr0
00180 1E97 210D 		CALL	SRAM_ReadPI_D18
00181 1E98 		mBank3
00182 1E9A 00AC 		MOVWF	OBit
00183 1E9B 210D 		CALL	SRAM_ReadPI_D18
00184 1E9C 		mBank3
00185 1E9E 00AE 		MOVWF	OBoard
00186 1E9F 0E2E 		SWAPF	OBoard,W
00187 1EA0 3903 		ANDLW	0x03
00188 1EA1 00AB 		MOVWF	OSlot
00189 1EA2 3007 		MOVLW	0x07
00190 1EA3 05AE 		ANDWF	OBoard,F
00191 1EA4 13AD 		BCF	OActive,7
00192 1EA5 1BFA 		BTFSC	Param7A,7
00193 1EA6 17AD 		BSF	OActive,7
00194 1EA7 2356 		CALL	Output
00195 1EA8 		MOVFW	SRAM_Addr1
00196 1EA9 00BF 		MOVWF	LampTblPtr+1
00197 1EAA 		MOVFW	SRAM_Addr0
00198 1EAB 00BE 		MOVWF	LampTblPtr
00199 1EAC 0008 		RETURN
00200 1EAD 	;
00201 1EAD 	;
00202 1EAD 	;
00997 1EAD 		include	Seg3Custom2.asm
00001 1EAD 	;====================================================
00002 1EAD 	; Read block detectors for PHL, PH1..PH4
00003 1EAD 	;  Inputs 0x0000..0x000F
00004 1EAD 	;
00005 1EAD 3005 	ReadBlkDet	MOVLW	0x05	;sixth input
00006 1EAE 00B3 		MOVWF	CurBlk
00007 1EAF 01B4 		CLRF	CurBlk+1
00008 1EB0 300A 		MOVLW	d'10'	;Scan 10 inputs
00009 1EB1 00F9 		MOVWF	Param79
00010 1EB2 238A 	ReadBlkDet_L1	CALL	InputB
00011 1EB3 0DB1 		RLF	IActive,F
00012 1EB4 0CF5 		RRF	Param75,F
00013 1EB5 0CF4 		RRF	Param74,F
00014 1EB6 0AB3 		INCF	CurBlk,F
00015 1EB7 0BF9 		DECFSZ	Param79,F
00016 1EB8 2EB2 		GOTO	ReadBlkDet_L1
00017 1EB9 	;
00018 1EB9 3005 		MOVLW	0x05	;PHL, PH1..PH4
00019 1EBA 00F9 		MOVWF	Param79
00020 1EBB 3047 		MOVLW	BlkNumPHL
00021 1EBC 00F2 		MOVWF	XReg
00022 1EBD 26C2 	ReadBlkDet_L2	CALL	ReadBlkDetUpdate1
00023 1EBE 0AF2 		INCF	XReg,F
00024 1EBF 0BF9 		DECFSZ	Param79,F
00025 1EC0 2EBD 		GOTO	ReadBlkDet_L2
00026 1EC1 	;
00027 1EC1 0008 		RETURN
00028 1EC2 	;
00029 1EC2 	ReadBlkDetUpdate1	LCALL	GetBlockPwrTableX
00030 1EC7 399F 		ANDLW	b'10011111'
00031 1EC8 00FA 		MOVWF	Param7A
00032 1EC9 0CF5 		RRF	Param75,F
00033 1ECA 0CF4 		RRF	Param74,F
00034 1ECB 1AF4 		BTFSC	Param74,5
00035 1ECC 16FA 		BSF	Param7A,5
00036 1ECD 0CF5 		RRF	Param75,F
00037 1ECE 0CF4 		RRF	Param74,F
00038 1ECF 1AF4 		BTFSC	Param74,5
00039 1ED0 177A 		BSF	Param7A,6
00040 1ED1 0878 		MOVF	Param78,W
00041 1ED2 027A 		SUBWF	Param7A,W
00042 1ED3 		SKPNZ		;Any Change
00043 1ED4 0008 		RETURN		; No
CastleGate.asm   "DMFEInit.asm"                                          Page: 195
/HPRR Electrical Dept/Castlegate/Firmware/

00044 1ED5 087A 		MOVF	Param7A,W
00045 1ED6 		LCALL	SetBlockPwrTableX
00046 1EDB 145B 		BSF	BlockDataChngFlag
00047 1EDC 0008 		RETURN
00048 1EDD 	;
00998 1EDD 		include	Bootloader.asm
00001 1EDD 		subtitle	"Bootloader.asm"

00002 1EDD 		page
00003 1EDD 	;===========================================================================================
00004 1EDD 	;
00005 1EDD 	;  FileName: Bootloader.asm
00006 1EDD 	;  Date: 4/6/09
00007 1EDD 	;  File Version: 1.1.5
00008 1EDD 	;  
00009 1EDD 	;  Author: David M. Flynn
00010 1EDD 	;  Company: Oxford V.U.E., Inc.
00011 1EDD 	;
00012 1EDD 	;============================================================================================
00013 1EDD 	; Notes:
00014 1EDD 	;  This file contains the general purpose routines used to implement a bootloader
00015 1EDD 	;  for the 16F877 on the Oxford V.U.E. Brain GP CPU.
00016 1EDD 	;
00017 1EDD 	;  To use:
00018 1EDD 	;   Call PwrUpTest once each power up.
00019 1EDD 	;   To force the ROM image file (b.b) to load next reset call SetUIPBit.
00020 1EDD 	;    Dispatch.asm looks to these buttons down together to call SetUIPBit
00021 1EDD 0018 	BL_SetCode	EQU	0x18	;SW5 AND SW6
00022 1EDD 	;   To load an overlay set PM_FileNum to 1..9 then call UpdateProgMem.
00023 1EDD 	;    UpdateProgMem does not return, it will display Str_ErrorPtr if FNF or CSUM is bad or reboot.
00024 1EDD 	;
00025 1EDD 	;----------------------------------
00026 1EDD 	;  This code is included in Dispatch.asm if Dispatch.asm is not used include it in the main event loop
00027 1EDD 	;	if UsesBootloader
00028 1EDD 	;Bootloader trigger, if the correct buttons are down then set the bit to trigger
00029 1EDD 	; loading next time a reset occures.
00030 1EDD 	;	MOVLW	BL_SetCode	;BootLoader button combo
00031 1EDD 	;	SUBWF	Param78,W	;Button bits (positive logic)
00032 1EDD 	;	SKPZ
00033 1EDD 	;	GOTO	NoBootload
00034 1EDD 	;	mCALL2To3	SetUIPBit
00035 1EDD 	;	MOVLW	StrResetNowPtr
00036 1EDD 	;	CALL	DispStrLine3
00037 1EDD 	;BD_Stop	GOTO	BD_Stop
00038 1EDD 	;NoBootload
00039 1EDD 	;	endif
00040 1EDD 	;-----------------------------------
00041 1EDD 	;  Strings used:
00042 1EDD 	;   Str_ErrorPtr	STR	'Error!'
00043 1EDD 	;   StrResetNowPtr	STR	'Press Reset Now'
00044 1EDD 	;   StrLoadRIPtr	STR	'Loading ROM Image'
00045 1EDD 	;-----------------------------------
00046 1EDD 	;  Program Memory image file format:
00047 1EDD 	;   file is big endien
00048 1EDD 	;   File name of main image is "b.b"
00049 1EDD 	;   A portion to the image may be swaped using filenames "b1.b", "b2.b", etc.
00050 1EDD 	;   Destination Address (word)
00051 1EDD 	;   Length in words (word)
00052 1EDD 	;   Checksum (word)
00053 1EDD 	;   Upto 16,384 Bytes of data (0x2000 words)
00054 1EDD 	;-----------------------------------
00055 1EDD 	;  EEPROM locations required:
00056 1EDD 	;   ePM_Flags	RES	1	;Used to track status
00057 1EDD 	;  ePM_Flags bits
00058 1EDD 	;   Update In Progress bit
00059 1EDD 0000 	PM_UIP	EQU	0	;set at start of update, clr'd when done
00060 1EDD 0001 	PM_UIPMask	EQU	0x01
00061 1EDD 000E 	PM_UIPMaskClr	EQU	0x0E	;clr file number also
00062 1EDD 	;   First Boot Flag
00063 1EDD 0001 	PM_FBF	EQU	1	;set only by programmer
00064 1EDD 0002 	PM_FBFMask	EQU	0x02
00065 1EDD 	;   upper nibble is the file number 0..9
00066 1EDD 	;-----------------------------------
00067 1EDD 	;  Bank zero memory locations required:
00068 1EDD 	;   PM_Addr_Lo	RES	1	;Prog mem dest address
00069 1EDD 	;   PM_Addr_Hi	RES	1
00070 1EDD 	;   PM_Data_Lo	RES	1	;Current data
00071 1EDD 	;   PM_Data_Hi	RES	1
00072 1EDD 	;   PM_StopAddrL	RES	1	;Last address + 1
00073 1EDD 	;   PM_StopAddrH	RES	1
00074 1EDD 	;   PM_CSumL	RES	1	;Checksum
00075 1EDD 	;   PM_CSumH	RES	1
00076 1EDD 	;   PM_FileNum	RES	1	;File number 0=b.b, 1=b1.b, etc.
00077 1EDD 	;------------------------------------
00078 1EDD 	; This file was build to fit at 0x1F10..0x1FFF in segment 3.
00079 1EDD 	; Calls outside this segment:
00080 1EDD 	;  ZeroFName_D18,DOP_Ram_D18,
00081 1EDD 	;  find_file_D18,open_file_D18,close_file_D18
00082 1EDD 	;  ReadEE79_D18,WriteEEP79W_D18,lcd_GotoLine2_3,PrintString_D18
00083 1EDD 	;
00084 1EDD 	; The above callers should be placed at the beginning of segment 3 to minimize
00085 1EDD 	; the chance that they are moved.  If any of the callers are moved then the 
00086 1EDD 	; bootloader will fail.  If i2c_read1 is moved then the bootloader will fail.
00087 1EDD 	;
00088 1EDD 	;============================================================================================
00089 1EDD 	; Revision History
00090 1EDD 	;
00091 1EDD 	; 1.1.5    4/6/2009	Changed conditional UsesLCD>>PrintString
00092 1EDD 	; 1.1.4    12/30/2007	Added _GIE paranoid BCF, Changed to org 0x1F06
00093 1EDD 	; 1.1.3    5/2/2005	Added PM_FBF First Boot Flag
CastleGate.asm   "Bootloader.asm"                                        Page: 196
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

00094 1EDD 	; 1.1.2    10/22/2004  Copied I2C_Read into this routine to make it more robust.
00095 1EDD 	;	New origin is 0x1F08
00096 1EDD 	; 1.1.1    9/12/2004	Added notes to explain why/when the bootloaded will fail.
00097 1EDD 	; 1.1      8/30/2004	Modified for multi-file overlay support, added SetUIPBitW
00098 1EDD 	; 1.0      8/27/2004	First working version.
00099 1EDD 	; 1.0d1    8/21/2004	First Code
00100 1EDD 	;
00101 1EDD 	;============================================================================================
00102 1EDD 		ifndef UseOldBL
00104 1EDD 		endif
00105 1EDD 	;
00106 1EDD 		if UseOldBL
00107 1EDD 		ORG	0x1F08
00108 1F08 		else
00110 1F08 		endif
00111 1F08 	;============================================================================================
00112 1F08 	;
00113 1F08 	;Routines in this file
00114 1F08 	; Name	(additional stack words required) Description (Bank in/Bank out)
00115 1F08 	;============================================================================================
00116 1F08 	; SetUIPBitW	(0+1) Set Update In Progress bit and file number
00117 1F08 	; SetUIPBit	(1+1) Set Update In Progress bit
00118 1F08 	; PwrUpTest	(1+4) If the Prog Mem checksum is missing or wrong UpdateProgMem
00119 1F08 	; ReadPM_PI	(0)   Read data from Program Memory Param79(LSB):Param7A(MSB)=(PM_Addr++) (0/0)
00120 1F08 	; ReadPM	(0)   Read data from Program Memory Param79(LSB):Param7A(MSB)=(Param7C:Param7B)
00121 1F08 	; WritePM_PI	(0)   Write data to Program Memory (PM_Addr++)=Param79(LSB):Param7A(MSB)
00122 1F08 	; WritePM	(0)   Write data to Program Memory (Param7C:Param7B)=Param79(LSB):Param7A(MSB)
00123 1F08 	;
00124 1F08 	; Gen_PM_CSUM	(1+0) Read every byte in program memory to calc check sum (0/0)
00125 1F08 	; Gen_BLPM_CSUM	(1+0) Read the ROM image and calc check sum (0/0)
00126 1F08 	;
00127 1F08 	; WriteI2CToPM	(1+1) Copy from I2C to Prog Mem, Don't rewrite, Don't write 0x3FFF bytes (0/0)
00128 1F08 	; OpenPMImageFile	(1+2) Open the Prog Mem image file.
00129 1F08 	; PM_LenToStop	(0)   Convert len to stop addr
00130 1F08 	;
00131 1F08 	; VerifyRICSum	(1+3) Verify the checksum of the rom image, W=0 noErr, W=0x80 FNF or bad csum
00132 1F08 	;
00133 1F08 	; ClrUIPBit	(1+1) Clr Update In Progress bit
00134 1F08 	; UpdateProgMem	(1+4) Update the program memory.
00135 1F08 	;
00136 1F08 	;============================================================================================
00137 1F08 	;============================================================================================
00138 1F08 	;Set Update In Progress bit and file number
00139 1F08 	;
00140 1F08 	; Entry: W=file number 0..9
00141 1F08 	; Exit: none
00142 1F08 	; RAM used: Param78,Param79
00143 1F08 	; Calls: (0+1) WriteEEP79W_D18
00144 1F08 	;
00145 1F08 390F 	SetUIPBitW	ANDLW	0x0F	;parnoid!
00146 1F09 00F8 		MOVWF	Param78
00147 1F0A 300F 		MOVLW	ePM_Flags
00148 1F0B 00F9 		MOVWF	Param79
00149 1F0C 0E78 		SWAPF	Param78,W	;move file number to upper niddle
00150 1F0D 3801 		IORLW	PM_UIPMask	;set load bit
00151 1F0E 2827 		GOTO	WriteEEP79W_D18	
00152 1F0F 	;
00153 1F0F 	;============================================================================================
00154 1F0F 	;Set Update In Progress bit
00155 1F0F 	;
00156 1F0F 	; Entry: none
00157 1F0F 	; Exit: none
00158 1F0F 	; RAM used: Param78,Param79
00159 1F0F 	; Calls: (1+1) ReadEE79_D18, WriteEEP79W_D18
00160 1F0F 	;
00161 1F0F 300F 	SetUIPBit	MOVLW	ePM_Flags
00162 1F10 00F9 		MOVWF	Param79
00163 1F11 2021 		CALL	ReadEE79_D18
00164 1F12 00F8 		MOVWF	Param78
00165 1F13 3901 		ANDLW	PM_UIPMask
00166 1F14 		SKPZ
00167 1F15 0008 		RETURN
00168 1F16 	;	
00169 1F16 		MOVFW	Param78
00170 1F17 3801 		IORLW	PM_UIPMask
00171 1F18 2827 		GOTO	WriteEEP79W_D18
00172 1F19 	;
00173 1F19 	;============================================================================================
00174 1F19 	; If the ePM_Flags,PM_UIP bit is set goto UpdateProgMem
00175 1F19 	;
00176 1F19 	; Entry: none
00177 1F19 	; Exit: Does not exit if programming happens, UpdateProgMem
00178 1F19 	; RAM used: Param70,Param71,Param77,Param79,Param7A,Param7B,Param7C
00179 1F19 	; Calls: (1+4) ReadEE79_D18,UpdateProgMem
00180 1F19 	;
00181 1F19 300F 	PwrUpTest	MOVLW	ePM_Flags	;Is Update In Progress bit set?
00182 1F1A 00F9 		MOVWF	Param79
00183 1F1B 2021 		CALL	ReadEE79_D18
00184 1F1C 00F7 		MOVWF	Param77
00185 1F1D 3901 		ANDLW	PM_UIPMask
00186 1F1E 		SKPNZ
00187 1F1F 0008 		RETURN		; No
00188 1F20 	;
00189 1F20 27E7 		CALL	ClrUIPBit	;we get one shot at this
00190 1F21 0E77 		SWAPF	Param77,W
00191 1F22 390F 		ANDLW	0x0F	;parnoid! only 0..9 are valid
00192 1F23 00C0 		MOVWF	PM_FileNum	;"b.b" or "bN.b"
00193 1F24 		if UsesLCD
00194 1F24 202F 		CALL	lcd_GotoLine2_3
00195 1F25 3031 		MOVLW	StrLoadRIPtr
CastleGate.asm   "Bootloader.asm"                                        Page: 197
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

00196 1F26 203A 		CALL	PrintString_D18
00197 1F27 		endif
00198 1F27 2FEC 		GOTO	UpdateProgMem
00199 1F28 	;
00200 1F28 	;============================================================================================
00201 1F28 	; Read data from Program Memory Param79(LSB):Param7A(MSB)=(PM_Addr++)
00202 1F28 	;
00203 1F28 	; Entry: none
00204 1F28 	; Exit: PM_Addr++
00205 1F28 	; RAM used: Param78,Param79,Param7A,Param7B,Param7C
00206 1F28 	; Calls:(0) ReadPM, WritePM
00207 1F28 	;
00208 1F28 01F8 	ReadPM_PI	CLRF	Param78
00209 1F29 279D 	ReadPM_PI_E2	CALL	MovePMAddrToTemp
00210 1F2A 	;
00211 1F2A 2740 		CALL	BLIncAddr
00212 1F2B 1878 		BTFSC	Param78,0
00213 1F2C 2F46 		GOTO	WritePM
00214 1F2D 	;
00215 1F2D 	; fall through to ReadPM
00216 1F2D 	;============================================================================================
00217 1F2D 	; Read data from Program Memory Param79(LSB):Param7A(MSB)=(Param7C:Param7B)
00218 1F2D 	;
00219 1F2D 	; Entry: PM Addr in Param7C:Param7B
00220 1F2D 	; Exit: none
00221 1F2D 	; RAM used: Param79,Param7A,Param7B,Param7C
00222 1F2D 	; Calls: (0) None
00223 1F2D 	;
00224 1F2D 	ReadPM	mBank2
00225 1F2F 		MOVFW	Param7B	;Write the
00226 1F30 008D 		MOVWF	EEADR	;address bytes
00227 1F31 		MOVFW	Param7C	;for the desired
00228 1F32 008F 		MOVWF	EEADRH	;address to read
00229 1F33 1683 		BSF	_RP0	;Bank 3
00230 1F34 178C 		BSF	EECON1,EEPGD	;Point to Program memory
00231 1F35 140C 		BSF	EECON1,RD	;Start read operation
00232 1F36 0000 		NOP		;Required two NOPs
00233 1F37 0000 		NOP
00234 1F38 1283 		BCF	_RP0	;Bank 2
00235 1F39 080C 		MOVF	EEDATA,W	;Param79(LSB) = EEDATA
00236 1F3A 00F9 		MOVWF	Param79
00237 1F3B 080E 		MOVF	EEDATH,W	;Param7A = EEDATH
00238 1F3C 00FA 		MOVWF	Param7A
00239 1F3D 	BL_RTN_Bnk0	mBank0
00240 1F3F 0008 		RETURN
00241 1F40 	;
00242 1F40 	;============================================================================================
00243 1F40 0AB8 	BLIncAddr	INCF	PM_Addr_Lo,F
00244 1F41 		SKPNZ
00245 1F42 0AB9 		INCF	PM_Addr_Hi,F
00246 1F43 0008 		RETURN
00247 1F44 	;============================================================================================
00248 1F44 	; Write data to Program Memory (PM_Addr++)=Param79(LSB):Param7A(MSB)
00249 1F44 	; Disable interupts before calling "BCF	INTCON,GIE"
00250 1F44 	;
00251 1F44 	; Entry: PM_Addr,Param79/A
00252 1F44 	; Exit: PM_Addr++
00253 1F44 	; RAM used: Param78,Param79,Param7A,Param7B,Param7C
00254 1F44 	; Calls:(0) WritePM
00255 1F44 	;
00256 1F44 1478 	WritePM_PI	BSF	Param78,0
00257 1F45 2F29 		GOTO	ReadPM_PI_E2
00258 1F46 	;
00259 1F46 	; fall through to WritePM
00260 1F46 	;============================================================================================
00261 1F46 	; Write data to Program Memory (Param7C:Param7B)=Param79(LSB):Param7A(MSB)
00262 1F46 	; Disable interupts before calling "BCF	INTCON,GIE"
00263 1F46 	;
00264 1F46 	; Entry: PM Addr in Param7C:Param7B, Data in Param7A:Param79
00265 1F46 	; Exit: none
00266 1F46 	; RAM used: Param79,Param7A,Param7B,Param7C
00267 1F46 	; Calls: (0) None
00268 1F46 	;
00269 1F46 	WritePM	mBank2
00270 1F48 087B 		MOVF	Param7B,W	;Write address
00271 1F49 008D 		MOVWF	EEADR	; of desired
00272 1F4A 087C 		MOVF	Param7C,W	; program memory
00273 1F4B 008F 		MOVWF	EEADRH	; location
00274 1F4C 0879 		MOVF	Param79,W	;Write value to
00275 1F4D 008C 		MOVWF	EEDATA	; program at
00276 1F4E 087A 		MOVF	Param7A,W	; desired memory
00277 1F4F 008E 		MOVWF	EEDATH	; location
00278 1F50 1683 		BSF	_RP0	;Bank 3
00279 1F51 178C 		BSF	EECON1,EEPGD	;Point to Program memory
00280 1F52 150C 		BSF	EECON1,WREN	;Enable writes
00281 1F53 3055 		MOVLW	0x55	;Write 55h to
00282 1F54 008D 		MOVWF	EECON2	; EECON2
00283 1F55 30AA 		MOVLW	0xAA	;Write AAh to
00284 1F56 008D 		MOVWF	EECON2	; EECON2
00285 1F57 148C 		BSF	EECON1,WR	;Start write operation
00286 1F58 0000 		NOP		;Two NOPs to allow micro
00287 1F59 0000 		NOP		; to setup for write
00288 1F5A 110C 		BCF	EECON1,WREN	;Disable writes
00289 1F5B 2F3D 		GOTO	BL_RTN_Bnk0
00290 1F5C 	;
00291 1F5C 	;============================================================================================
00292 1F5C 	; Read every byte in program memory to calc check sum
00293 1F5C 	;
00294 1F5C 	; Entry: PM_Addr,PM_StopAddr
00295 1F5C 	; Exit: Param71:Param70=CSUM
CastleGate.asm   "Bootloader.asm"                                        Page: 198
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

00296 1F5C 	; RAM used: Param70,Param71,Param77,Param79,Param7A,Param7B,Param7C
00297 1F5C 	; Calls: (1+0) ReadPM_PI or BL_i2c_read_ACK
00298 1F5C 	;
00299 1F5C 01F7 	Gen_PM_CSUM	CLRF	Param77
00300 1F5D 01F0 	Gen_PM_CSUM_E2	CLRF	Param70
00301 1F5E 01F1 		CLRF	Param71
00302 1F5F 	;
00303 1F5F 1C77 	Gen_PM_CSUM_L1	BTFSS	Param77,0
00304 1F60 2728 		CALL	ReadPM_PI	;Read PM_Value
00305 1F61 1C77 		BTFSS	Param77,0
00306 1F62 2F68 		GOTO	Gen_PM_CSUM_1
00307 1F63 	;
00308 1F63 27A2 		CALL	BL_i2c_read_ACK
00309 1F64 00FA 		MOVWF	Param7A
00310 1F65 27A2 		CALL	BL_i2c_read_ACK
00311 1F66 00F9 		MOVWF	Param79
00312 1F67 2740 		CALL	BLIncAddr
00313 1F68 	;
00314 1F68 	Gen_PM_CSUM_1	MOVFW	Param79	;CSUM+=PM_Value
00315 1F69 07F0 		ADDWF	Param70,F
00316 1F6A 		SKPNC
00317 1F6B 0AF1 		INCF	Param71,F
00318 1F6C 		MOVFW	Param7A
00319 1F6D 07F1 		ADDWF	Param71,F
00320 1F6E 	;
00321 1F6E 		MOVFW	PM_StopAddrH
00322 1F6F 0239 		SUBWF	PM_Addr_Hi,W
00323 1F70 		SKPZ
00324 1F71 2F5F 		GOTO	Gen_PM_CSUM_L1
00325 1F72 		MOVFW	PM_StopAddrL
00326 1F73 0238 		SUBWF	PM_Addr_Lo,W
00327 1F74 		SKPZ
00328 1F75 2F5F 		GOTO	Gen_PM_CSUM_L1
00329 1F76 2F3D 		GOTO	BL_RTN_Bnk0
00330 1F77 	;
00331 1F77 	;============================================================================================
00332 1F77 	; Read the ROM image and calc check sum
00333 1F77 	;
00334 1F77 	; Entry: i2c file open ready to read first byte (0/0)
00335 1F77 	; Exit: Param71:Param70=CSUM
00336 1F77 	; RAM used: Param70,Param71,Param77,Param79,Param7A,Param7B,Param7C
00337 1F77 	; Calls: (1+0) Gen_PM_CSUM_E2
00338 1F77 	;
00339 1F77 1477 	Gen_BLPM_CSUM	BSF	Param77,0
00340 1F78 2F5D 		GOTO	Gen_PM_CSUM_E2
00341 1F79 	;
00342 1F79 	;============================================================================================
00343 1F79 	; Copy from I2C to Prog Mem, Don't rewrite, Don't write 0x3FFF bytes
00344 1F79 	;
00345 1F79 	; Entry: i2c file open ready to read first byte, PM_StopAddr=Last+1, PM_Addr=first address
00346 1F79 	; Exit: none
00347 1F79 	; RAM used: Param70,Param71,Param77,Param79,Param7A,Param7B,Param7C
00348 1F79 	; Calls: (1+1) BL_i2c_read_ACK, ReadPM, WritePM_PI
00349 1F79 	;
00350 1F79 27A2 	WriteI2CToPM	CALL	BL_i2c_read_ACK	;Get new word
00351 1F7A 00BB 		MOVWF	PM_Data_Hi
00352 1F7B 27A2 		CALL	BL_i2c_read_ACK
00353 1F7C 00BA 		MOVWF	PM_Data_Lo
00354 1F7D 3C3F 		SUBLW	0x3F	;Test for unused word 0x3FFF
00355 1F7E 		SKPZ
00356 1F7F 2F83 		GOTO	WriteI2CToPM_1
00357 1F80 0A3A 		INCF	PM_Data_Lo,W
00358 1F81 		SKPNZ
00359 1F82 2F9B 		GOTO	WriteI2CToPM_Skp	;Skip this word
00360 1F83 	;
00361 1F83 279D 	WriteI2CToPM_1	CALL	MovePMAddrToTemp
00362 1F84 	;
00363 1F84 272D 		CALL	ReadPM	;Get Current PM Param79/A
00364 1F85 		MOVFW	Param79
00365 1F86 023A 		SUBWF	PM_Data_Lo,W
00366 1F87 		SKPZ
00367 1F88 2F8D 		GOTO	WriteI2CToPM_Prog
00368 1F89 		MOVFW	Param7A
00369 1F8A 023B 		SUBWF	PM_Data_Hi,W
00370 1F8B 		SKPNZ
00371 1F8C 2F9B 		GOTO	WriteI2CToPM_Skp
00372 1F8D 	;
00373 1F8D 	WriteI2CToPM_Prog	MOVFW	PM_Data_Lo
00374 1F8E 00F9 		MOVWF	Param79
00375 1F8F 		MOVFW	PM_Data_Hi
00376 1F90 00FA 		MOVWF	Param7A
00377 1F91 2744 		CALL	WritePM_PI
00378 1F92 	;
00379 1F92 	WriteI2CToPM_2	MOVFW	PM_StopAddrH
00380 1F93 0239 		SUBWF	PM_Addr_Hi,W
00381 1F94 		SKPZ
00382 1F95 2F79 		GOTO	WriteI2CToPM
00383 1F96 		MOVFW	PM_StopAddrL
00384 1F97 0238 		SUBWF	PM_Addr_Lo,W
00385 1F98 		SKPZ
00386 1F99 2F79 		GOTO	WriteI2CToPM
00387 1F9A 0008 		RETURN
00388 1F9B 	;
00389 1F9B 2740 	WriteI2CToPM_Skp	CALL	BLIncAddr
00390 1F9C 2F92 		GOTO	WriteI2CToPM_2
00391 1F9D 	;
00392 1F9D 	;=========================================================================================
00393 1F9D 	;
00394 1F9D 	MovePMAddrToTemp	MOVFW	PM_Addr_Lo
00395 1F9E 00FB 		MOVWF	Param7B
CastleGate.asm   "Bootloader.asm"                                        Page: 199
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

00396 1F9F 		MOVFW	PM_Addr_Hi
00397 1FA0 00FC 		MOVWF	Param7C
00398 1FA1 0008 		RETURN
00399 1FA2 	;
00400 1FA2 	;=========================================================================================
00401 1FA2 	; Read from external serial eeprom(s)
00402 1FA2 	; Entry: Bank0, Read next byte send ACK
00403 1FA2 	; Exit: W = Return Value
00404 1FA2 	; RAM used: none
00405 1FA2 	; Calls:(0) none
00406 1FA2 	;
00407 1FA2 118C 	BL_i2c_read_ACK	BCF	PIR1,SSPIF	; clear interrupt flag
00408 1FA3 1683 		BSF	STATUS,RP0	; Bank1
00409 1FA4 1591 		BSF	SSPCON2,RCEN	; enable receive mode
00410 1FA5 1283 		BCF	STATUS,RP0	; Bank0
00411 1FA6 1D8C 		BTFSS	PIR1,SSPIF	; has SSP received a data byte?
00412 1FA7 2FA6 		GOTO	$-1	; no, loop back to test
00413 1FA8 1683 		BSF	STATUS,RP0	; Bank1
00414 1FA9 1291 		BCF	SSPCON2,ACKDT	; ACK
00415 1FAA 1611 		BSF	SSPCON2,ACKEN	; send ACKDT bit
00416 1FAB 	;
00417 1FAB 1A11 		BTFSC	SSPCON2,ACKEN	; has ACKDT bit been sent yet?
00418 1FAC 2FAB 		GOTO	$-1	; no, loop back to test
00419 1FAD 1283 		BCF	STATUS,RP0
00420 1FAE 	;
00421 1FAE 0813 		MOVF	SSPBUF,W	; save data to RAM
00422 1FAF 1683 		BSF	STATUS,RP0	; Bank1
00423 1FB0 1191 		BCF	SSPCON2,RCEN	; disable receive mode
00424 1FB1 1283 		BCF	STATUS,RP0	; Bank0
00425 1FB2 0008 		RETURN
00426 1FB3 	;============================================================================================
00427 1FB3 	; Open the Prog Mem image file and put the header info in ram.
00428 1FB3 	;
00429 1FB3 	; Entry: PM_FileNum
00430 1FB3 	; Exit: W=0=file is open, 0x80=FNF
00431 1FB3 	; RAM used: Param70,Param71,Param77,Param79,Param7A,Param7B,Param7C
00432 1FB3 	; Calls: (1+2) ZeroFName_D18, find_file_D18, open_file_D18, BL_i2c_read_ACK
00433 1FB3 	;
00434 1FB3 2006 	OpenPMImageFile	CALL	ZeroFName_D18
00435 1FB4 3062 		MOVLW	'b'	;Set filename = "bN.b"
00436 1FB5 200C 		CALL	DOP_Ram_D18
00437 1FB6 		MOVFW	PM_FileNum
00438 1FB7 		SKPNZ
00439 1FB8 2FBB 		GOTO	OpenPMImageFile_1
00440 1FB9 3E30 		ADDLW	'0'
00441 1FBA 200C 		CALL	DOP_Ram_D18
00442 1FBB 302E 	OpenPMImageFile_1	MOVLW	'.'
00443 1FBC 200C 		CALL	DOP_Ram_D18
00444 1FBD 3062 		MOVLW	'b'
00445 1FBE 200C 		CALL	DOP_Ram_D18
00446 1FBF 	;
00447 1FBF 200F 		CALL	find_file_D18
00448 1FC0 1C78 		BTFSS	Param78,0
00449 1FC1 3480 		RETLW	0x80	;file not found
00450 1FC2 2015 		CALL	open_file_D18
00451 1FC3 27A2 		CALL	BL_i2c_read_ACK
00452 1FC4 00B9 		MOVWF	PM_Addr_Hi	;PM_Addr=Destination
00453 1FC5 27A2 		CALL	BL_i2c_read_ACK
00454 1FC6 00B8 		MOVWF	PM_Addr_Lo
00455 1FC7 27A2 		CALL	BL_i2c_read_ACK	;PM_StopAddr=Length
00456 1FC8 00BD 		MOVWF	PM_StopAddrH
00457 1FC9 27A2 		CALL	BL_i2c_read_ACK
00458 1FCA 00BC 		MOVWF	PM_StopAddrL
00459 1FCB 27A2 		CALL	BL_i2c_read_ACK	;PM_CSum=Checksum
00460 1FCC 00BF 		MOVWF	PM_CSumH
00461 1FCD 27A2 		CALL	BL_i2c_read_ACK
00462 1FCE 00BE 		MOVWF	PM_CSumL
00463 1FCF 3400 		RETLW	0x00
00464 1FD0 	;
00465 1FD0 	;============================================================================================
00466 1FD0 	; convert len to stop addr (0/0)
00467 1FD0 	;
00468 1FD0 	; Entry: Bank0, PM_Addr, PM_StopAddr
00469 1FD0 	; Exit: PM_StopAddr
00470 1FD0 	; RAM used: none
00471 1FD0 	; Calls: (0) none
00472 1FD0 	;
00473 1FD0 	PM_LenToStop	MOVFW	PM_Addr_Lo	
00474 1FD1 07BC 		ADDWF	PM_StopAddrL,F
00475 1FD2 		SKPNC
00476 1FD3 0ABD 		INCF	PM_StopAddrH,F
00477 1FD4 		MOVFW	PM_Addr_Hi
00478 1FD5 07BD 		ADDWF	PM_StopAddrH,F
00479 1FD6 0008 		RETURN
00480 1FD7 	;
00481 1FD7 	;============================================================================================
00482 1FD7 	; Verify the checksum of the rom image
00483 1FD7 	;
00484 1FD7 	; Entry: PM_FileNum
00485 1FD7 	; Exit: W=0 noErr, W=0x80 FNF or bad csum
00486 1FD7 	; RAM used: Param70,Param71,Param77,Param79,Param7A,Param7B,Param7C
00487 1FD7 	; Calls: (1+3) OpenPMImageFile, PM_LenToStop, Gen_BLPM_CSUM, close_file_D18
00488 1FD7 	;
00489 1FD7 	;
00490 1FD7 27B3 	VerifyRICSum	CALL	OpenPMImageFile
00491 1FD8 3800 		IORLW	0x00
00492 1FD9 		SKPZ
00493 1FDA 2FE5 		GOTO	VRICsErr	;file not found
00494 1FDB 	;
00495 1FDB 27D0 		CALL	PM_LenToStop
CastleGate.asm   "Bootloader.asm"                                        Page: 200
/Oxford V.U.E., Inc./Brain Test and Master files/Master Files/

00496 1FDC 2777 		CALL	Gen_BLPM_CSUM	;Param71:Param70=CSUM
00497 1FDD 201B 		CALL	close_file_D18
00498 1FDE 	;
00499 1FDE 		MOVFW	Param70
00500 1FDF 023E 		SUBWF	PM_CSumL,W
00501 1FE0 		SKPZ
00502 1FE1 3480 		RETLW	0x80	;Doesn't Match
00503 1FE2 	;
00504 1FE2 		MOVFW	Param71
00505 1FE3 023F 		SUBWF	PM_CSumH,W
00506 1FE4 		SKPZ
00507 1FE5 3480 	VRICsErr	RETLW	0x80	;Doesn't Match
00508 1FE6 3400 		RETLW	0x00	;It's GOOD!
00509 1FE7 	;
00510 1FE7 	;============================================================================================
00511 1FE7 	; Clr Update In Progress bit
00512 1FE7 	;
00513 1FE7 	; Entry: none
00514 1FE7 	; Exit: none
00515 1FE7 	; RAM used: Param78,Param79
00516 1FE7 	; Calls: (1+1) ReadEE79_D18, WriteEEP79W_D18
00517 1FE7 	;
00518 1FE7 300F 	ClrUIPBit	MOVLW	ePM_Flags	
00519 1FE8 00F9 		MOVWF	Param79
00520 1FE9 2021 		CALL	ReadEE79_D18
00521 1FEA 390E 		ANDLW	PM_UIPMaskClr
00522 1FEB 2827 		GOTO	WriteEEP79W_D18
00523 1FEC 	;
00524 1FEC 	;============================================================================================
00525 1FEC 	; Update the program memory.
00526 1FEC 	;
00527 1FEC 	; Find then program memory image in eerom and verify its checksum.
00528 1FEC 	; Clear ePM_Flags,PM_UIP bit. If this bit is cleared at startup then this proccess was
00529 1FEC 	;  interupted and must be completed.
00530 1FEC 	; 
00531 1FEC 	;
00532 1FEC 	; Entry: PM_FileNum
00533 1FEC 	; Exit: Does not exit, GOTO 0x0000
00534 1FEC 	; RAM used: Param70,Param71,Param77,Param78,Param79,Param7A,Param7B,Param7C
00535 1FEC 	; Calls: (1+4) OpenPMImageFile,WriteI2CToPM,VerifyRICSum
00536 1FEC 	;
00537 1FEC 27D7 	UpdateProgMem	CALL	VerifyRICSum
00538 1FED 3800 		IORLW	0x00
00539 1FEE 		SKPZ		;skip if noErr
00540 1FEF 2FFC 		GOTO	CheckSumError	;rom image had bad csum
00541 1FF0 	;
00542 1FF0 270F 		CALL	SetUIPBit
00543 1FF1 	;
00544 1FF1 27B3 		CALL	OpenPMImageFile
00545 1FF2 3800 		IORLW	0x00
00546 1FF3 		SKPZ
00547 1FF4 2FFC 		GOTO	CheckSumError	;file not found
00548 1FF5 	;
00549 1FF5 27D0 		CALL	PM_LenToStop
00550 1FF6 	;
00551 1FF6 138B 		BCF	_GIE	;disable interupts
00552 1FF7 		if UseOldBL
00553 1FF7 		else
00556 1FF7 		endif
00557 1FF7 	;
00558 1FF7 2779 		CALL	WriteI2CToPM
00559 1FF8 201B 		CALL	close_file_D18
00560 1FF9 	;
00561 1FF9 27E7 		CALL	ClrUIPBit
00562 1FFA 	;
00563 1FFA 018A 		CLRF	PCLATH
00564 1FFB 2800 		GOTO	0x0000
00565 1FFC 	;
00566 1FFC 	CheckSumError	
00567 1FFC 		if UsesLCD
00568 1FFC 202F 		CALL	lcd_GotoLine2_3
00569 1FFD 3022 		MOVLW	Str_ErrorPtr
00570 1FFE 203A 		CALL	PrintString_D18
00571 1FFF 		endif
00572 1FFF 2FFF 	CSumNoRtn	GOTO	CSumNoRtn
00573 2000 	;
00574 2000 	;============================================================================================
00575 2000 	;
00576 2000 	; End of Bootloader.asm
00577 2000 	;
00578 2000 	;
00999 2000 	;
01000 2000 	;
01001 2000 	;
01002 2000 	;
01003 2000 	;
01004 2000 	;
01005 2000 	;
01006 2000 	;
01007 2000 		END		; directive 'end of program'

Memory Usage Map ('X' = Used, '-' = Unused)
 
0000  : XXX-XXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0040  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0080  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00C0  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0100  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0140  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0180  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
CastleGate.asm   Memory Usage Map                                        Page: 201
/HPRR Electrical Dept/Castlegate/Firmware/

01C0  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0200  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0240  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0280  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
02C0  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0300  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0340  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0380  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
03C0  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0400  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0440  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0480  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
04C0  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0500  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0540  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0580  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
05C0  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0600  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0640  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0680  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
06C0  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0700  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXX-
0800  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0840  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0880  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
08C0  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0900  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0940  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0980  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
09C0  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0A00  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0A40  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0A80  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0AC0  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0B00  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0B40  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0B80  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0BC0  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0C00  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0C40  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0C80  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0CC0  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0D00  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0D40  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0D80  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0DC0  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0E00  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0E40  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0E80  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0EC0  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0F00  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0F40  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0F80  : XXXXXX---------- ---------------- ---------------- ----------------
1000  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1040  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1080  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
10C0  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1100  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1140  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1180  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
11C0  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1200  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1240  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1280  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
12C0  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1300  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1340  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1380  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
13C0  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1400  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1440  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1480  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
14C0  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1500  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1540  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1580  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
15C0  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1600  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1640  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1680  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
16C0  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1700  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXX-------- ----------------
1780  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
17C0  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXX---
1800  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1840  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1880  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
18C0  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1900  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1940  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1980  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
19C0  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1A00  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1A40  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1A80  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1AC0  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1B00  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1B40  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1B80  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1BC0  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
CastleGate.asm   Memory Usage Map                                        Page: 202
/HPRR Electrical Dept/Castlegate/Firmware/

1C00  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1C40  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1C80  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1CC0  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1D00  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1D40  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1D80  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1DC0  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1E00  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1E40  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1E80  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1EC0  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXX--- ---------------- ----------------
1F00  : --------XXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1F40  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1F80  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1FC0  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
 
Program Memory Words Used:7742
Program Memory Words Free:450
 
UserID
2000  :XXXX
 
Config
2007  :X
 
EEPROM
2100  : XXXXXXX-XXXXXXXX ---------------- ---------------- ----------------
21C0  : ---------------- --------XXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
 
Data EEPROM Bytes Used:55
Data EEPROM Bytes Free:201
